
SmartWatch40_VKU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d9c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08006ea8  08006ea8  00007ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ff8  08006ff8  00008084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006ff8  08006ff8  00008084  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006ff8  08006ff8  00008084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ff8  08006ff8  00007ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ffc  08006ffc  00007ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08007000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  20000084  08007084  00008084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  08007084  000083e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a7e  00000000  00000000  000080ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025e5  00000000  00000000  00018b2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  0001b110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d6a  00000000  00000000  0001c210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000f393  00000000  00000000  0001cf7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00004b10  00000000  00000000  0002c30d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00030e1d  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004cf4  00000000  00000000  00030e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000007f  00000000  00000000  00035b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08006e90 	.word	0x08006e90

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08006e90 	.word	0x08006e90

0800014c <parseInternetTimeString>:
// ------- Handling when there is an alarm -------
void AlarmProcessing(void);

// -------------------
void parseInternetTimeString(const char* rxBuffer, uint8_t* hour, uint8_t* minute, uint8_t* second, uint8_t* weekDay, uint8_t* date, uint8_t* month, uint8_t* year)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
 8000158:	603b      	str	r3, [r7, #0]
	char weekDayStr[4];
    uint8_t idx = 0;
 800015a:	2300      	movs	r3, #0
 800015c:	75fb      	strb	r3, [r7, #23]
    uint8_t weekdayIndex = 0;
 800015e:	2300      	movs	r3, #0
 8000160:	75bb      	strb	r3, [r7, #22]

    // Parse hour
    while ('0' <= rxBuffer[idx] && rxBuffer[idx] <= '9')
 8000162:	e013      	b.n	800018c <parseInternetTimeString+0x40>
    {
        *hour = *hour * 10 + (rxBuffer[idx] - '0');
 8000164:	68bb      	ldr	r3, [r7, #8]
 8000166:	781b      	ldrb	r3, [r3, #0]
 8000168:	461a      	mov	r2, r3
 800016a:	0092      	lsls	r2, r2, #2
 800016c:	4413      	add	r3, r2
 800016e:	005b      	lsls	r3, r3, #1
 8000170:	b2da      	uxtb	r2, r3
 8000172:	7dfb      	ldrb	r3, [r7, #23]
 8000174:	68f9      	ldr	r1, [r7, #12]
 8000176:	440b      	add	r3, r1
 8000178:	781b      	ldrb	r3, [r3, #0]
 800017a:	4413      	add	r3, r2
 800017c:	b2db      	uxtb	r3, r3
 800017e:	3b30      	subs	r3, #48	@ 0x30
 8000180:	b2da      	uxtb	r2, r3
 8000182:	68bb      	ldr	r3, [r7, #8]
 8000184:	701a      	strb	r2, [r3, #0]
        idx++;
 8000186:	7dfb      	ldrb	r3, [r7, #23]
 8000188:	3301      	adds	r3, #1
 800018a:	75fb      	strb	r3, [r7, #23]
    while ('0' <= rxBuffer[idx] && rxBuffer[idx] <= '9')
 800018c:	7dfb      	ldrb	r3, [r7, #23]
 800018e:	68fa      	ldr	r2, [r7, #12]
 8000190:	4413      	add	r3, r2
 8000192:	781b      	ldrb	r3, [r3, #0]
 8000194:	2b2f      	cmp	r3, #47	@ 0x2f
 8000196:	d905      	bls.n	80001a4 <parseInternetTimeString+0x58>
 8000198:	7dfb      	ldrb	r3, [r7, #23]
 800019a:	68fa      	ldr	r2, [r7, #12]
 800019c:	4413      	add	r3, r2
 800019e:	781b      	ldrb	r3, [r3, #0]
 80001a0:	2b39      	cmp	r3, #57	@ 0x39
 80001a2:	d9df      	bls.n	8000164 <parseInternetTimeString+0x18>
    }

    if (rxBuffer[idx] == ':') idx++;
 80001a4:	7dfb      	ldrb	r3, [r7, #23]
 80001a6:	68fa      	ldr	r2, [r7, #12]
 80001a8:	4413      	add	r3, r2
 80001aa:	781b      	ldrb	r3, [r3, #0]
 80001ac:	2b3a      	cmp	r3, #58	@ 0x3a
 80001ae:	d117      	bne.n	80001e0 <parseInternetTimeString+0x94>
 80001b0:	7dfb      	ldrb	r3, [r7, #23]
 80001b2:	3301      	adds	r3, #1
 80001b4:	75fb      	strb	r3, [r7, #23]

    // Parse minute
    while ('0' <= rxBuffer[idx] && rxBuffer[idx] <= '9')
 80001b6:	e013      	b.n	80001e0 <parseInternetTimeString+0x94>
    {
        *minute = *minute * 10 + (rxBuffer[idx] - '0');
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	781b      	ldrb	r3, [r3, #0]
 80001bc:	461a      	mov	r2, r3
 80001be:	0092      	lsls	r2, r2, #2
 80001c0:	4413      	add	r3, r2
 80001c2:	005b      	lsls	r3, r3, #1
 80001c4:	b2da      	uxtb	r2, r3
 80001c6:	7dfb      	ldrb	r3, [r7, #23]
 80001c8:	68f9      	ldr	r1, [r7, #12]
 80001ca:	440b      	add	r3, r1
 80001cc:	781b      	ldrb	r3, [r3, #0]
 80001ce:	4413      	add	r3, r2
 80001d0:	b2db      	uxtb	r3, r3
 80001d2:	3b30      	subs	r3, #48	@ 0x30
 80001d4:	b2da      	uxtb	r2, r3
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	701a      	strb	r2, [r3, #0]
        idx++;
 80001da:	7dfb      	ldrb	r3, [r7, #23]
 80001dc:	3301      	adds	r3, #1
 80001de:	75fb      	strb	r3, [r7, #23]
    while ('0' <= rxBuffer[idx] && rxBuffer[idx] <= '9')
 80001e0:	7dfb      	ldrb	r3, [r7, #23]
 80001e2:	68fa      	ldr	r2, [r7, #12]
 80001e4:	4413      	add	r3, r2
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	2b2f      	cmp	r3, #47	@ 0x2f
 80001ea:	d905      	bls.n	80001f8 <parseInternetTimeString+0xac>
 80001ec:	7dfb      	ldrb	r3, [r7, #23]
 80001ee:	68fa      	ldr	r2, [r7, #12]
 80001f0:	4413      	add	r3, r2
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	2b39      	cmp	r3, #57	@ 0x39
 80001f6:	d9df      	bls.n	80001b8 <parseInternetTimeString+0x6c>
    }

    if (rxBuffer[idx] == ':') idx++;
 80001f8:	7dfb      	ldrb	r3, [r7, #23]
 80001fa:	68fa      	ldr	r2, [r7, #12]
 80001fc:	4413      	add	r3, r2
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	2b3a      	cmp	r3, #58	@ 0x3a
 8000202:	d117      	bne.n	8000234 <parseInternetTimeString+0xe8>
 8000204:	7dfb      	ldrb	r3, [r7, #23]
 8000206:	3301      	adds	r3, #1
 8000208:	75fb      	strb	r3, [r7, #23]

    // Parse second
    while ('0' <= rxBuffer[idx] && rxBuffer[idx] <= '9')
 800020a:	e013      	b.n	8000234 <parseInternetTimeString+0xe8>
    {
        *second = *second * 10 + (rxBuffer[idx] - '0');
 800020c:	683b      	ldr	r3, [r7, #0]
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	461a      	mov	r2, r3
 8000212:	0092      	lsls	r2, r2, #2
 8000214:	4413      	add	r3, r2
 8000216:	005b      	lsls	r3, r3, #1
 8000218:	b2da      	uxtb	r2, r3
 800021a:	7dfb      	ldrb	r3, [r7, #23]
 800021c:	68f9      	ldr	r1, [r7, #12]
 800021e:	440b      	add	r3, r1
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	4413      	add	r3, r2
 8000224:	b2db      	uxtb	r3, r3
 8000226:	3b30      	subs	r3, #48	@ 0x30
 8000228:	b2da      	uxtb	r2, r3
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	701a      	strb	r2, [r3, #0]
        idx++;
 800022e:	7dfb      	ldrb	r3, [r7, #23]
 8000230:	3301      	adds	r3, #1
 8000232:	75fb      	strb	r3, [r7, #23]
    while ('0' <= rxBuffer[idx] && rxBuffer[idx] <= '9')
 8000234:	7dfb      	ldrb	r3, [r7, #23]
 8000236:	68fa      	ldr	r2, [r7, #12]
 8000238:	4413      	add	r3, r2
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	2b2f      	cmp	r3, #47	@ 0x2f
 800023e:	d905      	bls.n	800024c <parseInternetTimeString+0x100>
 8000240:	7dfb      	ldrb	r3, [r7, #23]
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	4413      	add	r3, r2
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	2b39      	cmp	r3, #57	@ 0x39
 800024a:	d9df      	bls.n	800020c <parseInternetTimeString+0xc0>
    }

    if (rxBuffer[idx] == '-') idx++;
 800024c:	7dfb      	ldrb	r3, [r7, #23]
 800024e:	68fa      	ldr	r2, [r7, #12]
 8000250:	4413      	add	r3, r2
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	2b2d      	cmp	r3, #45	@ 0x2d
 8000256:	d112      	bne.n	800027e <parseInternetTimeString+0x132>
 8000258:	7dfb      	ldrb	r3, [r7, #23]
 800025a:	3301      	adds	r3, #1
 800025c:	75fb      	strb	r3, [r7, #23]

    // Parse weekday
    while (rxBuffer[idx] != '-' && rxBuffer[idx] != '\0' && weekdayIndex < 3)
 800025e:	e00e      	b.n	800027e <parseInternetTimeString+0x132>
    {
    	weekDayStr[weekdayIndex] = rxBuffer[idx];
 8000260:	7dfb      	ldrb	r3, [r7, #23]
 8000262:	68fa      	ldr	r2, [r7, #12]
 8000264:	441a      	add	r2, r3
 8000266:	7dbb      	ldrb	r3, [r7, #22]
 8000268:	7812      	ldrb	r2, [r2, #0]
 800026a:	3318      	adds	r3, #24
 800026c:	443b      	add	r3, r7
 800026e:	f803 2c08 	strb.w	r2, [r3, #-8]
        idx++;
 8000272:	7dfb      	ldrb	r3, [r7, #23]
 8000274:	3301      	adds	r3, #1
 8000276:	75fb      	strb	r3, [r7, #23]
        weekdayIndex++;
 8000278:	7dbb      	ldrb	r3, [r7, #22]
 800027a:	3301      	adds	r3, #1
 800027c:	75bb      	strb	r3, [r7, #22]
    while (rxBuffer[idx] != '-' && rxBuffer[idx] != '\0' && weekdayIndex < 3)
 800027e:	7dfb      	ldrb	r3, [r7, #23]
 8000280:	68fa      	ldr	r2, [r7, #12]
 8000282:	4413      	add	r3, r2
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	2b2d      	cmp	r3, #45	@ 0x2d
 8000288:	d008      	beq.n	800029c <parseInternetTimeString+0x150>
 800028a:	7dfb      	ldrb	r3, [r7, #23]
 800028c:	68fa      	ldr	r2, [r7, #12]
 800028e:	4413      	add	r3, r2
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d002      	beq.n	800029c <parseInternetTimeString+0x150>
 8000296:	7dbb      	ldrb	r3, [r7, #22]
 8000298:	2b02      	cmp	r3, #2
 800029a:	d9e1      	bls.n	8000260 <parseInternetTimeString+0x114>
    }
    weekDayStr[weekdayIndex] = '\0';
 800029c:	7dbb      	ldrb	r3, [r7, #22]
 800029e:	3318      	adds	r3, #24
 80002a0:	443b      	add	r3, r7
 80002a2:	2200      	movs	r2, #0
 80002a4:	f803 2c08 	strb.w	r2, [r3, #-8]

    if (rxBuffer[idx] == '-') idx++;
 80002a8:	7dfb      	ldrb	r3, [r7, #23]
 80002aa:	68fa      	ldr	r2, [r7, #12]
 80002ac:	4413      	add	r3, r2
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	2b2d      	cmp	r3, #45	@ 0x2d
 80002b2:	d117      	bne.n	80002e4 <parseInternetTimeString+0x198>
 80002b4:	7dfb      	ldrb	r3, [r7, #23]
 80002b6:	3301      	adds	r3, #1
 80002b8:	75fb      	strb	r3, [r7, #23]

    // Parse day
    while ('0' <= rxBuffer[idx] && rxBuffer[idx] <= '9')
 80002ba:	e013      	b.n	80002e4 <parseInternetTimeString+0x198>
    {
        *date = *date * 10 + (rxBuffer[idx] - '0');
 80002bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	461a      	mov	r2, r3
 80002c2:	0092      	lsls	r2, r2, #2
 80002c4:	4413      	add	r3, r2
 80002c6:	005b      	lsls	r3, r3, #1
 80002c8:	b2da      	uxtb	r2, r3
 80002ca:	7dfb      	ldrb	r3, [r7, #23]
 80002cc:	68f9      	ldr	r1, [r7, #12]
 80002ce:	440b      	add	r3, r1
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	4413      	add	r3, r2
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	3b30      	subs	r3, #48	@ 0x30
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002dc:	701a      	strb	r2, [r3, #0]
        idx++;
 80002de:	7dfb      	ldrb	r3, [r7, #23]
 80002e0:	3301      	adds	r3, #1
 80002e2:	75fb      	strb	r3, [r7, #23]
    while ('0' <= rxBuffer[idx] && rxBuffer[idx] <= '9')
 80002e4:	7dfb      	ldrb	r3, [r7, #23]
 80002e6:	68fa      	ldr	r2, [r7, #12]
 80002e8:	4413      	add	r3, r2
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	2b2f      	cmp	r3, #47	@ 0x2f
 80002ee:	d905      	bls.n	80002fc <parseInternetTimeString+0x1b0>
 80002f0:	7dfb      	ldrb	r3, [r7, #23]
 80002f2:	68fa      	ldr	r2, [r7, #12]
 80002f4:	4413      	add	r3, r2
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2b39      	cmp	r3, #57	@ 0x39
 80002fa:	d9df      	bls.n	80002bc <parseInternetTimeString+0x170>
    }

    if (rxBuffer[idx] == '/') idx++;
 80002fc:	7dfb      	ldrb	r3, [r7, #23]
 80002fe:	68fa      	ldr	r2, [r7, #12]
 8000300:	4413      	add	r3, r2
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	2b2f      	cmp	r3, #47	@ 0x2f
 8000306:	d117      	bne.n	8000338 <parseInternetTimeString+0x1ec>
 8000308:	7dfb      	ldrb	r3, [r7, #23]
 800030a:	3301      	adds	r3, #1
 800030c:	75fb      	strb	r3, [r7, #23]

    // Parse month
    while ('0' <= rxBuffer[idx] && rxBuffer[idx] <= '9')
 800030e:	e013      	b.n	8000338 <parseInternetTimeString+0x1ec>
    {
        *month = *month * 10 + (rxBuffer[idx] - '0');
 8000310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	461a      	mov	r2, r3
 8000316:	0092      	lsls	r2, r2, #2
 8000318:	4413      	add	r3, r2
 800031a:	005b      	lsls	r3, r3, #1
 800031c:	b2da      	uxtb	r2, r3
 800031e:	7dfb      	ldrb	r3, [r7, #23]
 8000320:	68f9      	ldr	r1, [r7, #12]
 8000322:	440b      	add	r3, r1
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	4413      	add	r3, r2
 8000328:	b2db      	uxtb	r3, r3
 800032a:	3b30      	subs	r3, #48	@ 0x30
 800032c:	b2da      	uxtb	r2, r3
 800032e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000330:	701a      	strb	r2, [r3, #0]
        idx++;
 8000332:	7dfb      	ldrb	r3, [r7, #23]
 8000334:	3301      	adds	r3, #1
 8000336:	75fb      	strb	r3, [r7, #23]
    while ('0' <= rxBuffer[idx] && rxBuffer[idx] <= '9')
 8000338:	7dfb      	ldrb	r3, [r7, #23]
 800033a:	68fa      	ldr	r2, [r7, #12]
 800033c:	4413      	add	r3, r2
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b2f      	cmp	r3, #47	@ 0x2f
 8000342:	d905      	bls.n	8000350 <parseInternetTimeString+0x204>
 8000344:	7dfb      	ldrb	r3, [r7, #23]
 8000346:	68fa      	ldr	r2, [r7, #12]
 8000348:	4413      	add	r3, r2
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	2b39      	cmp	r3, #57	@ 0x39
 800034e:	d9df      	bls.n	8000310 <parseInternetTimeString+0x1c4>
    }

    if (rxBuffer[idx] == '/') idx++;
 8000350:	7dfb      	ldrb	r3, [r7, #23]
 8000352:	68fa      	ldr	r2, [r7, #12]
 8000354:	4413      	add	r3, r2
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	2b2f      	cmp	r3, #47	@ 0x2f
 800035a:	d117      	bne.n	800038c <parseInternetTimeString+0x240>
 800035c:	7dfb      	ldrb	r3, [r7, #23]
 800035e:	3301      	adds	r3, #1
 8000360:	75fb      	strb	r3, [r7, #23]

    // Parse year
    while ('0' <= rxBuffer[idx] && rxBuffer[idx] <= '9')
 8000362:	e013      	b.n	800038c <parseInternetTimeString+0x240>
    {
        *year = *year * 10 + (rxBuffer[idx] - '0');
 8000364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	461a      	mov	r2, r3
 800036a:	0092      	lsls	r2, r2, #2
 800036c:	4413      	add	r3, r2
 800036e:	005b      	lsls	r3, r3, #1
 8000370:	b2da      	uxtb	r2, r3
 8000372:	7dfb      	ldrb	r3, [r7, #23]
 8000374:	68f9      	ldr	r1, [r7, #12]
 8000376:	440b      	add	r3, r1
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	4413      	add	r3, r2
 800037c:	b2db      	uxtb	r3, r3
 800037e:	3b30      	subs	r3, #48	@ 0x30
 8000380:	b2da      	uxtb	r2, r3
 8000382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000384:	701a      	strb	r2, [r3, #0]
        idx++;
 8000386:	7dfb      	ldrb	r3, [r7, #23]
 8000388:	3301      	adds	r3, #1
 800038a:	75fb      	strb	r3, [r7, #23]
    while ('0' <= rxBuffer[idx] && rxBuffer[idx] <= '9')
 800038c:	7dfb      	ldrb	r3, [r7, #23]
 800038e:	68fa      	ldr	r2, [r7, #12]
 8000390:	4413      	add	r3, r2
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	2b2f      	cmp	r3, #47	@ 0x2f
 8000396:	d905      	bls.n	80003a4 <parseInternetTimeString+0x258>
 8000398:	7dfb      	ldrb	r3, [r7, #23]
 800039a:	68fa      	ldr	r2, [r7, #12]
 800039c:	4413      	add	r3, r2
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b39      	cmp	r3, #57	@ 0x39
 80003a2:	d9df      	bls.n	8000364 <parseInternetTimeString+0x218>
    }

    if (strCompare(weekDayStr, "SUN")) *weekDay = SUN;
 80003a4:	f107 0310 	add.w	r3, r7, #16
 80003a8:	492d      	ldr	r1, [pc, #180]	@ (8000460 <parseInternetTimeString+0x314>)
 80003aa:	4618      	mov	r0, r3
 80003ac:	f005 fc70 	bl	8005c90 <strCompare>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d003      	beq.n	80003be <parseInternetTimeString+0x272>
 80003b6:	6a3b      	ldr	r3, [r7, #32]
 80003b8:	2201      	movs	r2, #1
 80003ba:	701a      	strb	r2, [r3, #0]
    else if (strCompare(weekDayStr, "TUE")) *weekDay = TUE;
    else if (strCompare(weekDayStr, "WED")) *weekDay = WED;
    else if (strCompare(weekDayStr, "THU")) *weekDay = THU;
    else if (strCompare(weekDayStr, "FRI")) *weekDay = FRI;
    else if (strCompare(weekDayStr, "SAT")) *weekDay = SAT;
}
 80003bc:	e04c      	b.n	8000458 <parseInternetTimeString+0x30c>
    else if (strCompare(weekDayStr, "MON")) *weekDay = MON;
 80003be:	f107 0310 	add.w	r3, r7, #16
 80003c2:	4928      	ldr	r1, [pc, #160]	@ (8000464 <parseInternetTimeString+0x318>)
 80003c4:	4618      	mov	r0, r3
 80003c6:	f005 fc63 	bl	8005c90 <strCompare>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d003      	beq.n	80003d8 <parseInternetTimeString+0x28c>
 80003d0:	6a3b      	ldr	r3, [r7, #32]
 80003d2:	2202      	movs	r2, #2
 80003d4:	701a      	strb	r2, [r3, #0]
}
 80003d6:	e03f      	b.n	8000458 <parseInternetTimeString+0x30c>
    else if (strCompare(weekDayStr, "TUE")) *weekDay = TUE;
 80003d8:	f107 0310 	add.w	r3, r7, #16
 80003dc:	4922      	ldr	r1, [pc, #136]	@ (8000468 <parseInternetTimeString+0x31c>)
 80003de:	4618      	mov	r0, r3
 80003e0:	f005 fc56 	bl	8005c90 <strCompare>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d003      	beq.n	80003f2 <parseInternetTimeString+0x2a6>
 80003ea:	6a3b      	ldr	r3, [r7, #32]
 80003ec:	2203      	movs	r2, #3
 80003ee:	701a      	strb	r2, [r3, #0]
}
 80003f0:	e032      	b.n	8000458 <parseInternetTimeString+0x30c>
    else if (strCompare(weekDayStr, "WED")) *weekDay = WED;
 80003f2:	f107 0310 	add.w	r3, r7, #16
 80003f6:	491d      	ldr	r1, [pc, #116]	@ (800046c <parseInternetTimeString+0x320>)
 80003f8:	4618      	mov	r0, r3
 80003fa:	f005 fc49 	bl	8005c90 <strCompare>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d003      	beq.n	800040c <parseInternetTimeString+0x2c0>
 8000404:	6a3b      	ldr	r3, [r7, #32]
 8000406:	2204      	movs	r2, #4
 8000408:	701a      	strb	r2, [r3, #0]
}
 800040a:	e025      	b.n	8000458 <parseInternetTimeString+0x30c>
    else if (strCompare(weekDayStr, "THU")) *weekDay = THU;
 800040c:	f107 0310 	add.w	r3, r7, #16
 8000410:	4917      	ldr	r1, [pc, #92]	@ (8000470 <parseInternetTimeString+0x324>)
 8000412:	4618      	mov	r0, r3
 8000414:	f005 fc3c 	bl	8005c90 <strCompare>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d003      	beq.n	8000426 <parseInternetTimeString+0x2da>
 800041e:	6a3b      	ldr	r3, [r7, #32]
 8000420:	2205      	movs	r2, #5
 8000422:	701a      	strb	r2, [r3, #0]
}
 8000424:	e018      	b.n	8000458 <parseInternetTimeString+0x30c>
    else if (strCompare(weekDayStr, "FRI")) *weekDay = FRI;
 8000426:	f107 0310 	add.w	r3, r7, #16
 800042a:	4912      	ldr	r1, [pc, #72]	@ (8000474 <parseInternetTimeString+0x328>)
 800042c:	4618      	mov	r0, r3
 800042e:	f005 fc2f 	bl	8005c90 <strCompare>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d003      	beq.n	8000440 <parseInternetTimeString+0x2f4>
 8000438:	6a3b      	ldr	r3, [r7, #32]
 800043a:	2206      	movs	r2, #6
 800043c:	701a      	strb	r2, [r3, #0]
}
 800043e:	e00b      	b.n	8000458 <parseInternetTimeString+0x30c>
    else if (strCompare(weekDayStr, "SAT")) *weekDay = SAT;
 8000440:	f107 0310 	add.w	r3, r7, #16
 8000444:	490c      	ldr	r1, [pc, #48]	@ (8000478 <parseInternetTimeString+0x32c>)
 8000446:	4618      	mov	r0, r3
 8000448:	f005 fc22 	bl	8005c90 <strCompare>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d002      	beq.n	8000458 <parseInternetTimeString+0x30c>
 8000452:	6a3b      	ldr	r3, [r7, #32]
 8000454:	2207      	movs	r2, #7
 8000456:	701a      	strb	r2, [r3, #0]
}
 8000458:	bf00      	nop
 800045a:	3718      	adds	r7, #24
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	08006eac 	.word	0x08006eac
 8000464:	08006eb0 	.word	0x08006eb0
 8000468:	08006eb4 	.word	0x08006eb4
 800046c:	08006eb8 	.word	0x08006eb8
 8000470:	08006ebc 	.word	0x08006ebc
 8000474:	08006ec0 	.word	0x08006ec0
 8000478:	08006ec4 	.word	0x08006ec4

0800047c <TimeInternetUpdateHandling>:

void TimeInternetUpdateHandling(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af04      	add	r7, sp, #16
	while (flagUpdateTimeOnInternet)
 8000482:	bf00      	nop
 8000484:	4b28      	ldr	r3, [pc, #160]	@ (8000528 <TimeInternetUpdateHandling+0xac>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d048      	beq.n	800051e <TimeInternetUpdateHandling+0xa2>
	{
		LCD_backlight_on();
 800048c:	f005 ff80 	bl	8006390 <LCD_backlight_on>

	    uint8_t netHour = 0, netMinute = 0, netSecond = 0;
 8000490:	2300      	movs	r3, #0
 8000492:	71fb      	strb	r3, [r7, #7]
 8000494:	2300      	movs	r3, #0
 8000496:	71bb      	strb	r3, [r7, #6]
 8000498:	2300      	movs	r3, #0
 800049a:	717b      	strb	r3, [r7, #5]
	    uint8_t netWeekday = 0, netDate = 0, netMonth = 0, netYear = 0;
 800049c:	2300      	movs	r3, #0
 800049e:	713b      	strb	r3, [r7, #4]
 80004a0:	2300      	movs	r3, #0
 80004a2:	70fb      	strb	r3, [r7, #3]
 80004a4:	2300      	movs	r3, #0
 80004a6:	70bb      	strb	r3, [r7, #2]
 80004a8:	2300      	movs	r3, #0
 80004aa:	707b      	strb	r3, [r7, #1]

	    parseInternetTimeString(rxBuffer, &netHour, &netMinute, &netSecond, &netWeekday, &netDate, &netMonth, &netYear);
 80004ac:	1d78      	adds	r0, r7, #5
 80004ae:	1dba      	adds	r2, r7, #6
 80004b0:	1df9      	adds	r1, r7, #7
 80004b2:	1c7b      	adds	r3, r7, #1
 80004b4:	9303      	str	r3, [sp, #12]
 80004b6:	1cbb      	adds	r3, r7, #2
 80004b8:	9302      	str	r3, [sp, #8]
 80004ba:	1cfb      	adds	r3, r7, #3
 80004bc:	9301      	str	r3, [sp, #4]
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	9300      	str	r3, [sp, #0]
 80004c2:	4603      	mov	r3, r0
 80004c4:	4819      	ldr	r0, [pc, #100]	@ (800052c <TimeInternetUpdateHandling+0xb0>)
 80004c6:	f7ff fe41 	bl	800014c <parseInternetTimeString>

        DS3231_SetTime(&DS3231_Time, netHour, netMinute, netSecond);			// Chốt Giờ-phút-giây
 80004ca:	79f9      	ldrb	r1, [r7, #7]
 80004cc:	79ba      	ldrb	r2, [r7, #6]
 80004ce:	797b      	ldrb	r3, [r7, #5]
 80004d0:	4817      	ldr	r0, [pc, #92]	@ (8000530 <TimeInternetUpdateHandling+0xb4>)
 80004d2:	f005 fce8 	bl	8005ea6 <DS3231_SetTime>
        DS3231_SetDate(&DS3231_Date, netWeekday, netDate, netMonth, netYear);	// Chốt ngày-ngày-tháng-năm
 80004d6:	7939      	ldrb	r1, [r7, #4]
 80004d8:	78fa      	ldrb	r2, [r7, #3]
 80004da:	78b8      	ldrb	r0, [r7, #2]
 80004dc:	787b      	ldrb	r3, [r7, #1]
 80004de:	9300      	str	r3, [sp, #0]
 80004e0:	4603      	mov	r3, r0
 80004e2:	4814      	ldr	r0, [pc, #80]	@ (8000534 <TimeInternetUpdateHandling+0xb8>)
 80004e4:	f005 fd3c 	bl	8005f60 <DS3231_SetDate>

	    LCD_goto_XY(1, 2);
 80004e8:	2102      	movs	r1, #2
 80004ea:	2001      	movs	r0, #1
 80004ec:	f005 ffb2 	bl	8006454 <LCD_goto_XY>
	    LCD_send_string("TIME UPDATED");
 80004f0:	4811      	ldr	r0, [pc, #68]	@ (8000538 <TimeInternetUpdateHandling+0xbc>)
 80004f2:	f005 ff93 	bl	800641c <LCD_send_string>
	    LCD_goto_XY(2, 2);
 80004f6:	2102      	movs	r1, #2
 80004f8:	2002      	movs	r0, #2
 80004fa:	f005 ffab 	bl	8006454 <LCD_goto_XY>
	    LCD_send_string("SUCCESSFULLY");
 80004fe:	480f      	ldr	r0, [pc, #60]	@ (800053c <TimeInternetUpdateHandling+0xc0>)
 8000500:	f005 ff8c 	bl	800641c <LCD_send_string>

	    HAL_Delay(2000);
 8000504:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000508:	f001 feb4 	bl	8002274 <HAL_Delay>

	    LCD_clear_display();
 800050c:	f005 ff9b 	bl	8006446 <LCD_clear_display>
	    HAL_Delay(40);
 8000510:	2028      	movs	r0, #40	@ 0x28
 8000512:	f001 feaf 	bl	8002274 <HAL_Delay>

	    flagUpdateTimeOnInternet = 0;
 8000516:	4b04      	ldr	r3, [pc, #16]	@ (8000528 <TimeInternetUpdateHandling+0xac>)
 8000518:	2200      	movs	r2, #0
 800051a:	701a      	strb	r2, [r3, #0]

	    break;
 800051c:	e000      	b.n	8000520 <TimeInternetUpdateHandling+0xa4>
	}
}
 800051e:	bf00      	nop
 8000520:	bf00      	nop
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000265 	.word	0x20000265
 800052c:	20000268 	.word	0x20000268
 8000530:	200001d8 	.word	0x200001d8
 8000534:	200001f4 	.word	0x200001f4
 8000538:	08006ed0 	.word	0x08006ed0
 800053c:	08006ee0 	.word	0x08006ee0

08000540 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Perform an alarm if an interrupt signal occurs
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	80fb      	strh	r3, [r7, #6]
	flagAlarm = 1;
 800054a:	4b08      	ldr	r3, [pc, #32]	@ (800056c <HAL_GPIO_EXTI_Callback+0x2c>)
 800054c:	2201      	movs	r2, #1
 800054e:	701a      	strb	r2, [r3, #0]

	LCD_clear_display();
 8000550:	f005 ff79 	bl	8006446 <LCD_clear_display>
	alarmStartTime = HAL_GetTick();
 8000554:	f001 fe84 	bl	8002260 <HAL_GetTick>
 8000558:	4603      	mov	r3, r0
 800055a:	4a05      	ldr	r2, [pc, #20]	@ (8000570 <HAL_GPIO_EXTI_Callback+0x30>)
 800055c:	6013      	str	r3, [r2, #0]

    DS3231_ClearnFlagAlarm2(&hi2c1);	// CLear Flag Alarm DS3231
 800055e:	4805      	ldr	r0, [pc, #20]	@ (8000574 <HAL_GPIO_EXTI_Callback+0x34>)
 8000560:	f005 fdf3 	bl	800614a <DS3231_ClearnFlagAlarm2>
}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	2000025f 	.word	0x2000025f
 8000570:	20000260 	.word	0x20000260
 8000574:	200000a0 	.word	0x200000a0

08000578 <HAL_UART_RxCpltCallback>:

// Nhận UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
    if (rxByte != '\r' && rxByte != '\n') // Loại bỏ ký tự '\r' và '\n'
 8000580:	4b1b      	ldr	r3, [pc, #108]	@ (80005f0 <HAL_UART_RxCpltCallback+0x78>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b0d      	cmp	r3, #13
 8000586:	d018      	beq.n	80005ba <HAL_UART_RxCpltCallback+0x42>
 8000588:	4b19      	ldr	r3, [pc, #100]	@ (80005f0 <HAL_UART_RxCpltCallback+0x78>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b0a      	cmp	r3, #10
 800058e:	d014      	beq.n	80005ba <HAL_UART_RxCpltCallback+0x42>
    {
        rxBuffer[rxBufferIndex] = rxByte;
 8000590:	4b18      	ldr	r3, [pc, #96]	@ (80005f4 <HAL_UART_RxCpltCallback+0x7c>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	461a      	mov	r2, r3
 8000596:	4b16      	ldr	r3, [pc, #88]	@ (80005f0 <HAL_UART_RxCpltCallback+0x78>)
 8000598:	7819      	ldrb	r1, [r3, #0]
 800059a:	4b17      	ldr	r3, [pc, #92]	@ (80005f8 <HAL_UART_RxCpltCallback+0x80>)
 800059c:	5499      	strb	r1, [r3, r2]
        rxBufferIndex++;
 800059e:	4b15      	ldr	r3, [pc, #84]	@ (80005f4 <HAL_UART_RxCpltCallback+0x7c>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	3301      	adds	r3, #1
 80005a4:	b2da      	uxtb	r2, r3
 80005a6:	4b13      	ldr	r3, [pc, #76]	@ (80005f4 <HAL_UART_RxCpltCallback+0x7c>)
 80005a8:	701a      	strb	r2, [r3, #0]

        if (rxBufferIndex == RX_BUFFER_SIZE)
 80005aa:	4b12      	ldr	r3, [pc, #72]	@ (80005f4 <HAL_UART_RxCpltCallback+0x7c>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b19      	cmp	r3, #25
 80005b0:	d115      	bne.n	80005de <HAL_UART_RxCpltCallback+0x66>
        {
            rxBufferIndex = 0;
 80005b2:	4b10      	ldr	r3, [pc, #64]	@ (80005f4 <HAL_UART_RxCpltCallback+0x7c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]
        if (rxBufferIndex == RX_BUFFER_SIZE)
 80005b8:	e011      	b.n	80005de <HAL_UART_RxCpltCallback+0x66>
        }
    }
    else if (rxByte == '\r')
 80005ba:	4b0d      	ldr	r3, [pc, #52]	@ (80005f0 <HAL_UART_RxCpltCallback+0x78>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b0d      	cmp	r3, #13
 80005c0:	d10d      	bne.n	80005de <HAL_UART_RxCpltCallback+0x66>
    {
        rxBuffer[rxBufferIndex] = '\0'; // Kết thúc chuỗi khi nhận '\r'
 80005c2:	4b0c      	ldr	r3, [pc, #48]	@ (80005f4 <HAL_UART_RxCpltCallback+0x7c>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	461a      	mov	r2, r3
 80005c8:	4b0b      	ldr	r3, [pc, #44]	@ (80005f8 <HAL_UART_RxCpltCallback+0x80>)
 80005ca:	2100      	movs	r1, #0
 80005cc:	5499      	strb	r1, [r3, r2]

        rxBufferIndex = 0; // Reset chỉ số bộ đệm
 80005ce:	4b09      	ldr	r3, [pc, #36]	@ (80005f4 <HAL_UART_RxCpltCallback+0x7c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]

        flagUpdateTimeOnInternet = 1; // nhận chuỗi đủ rồi bật cờ update lên
 80005d4:	4b09      	ldr	r3, [pc, #36]	@ (80005fc <HAL_UART_RxCpltCallback+0x84>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	701a      	strb	r2, [r3, #0]
        LCD_clear_display(); // Xóa màn hình
 80005da:	f005 ff34 	bl	8006446 <LCD_clear_display>
    }

    // Tiếp tục nhận byte tiếp theo
    HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 80005de:	2201      	movs	r2, #1
 80005e0:	4903      	ldr	r1, [pc, #12]	@ (80005f0 <HAL_UART_RxCpltCallback+0x78>)
 80005e2:	4807      	ldr	r0, [pc, #28]	@ (8000600 <HAL_UART_RxCpltCallback+0x88>)
 80005e4:	f004 fe06 	bl	80051f4 <HAL_UART_Receive_IT>
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000266 	.word	0x20000266
 80005f4:	20000281 	.word	0x20000281
 80005f8:	20000268 	.word	0x20000268
 80005fc:	20000265 	.word	0x20000265
 8000600:	20000190 	.word	0x20000190

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000608:	f001 fdd2 	bl	80021b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f892 	bl	8000734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f000 f9ce 	bl	80009b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000614:	f000 f8d0 	bl	80007b8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000618:	f000 f8fc 	bl	8000814 <MX_I2C2_Init>
  MX_TIM2_Init();
 800061c:	f000 f928 	bl	8000870 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000620:	f000 f99c 	bl	800095c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(2000); // Cho LCD hoặc DS3231 ổn định nguồn
 8000624:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000628:	f001 fe24 	bl	8002274 <HAL_Delay>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800062c:	2104      	movs	r1, #4
 800062e:	4830      	ldr	r0, [pc, #192]	@ (80006f0 <main+0xec>)
 8000630:	f004 f856 	bl	80046e0 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 8000634:	2201      	movs	r2, #1
 8000636:	492f      	ldr	r1, [pc, #188]	@ (80006f4 <main+0xf0>)
 8000638:	482f      	ldr	r0, [pc, #188]	@ (80006f8 <main+0xf4>)
 800063a:	f004 fddb 	bl	80051f4 <HAL_UART_Receive_IT>

  LCD_Init();
 800063e:	f005 febf 	bl	80063c0 <LCD_Init>
  LCD_backlight_on();
 8000642:	f005 fea5 	bl	8006390 <LCD_backlight_on>
  HAL_Delay(500);
 8000646:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800064a:	f001 fe13 	bl	8002274 <HAL_Delay>

  DS3231_DateTime_Init(&hi2c1, &DS3231_Time);
 800064e:	492b      	ldr	r1, [pc, #172]	@ (80006fc <main+0xf8>)
 8000650:	482b      	ldr	r0, [pc, #172]	@ (8000700 <main+0xfc>)
 8000652:	f005 fc1b 	bl	8005e8c <DS3231_DateTime_Init>
  DS3231_DateTime_Init(&hi2c1, &DS3231_Date);
 8000656:	492b      	ldr	r1, [pc, #172]	@ (8000704 <main+0x100>)
 8000658:	4829      	ldr	r0, [pc, #164]	@ (8000700 <main+0xfc>)
 800065a:	f005 fc17 	bl	8005e8c <DS3231_DateTime_Init>
  DS3231_Alarm2_Init(&hi2c1, &DS3231_Alarm);
 800065e:	492a      	ldr	r1, [pc, #168]	@ (8000708 <main+0x104>)
 8000660:	4827      	ldr	r0, [pc, #156]	@ (8000700 <main+0xfc>)
 8000662:	f005 fceb 	bl	800603c <DS3231_Alarm2_Init>
  HAL_Delay(500);
 8000666:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800066a:	f001 fe03 	bl	8002274 <HAL_Delay>
  // Get current time in DS3231 for setting
  DS3231_GetTime(&DS3231_Time);
 800066e:	4823      	ldr	r0, [pc, #140]	@ (80006fc <main+0xf8>)
 8000670:	f005 fc4a 	bl	8005f08 <DS3231_GetTime>
  hourBuffer = DS3231_Time.Hour;
 8000674:	4b21      	ldr	r3, [pc, #132]	@ (80006fc <main+0xf8>)
 8000676:	799a      	ldrb	r2, [r3, #6]
 8000678:	4b24      	ldr	r3, [pc, #144]	@ (800070c <main+0x108>)
 800067a:	701a      	strb	r2, [r3, #0]
  minuteBuffer = DS3231_Time.Minutes;
 800067c:	4b1f      	ldr	r3, [pc, #124]	@ (80006fc <main+0xf8>)
 800067e:	795a      	ldrb	r2, [r3, #5]
 8000680:	4b23      	ldr	r3, [pc, #140]	@ (8000710 <main+0x10c>)
 8000682:	701a      	strb	r2, [r3, #0]
  secondBuffer = DS3231_Time.Seconds;
 8000684:	4b1d      	ldr	r3, [pc, #116]	@ (80006fc <main+0xf8>)
 8000686:	791a      	ldrb	r2, [r3, #4]
 8000688:	4b22      	ldr	r3, [pc, #136]	@ (8000714 <main+0x110>)
 800068a:	701a      	strb	r2, [r3, #0]

  // Get current date in DS3231 for setting
  DS3231_GetDate(&DS3231_Date);
 800068c:	481d      	ldr	r0, [pc, #116]	@ (8000704 <main+0x100>)
 800068e:	f005 fca0 	bl	8005fd2 <DS3231_GetDate>
  dayBuffer = DS3231_Date.Day;
 8000692:	4b1c      	ldr	r3, [pc, #112]	@ (8000704 <main+0x100>)
 8000694:	79da      	ldrb	r2, [r3, #7]
 8000696:	4b20      	ldr	r3, [pc, #128]	@ (8000718 <main+0x114>)
 8000698:	701a      	strb	r2, [r3, #0]
  dateBuffer = DS3231_Date.Date;
 800069a:	4b1a      	ldr	r3, [pc, #104]	@ (8000704 <main+0x100>)
 800069c:	7a1a      	ldrb	r2, [r3, #8]
 800069e:	4b1f      	ldr	r3, [pc, #124]	@ (800071c <main+0x118>)
 80006a0:	701a      	strb	r2, [r3, #0]
  monthBuffer = DS3231_Date.Month;
 80006a2:	4b18      	ldr	r3, [pc, #96]	@ (8000704 <main+0x100>)
 80006a4:	7a5a      	ldrb	r2, [r3, #9]
 80006a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000720 <main+0x11c>)
 80006a8:	701a      	strb	r2, [r3, #0]
  yearBuffer = DS3231_Date.Year;
 80006aa:	4b16      	ldr	r3, [pc, #88]	@ (8000704 <main+0x100>)
 80006ac:	7a9a      	ldrb	r2, [r3, #10]
 80006ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000724 <main+0x120>)
 80006b0:	701a      	strb	r2, [r3, #0]

  // Get current alarm in DS3231 for setting
  DS3231_GetAlarm2(&DS3231_Alarm);
 80006b2:	4815      	ldr	r0, [pc, #84]	@ (8000708 <main+0x104>)
 80006b4:	f005 fd26 	bl	8006104 <DS3231_GetAlarm2>
  hourAlarmBuffer = DS3231_Alarm.Hour;
 80006b8:	4b13      	ldr	r3, [pc, #76]	@ (8000708 <main+0x104>)
 80006ba:	795a      	ldrb	r2, [r3, #5]
 80006bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000728 <main+0x124>)
 80006be:	701a      	strb	r2, [r3, #0]
  minuteAlarmBuffer = DS3231_Alarm.Minutes;
 80006c0:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <main+0x104>)
 80006c2:	791a      	ldrb	r2, [r3, #4]
 80006c4:	4b19      	ldr	r3, [pc, #100]	@ (800072c <main+0x128>)
 80006c6:	701a      	strb	r2, [r3, #0]

  // Get current mode alarm in DS3231 for setting
  checkAlarmStatus = DS3231_CheckModeAlarm2(&hi2c1);
 80006c8:	480d      	ldr	r0, [pc, #52]	@ (8000700 <main+0xfc>)
 80006ca:	f005 fdb1 	bl	8006230 <DS3231_CheckModeAlarm2>
 80006ce:	4603      	mov	r3, r0
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b17      	ldr	r3, [pc, #92]	@ (8000730 <main+0x12c>)
 80006d4:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HandleClockStateMachine();
 80006d6:	f001 f8df 	bl	8001898 <HandleClockStateMachine>

	  HAL_Delay(100);
 80006da:	2064      	movs	r0, #100	@ 0x64
 80006dc:	f001 fdca 	bl	8002274 <HAL_Delay>

	  EnergySavingProcessing();
 80006e0:	f001 faac 	bl	8001c3c <EnergySavingProcessing>

	  AlarmProcessing();
 80006e4:	f001 faf6 	bl	8001cd4 <AlarmProcessing>

	  TimeInternetUpdateHandling();
 80006e8:	f7ff fec8 	bl	800047c <TimeInternetUpdateHandling>
	  HandleClockStateMachine();
 80006ec:	bf00      	nop
 80006ee:	e7f2      	b.n	80006d6 <main+0xd2>
 80006f0:	20000148 	.word	0x20000148
 80006f4:	20000266 	.word	0x20000266
 80006f8:	20000190 	.word	0x20000190
 80006fc:	200001d8 	.word	0x200001d8
 8000700:	200000a0 	.word	0x200000a0
 8000704:	200001f4 	.word	0x200001f4
 8000708:	20000210 	.word	0x20000210
 800070c:	20000255 	.word	0x20000255
 8000710:	20000256 	.word	0x20000256
 8000714:	20000257 	.word	0x20000257
 8000718:	20000258 	.word	0x20000258
 800071c:	20000259 	.word	0x20000259
 8000720:	2000025a 	.word	0x2000025a
 8000724:	2000025b 	.word	0x2000025b
 8000728:	2000025c 	.word	0x2000025c
 800072c:	2000025d 	.word	0x2000025d
 8000730:	2000025e 	.word	0x2000025e

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b090      	sub	sp, #64	@ 0x40
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 0318 	add.w	r3, r7, #24
 800073e:	2228      	movs	r2, #40	@ 0x28
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f005 ff16 	bl	8006574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000756:	2302      	movs	r3, #2
 8000758:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800075a:	2301      	movs	r3, #1
 800075c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800075e:	2310      	movs	r3, #16
 8000760:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000762:	2302      	movs	r3, #2
 8000764:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000766:	2300      	movs	r3, #0
 8000768:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 800076a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800076e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000770:	f107 0318 	add.w	r3, r7, #24
 8000774:	4618      	mov	r0, r3
 8000776:	f003 fafb 	bl	8003d70 <HAL_RCC_OscConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000780:	f001 fb1e 	bl	8001dc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000784:	230f      	movs	r3, #15
 8000786:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000788:	2302      	movs	r3, #2
 800078a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000790:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000794:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2101      	movs	r1, #1
 800079e:	4618      	mov	r0, r3
 80007a0:	f003 fd68 	bl	8004274 <HAL_RCC_ClockConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80007aa:	f001 fb09 	bl	8001dc0 <Error_Handler>
  }
}
 80007ae:	bf00      	nop
 80007b0:	3740      	adds	r7, #64	@ 0x40
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007bc:	4b12      	ldr	r3, [pc, #72]	@ (8000808 <MX_I2C1_Init+0x50>)
 80007be:	4a13      	ldr	r2, [pc, #76]	@ (800080c <MX_I2C1_Init+0x54>)
 80007c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007c2:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <MX_I2C1_Init+0x50>)
 80007c4:	4a12      	ldr	r2, [pc, #72]	@ (8000810 <MX_I2C1_Init+0x58>)
 80007c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000808 <MX_I2C1_Init+0x50>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000808 <MX_I2C1_Init+0x50>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <MX_I2C1_Init+0x50>)
 80007d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000808 <MX_I2C1_Init+0x50>)
 80007de:	2200      	movs	r2, #0
 80007e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007e2:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <MX_I2C1_Init+0x50>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e8:	4b07      	ldr	r3, [pc, #28]	@ (8000808 <MX_I2C1_Init+0x50>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ee:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <MX_I2C1_Init+0x50>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007f4:	4804      	ldr	r0, [pc, #16]	@ (8000808 <MX_I2C1_Init+0x50>)
 80007f6:	f002 f8d5 	bl	80029a4 <HAL_I2C_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000800:	f001 fade 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200000a0 	.word	0x200000a0
 800080c:	40005400 	.word	0x40005400
 8000810:	000186a0 	.word	0x000186a0

08000814 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000818:	4b12      	ldr	r3, [pc, #72]	@ (8000864 <MX_I2C2_Init+0x50>)
 800081a:	4a13      	ldr	r2, [pc, #76]	@ (8000868 <MX_I2C2_Init+0x54>)
 800081c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800081e:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <MX_I2C2_Init+0x50>)
 8000820:	4a12      	ldr	r2, [pc, #72]	@ (800086c <MX_I2C2_Init+0x58>)
 8000822:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000824:	4b0f      	ldr	r3, [pc, #60]	@ (8000864 <MX_I2C2_Init+0x50>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800082a:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <MX_I2C2_Init+0x50>)
 800082c:	2200      	movs	r2, #0
 800082e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000830:	4b0c      	ldr	r3, [pc, #48]	@ (8000864 <MX_I2C2_Init+0x50>)
 8000832:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000836:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000838:	4b0a      	ldr	r3, [pc, #40]	@ (8000864 <MX_I2C2_Init+0x50>)
 800083a:	2200      	movs	r2, #0
 800083c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800083e:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <MX_I2C2_Init+0x50>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000844:	4b07      	ldr	r3, [pc, #28]	@ (8000864 <MX_I2C2_Init+0x50>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800084a:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <MX_I2C2_Init+0x50>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000850:	4804      	ldr	r0, [pc, #16]	@ (8000864 <MX_I2C2_Init+0x50>)
 8000852:	f002 f8a7 	bl	80029a4 <HAL_I2C_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800085c:	f001 fab0 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	200000f4 	.word	0x200000f4
 8000868:	40005800 	.word	0x40005800
 800086c:	000186a0 	.word	0x000186a0

08000870 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08e      	sub	sp, #56	@ 0x38
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000876:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000884:	f107 0320 	add.w	r3, r7, #32
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
 800089c:	615a      	str	r2, [r3, #20]
 800089e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008a0:	4b2d      	ldr	r3, [pc, #180]	@ (8000958 <MX_TIM2_Init+0xe8>)
 80008a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008a8:	4b2b      	ldr	r3, [pc, #172]	@ (8000958 <MX_TIM2_Init+0xe8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ae:	4b2a      	ldr	r3, [pc, #168]	@ (8000958 <MX_TIM2_Init+0xe8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80008b4:	4b28      	ldr	r3, [pc, #160]	@ (8000958 <MX_TIM2_Init+0xe8>)
 80008b6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008bc:	4b26      	ldr	r3, [pc, #152]	@ (8000958 <MX_TIM2_Init+0xe8>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c2:	4b25      	ldr	r3, [pc, #148]	@ (8000958 <MX_TIM2_Init+0xe8>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008c8:	4823      	ldr	r0, [pc, #140]	@ (8000958 <MX_TIM2_Init+0xe8>)
 80008ca:	f003 fe61 	bl	8004590 <HAL_TIM_Base_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80008d4:	f001 fa74 	bl	8001dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008e2:	4619      	mov	r1, r3
 80008e4:	481c      	ldr	r0, [pc, #112]	@ (8000958 <MX_TIM2_Init+0xe8>)
 80008e6:	f004 f85f 	bl	80049a8 <HAL_TIM_ConfigClockSource>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80008f0:	f001 fa66 	bl	8001dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008f4:	4818      	ldr	r0, [pc, #96]	@ (8000958 <MX_TIM2_Init+0xe8>)
 80008f6:	f003 fe9a 	bl	800462e <HAL_TIM_PWM_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000900:	f001 fa5e 	bl	8001dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800090c:	f107 0320 	add.w	r3, r7, #32
 8000910:	4619      	mov	r1, r3
 8000912:	4811      	ldr	r0, [pc, #68]	@ (8000958 <MX_TIM2_Init+0xe8>)
 8000914:	f004 fbc0 	bl	8005098 <HAL_TIMEx_MasterConfigSynchronization>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800091e:	f001 fa4f 	bl	8001dc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000922:	2360      	movs	r3, #96	@ 0x60
 8000924:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 700;
 8000926:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 800092a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	2204      	movs	r2, #4
 8000938:	4619      	mov	r1, r3
 800093a:	4807      	ldr	r0, [pc, #28]	@ (8000958 <MX_TIM2_Init+0xe8>)
 800093c:	f003 ff72 	bl	8004824 <HAL_TIM_PWM_ConfigChannel>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000946:	f001 fa3b 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800094a:	4803      	ldr	r0, [pc, #12]	@ (8000958 <MX_TIM2_Init+0xe8>)
 800094c:	f001 faf8 	bl	8001f40 <HAL_TIM_MspPostInit>

}
 8000950:	bf00      	nop
 8000952:	3738      	adds	r7, #56	@ 0x38
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000148 	.word	0x20000148

0800095c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000960:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <MX_USART1_UART_Init+0x4c>)
 8000962:	4a12      	ldr	r2, [pc, #72]	@ (80009ac <MX_USART1_UART_Init+0x50>)
 8000964:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000966:	4b10      	ldr	r3, [pc, #64]	@ (80009a8 <MX_USART1_UART_Init+0x4c>)
 8000968:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800096c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800096e:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <MX_USART1_UART_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000974:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <MX_USART1_UART_Init+0x4c>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	@ (80009a8 <MX_USART1_UART_Init+0x4c>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000980:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <MX_USART1_UART_Init+0x4c>)
 8000982:	220c      	movs	r2, #12
 8000984:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000986:	4b08      	ldr	r3, [pc, #32]	@ (80009a8 <MX_USART1_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800098c:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <MX_USART1_UART_Init+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	@ (80009a8 <MX_USART1_UART_Init+0x4c>)
 8000994:	f004 fbde 	bl	8005154 <HAL_UART_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800099e:	f001 fa0f 	bl	8001dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000190 	.word	0x20000190
 80009ac:	40013800 	.word	0x40013800

080009b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b6:	f107 0310 	add.w	r3, r7, #16
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c4:	4b24      	ldr	r3, [pc, #144]	@ (8000a58 <MX_GPIO_Init+0xa8>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	4a23      	ldr	r2, [pc, #140]	@ (8000a58 <MX_GPIO_Init+0xa8>)
 80009ca:	f043 0320 	orr.w	r3, r3, #32
 80009ce:	6193      	str	r3, [r2, #24]
 80009d0:	4b21      	ldr	r3, [pc, #132]	@ (8000a58 <MX_GPIO_Init+0xa8>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	f003 0320 	and.w	r3, r3, #32
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000a58 <MX_GPIO_Init+0xa8>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a58 <MX_GPIO_Init+0xa8>)
 80009e2:	f043 0304 	orr.w	r3, r3, #4
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a58 <MX_GPIO_Init+0xa8>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f003 0304 	and.w	r3, r3, #4
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f4:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <MX_GPIO_Init+0xa8>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	4a17      	ldr	r2, [pc, #92]	@ (8000a58 <MX_GPIO_Init+0xa8>)
 80009fa:	f043 0308 	orr.w	r3, r3, #8
 80009fe:	6193      	str	r3, [r2, #24]
 8000a00:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <MX_GPIO_Init+0xa8>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f003 0308 	and.w	r3, r3, #8
 8000a08:	607b      	str	r3, [r7, #4]
 8000a0a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000a0c:	230e      	movs	r3, #14
 8000a0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	f107 0310 	add.w	r3, r7, #16
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480f      	ldr	r0, [pc, #60]	@ (8000a5c <MX_GPIO_Init+0xac>)
 8000a20:	f001 fe0c 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a60 <MX_GPIO_Init+0xb0>)
 8000a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a32:	f107 0310 	add.w	r3, r7, #16
 8000a36:	4619      	mov	r1, r3
 8000a38:	480a      	ldr	r0, [pc, #40]	@ (8000a64 <MX_GPIO_Init+0xb4>)
 8000a3a:	f001 fdff 	bl	800263c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2101      	movs	r1, #1
 8000a42:	2028      	movs	r0, #40	@ 0x28
 8000a44:	f001 fd11 	bl	800246a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a48:	2028      	movs	r0, #40	@ 0x28
 8000a4a:	f001 fd2a 	bl	80024a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a4e:	bf00      	nop
 8000a50:	3720      	adds	r7, #32
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	40010800 	.word	0x40010800
 8000a60:	10210000 	.word	0x10210000
 8000a64:	40010c00 	.word	0x40010c00

08000a68 <playAlarmMelody1>:
/* USER CODE BEGIN 4 */

/**
  * @brief Alarm tone storage
  */
void playAlarmMelody1(void) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < sizeof(alarmMelody1) / sizeof(alarmMelody1[0]); i++)
 8000a6e:	2300      	movs	r3, #0
 8000a70:	71fb      	strb	r3, [r7, #7]
 8000a72:	e00d      	b.n	8000a90 <playAlarmMelody1+0x28>
  {
    playTone(alarmMelody1[i], &htim2);
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	4a0b      	ldr	r2, [pc, #44]	@ (8000aa4 <playAlarmMelody1+0x3c>)
 8000a78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a7c:	490a      	ldr	r1, [pc, #40]	@ (8000aa8 <playAlarmMelody1+0x40>)
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f005 fd41 	bl	8006506 <playTone>
    HAL_Delay(100);
 8000a84:	2064      	movs	r0, #100	@ 0x64
 8000a86:	f001 fbf5 	bl	8002274 <HAL_Delay>
  for (uint8_t i = 0; i < sizeof(alarmMelody1) / sizeof(alarmMelody1[0]); i++)
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	71fb      	strb	r3, [r7, #7]
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	2b0e      	cmp	r3, #14
 8000a94:	d9ee      	bls.n	8000a74 <playAlarmMelody1+0xc>
  }
  noTone(&htim2);
 8000a96:	4804      	ldr	r0, [pc, #16]	@ (8000aa8 <playAlarmMelody1+0x40>)
 8000a98:	f005 fd28 	bl	80064ec <noTone>
}
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	08006f60 	.word	0x08006f60
 8000aa8:	20000148 	.word	0x20000148

08000aac <playAlarmMelody2>:
void playAlarmMelody2(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < sizeof(alarmMelody2) / sizeof(alarmMelody2[0]); i++)
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	71fb      	strb	r3, [r7, #7]
 8000ab6:	e00d      	b.n	8000ad4 <playAlarmMelody2+0x28>
	{
		playTone(alarmMelody2[i], &htim2);
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	4a0b      	ldr	r2, [pc, #44]	@ (8000ae8 <playAlarmMelody2+0x3c>)
 8000abc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ac0:	490a      	ldr	r1, [pc, #40]	@ (8000aec <playAlarmMelody2+0x40>)
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f005 fd1f 	bl	8006506 <playTone>
		HAL_Delay(150);
 8000ac8:	2096      	movs	r0, #150	@ 0x96
 8000aca:	f001 fbd3 	bl	8002274 <HAL_Delay>
	for(uint8_t i = 0; i < sizeof(alarmMelody2) / sizeof(alarmMelody2[0]); i++)
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	71fb      	strb	r3, [r7, #7]
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	2b0b      	cmp	r3, #11
 8000ad8:	d9ee      	bls.n	8000ab8 <playAlarmMelody2+0xc>
	}
	noTone(&htim2);
 8000ada:	4804      	ldr	r0, [pc, #16]	@ (8000aec <playAlarmMelody2+0x40>)
 8000adc:	f005 fd06 	bl	80064ec <noTone>
}
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	08006f80 	.word	0x08006f80
 8000aec:	20000148 	.word	0x20000148

08000af0 <alarmSound>:
void alarmSound(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	  playAlarmMelody1();
 8000af4:	f7ff ffb8 	bl	8000a68 <playAlarmMelody1>
	  HAL_Delay(100);
 8000af8:	2064      	movs	r0, #100	@ 0x64
 8000afa:	f001 fbbb 	bl	8002274 <HAL_Delay>
	  playAlarmMelody1();
 8000afe:	f7ff ffb3 	bl	8000a68 <playAlarmMelody1>
	  HAL_Delay(100);
 8000b02:	2064      	movs	r0, #100	@ 0x64
 8000b04:	f001 fbb6 	bl	8002274 <HAL_Delay>
	  playAlarmMelody2();
 8000b08:	f7ff ffd0 	bl	8000aac <playAlarmMelody2>
}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <LeapYearHandling>:
  * @param month: The month (1-12).
  * @param year: The year (e.g., 2023).
  * @retval The number of days in the specified month.
  */
uint8_t LeapYearHandling(uint8_t year)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
	return ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0));
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	f003 0303 	and.w	r3, r3, #3
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d10b      	bne.n	8000b3e <LeapYearHandling+0x2e>
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	4a10      	ldr	r2, [pc, #64]	@ (8000b6c <LeapYearHandling+0x5c>)
 8000b2a:	fba2 1203 	umull	r1, r2, r2, r3
 8000b2e:	0952      	lsrs	r2, r2, #5
 8000b30:	2164      	movs	r1, #100	@ 0x64
 8000b32:	fb01 f202 	mul.w	r2, r1, r2
 8000b36:	1a9b      	subs	r3, r3, r2
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d10d      	bne.n	8000b5a <LeapYearHandling+0x4a>
 8000b3e:	79fa      	ldrb	r2, [r7, #7]
 8000b40:	4b0a      	ldr	r3, [pc, #40]	@ (8000b6c <LeapYearHandling+0x5c>)
 8000b42:	fb83 1302 	smull	r1, r3, r3, r2
 8000b46:	11d9      	asrs	r1, r3, #7
 8000b48:	17d3      	asrs	r3, r2, #31
 8000b4a:	1acb      	subs	r3, r1, r3
 8000b4c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000b50:	fb01 f303 	mul.w	r3, r1, r3
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d101      	bne.n	8000b5e <LeapYearHandling+0x4e>
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e000      	b.n	8000b60 <LeapYearHandling+0x50>
 8000b5e:	2300      	movs	r3, #0
 8000b60:	b2db      	uxtb	r3, r3
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	51eb851f 	.word	0x51eb851f

08000b70 <daysInMonth>:
uint8_t daysInMonth(uint8_t month, uint16_t year)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	460a      	mov	r2, r1
 8000b7a:	71fb      	strb	r3, [r7, #7]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	80bb      	strh	r3, [r7, #4]
    switch (month)
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	2b0c      	cmp	r3, #12
 8000b84:	bf8c      	ite	hi
 8000b86:	2201      	movhi	r2, #1
 8000b88:	2200      	movls	r2, #0
 8000b8a:	b2d2      	uxtb	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	d12f      	bne.n	8000bf0 <daysInMonth+0x80>
 8000b90:	2201      	movs	r2, #1
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	f241 52aa 	movw	r2, #5546	@ 0x15aa
 8000b9a:	401a      	ands	r2, r3
 8000b9c:	2a00      	cmp	r2, #0
 8000b9e:	bf14      	ite	ne
 8000ba0:	2201      	movne	r2, #1
 8000ba2:	2200      	moveq	r2, #0
 8000ba4:	b2d2      	uxtb	r2, r2
 8000ba6:	2a00      	cmp	r2, #0
 8000ba8:	d112      	bne.n	8000bd0 <daysInMonth+0x60>
 8000baa:	f403 6225 	and.w	r2, r3, #2640	@ 0xa50
 8000bae:	2a00      	cmp	r2, #0
 8000bb0:	bf14      	ite	ne
 8000bb2:	2201      	movne	r2, #1
 8000bb4:	2200      	moveq	r2, #0
 8000bb6:	b2d2      	uxtb	r2, r2
 8000bb8:	2a00      	cmp	r2, #0
 8000bba:	d10b      	bne.n	8000bd4 <daysInMonth+0x64>
 8000bbc:	f003 0304 	and.w	r3, r3, #4
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	bf14      	ite	ne
 8000bc4:	2301      	movne	r3, #1
 8000bc6:	2300      	moveq	r3, #0
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d104      	bne.n	8000bd8 <daysInMonth+0x68>
 8000bce:	e00f      	b.n	8000bf0 <daysInMonth+0x80>
    {
        case 1: case 3: case 5: case 7: case 8: case 10: case 12:
            return 31;
 8000bd0:	231f      	movs	r3, #31
 8000bd2:	e00e      	b.n	8000bf2 <daysInMonth+0x82>
        case 4: case 6: case 9: case 11:
            return 30;
 8000bd4:	231e      	movs	r3, #30
 8000bd6:	e00c      	b.n	8000bf2 <daysInMonth+0x82>
        case 2:
            return LeapYearHandling(year) ? 29 : 28;
 8000bd8:	88bb      	ldrh	r3, [r7, #4]
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff97 	bl	8000b10 <LeapYearHandling>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <daysInMonth+0x7c>
 8000be8:	231d      	movs	r3, #29
 8000bea:	e002      	b.n	8000bf2 <daysInMonth+0x82>
 8000bec:	231c      	movs	r3, #28
 8000bee:	e000      	b.n	8000bf2 <daysInMonth+0x82>
        default:
            return 0;
 8000bf0:	2300      	movs	r3, #0
    }
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <ModeAlarmHandling>:
  * @param checkAlarmStatus: Alarm control status.
  * 		- ON_ALARM: Turn on Alarm2.
  * 		- OFF_ALARM: Turn off Alarm2.
  */
void ModeAlarmHandling(uint8_t checkAlarmStatus)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
	if (checkAlarmStatus == ON_ALARM)
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d104      	bne.n	8000c16 <ModeAlarmHandling+0x1a>
	{
		DS3231_EnOrDisAlarm2(&hi2c1, EnableAlarm2);
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	4806      	ldr	r0, [pc, #24]	@ (8000c28 <ModeAlarmHandling+0x2c>)
 8000c10:	f005 fad0 	bl	80061b4 <DS3231_EnOrDisAlarm2>
	}
	else
	{
		DS3231_EnOrDisAlarm2(&hi2c1, DisableAlarm2);
	}
}
 8000c14:	e003      	b.n	8000c1e <ModeAlarmHandling+0x22>
		DS3231_EnOrDisAlarm2(&hi2c1, DisableAlarm2);
 8000c16:	2100      	movs	r1, #0
 8000c18:	4803      	ldr	r0, [pc, #12]	@ (8000c28 <ModeAlarmHandling+0x2c>)
 8000c1a:	f005 facb 	bl	80061b4 <DS3231_EnOrDisAlarm2>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200000a0 	.word	0x200000a0

08000c2c <DisplayClockHandler>:
/**
  * @brief Display Hour - Minute - Second & Day - Date - Month - Year in the clock state machine.
  * 		- Get data form DS3231
  */
void DisplayClockHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af02      	add	r7, sp, #8
	DS3231_GetTime(&DS3231_Time);
 8000c32:	481d      	ldr	r0, [pc, #116]	@ (8000ca8 <DisplayClockHandler+0x7c>)
 8000c34:	f005 f968 	bl	8005f08 <DS3231_GetTime>
	sprintf(timeDisplay, "%02d:%02d:%02d", DS3231_Time.Hour, DS3231_Time.Minutes, DS3231_Time.Seconds);
 8000c38:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca8 <DisplayClockHandler+0x7c>)
 8000c3a:	799b      	ldrb	r3, [r3, #6]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca8 <DisplayClockHandler+0x7c>)
 8000c40:	795b      	ldrb	r3, [r3, #5]
 8000c42:	4619      	mov	r1, r3
 8000c44:	4b18      	ldr	r3, [pc, #96]	@ (8000ca8 <DisplayClockHandler+0x7c>)
 8000c46:	791b      	ldrb	r3, [r3, #4]
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	460b      	mov	r3, r1
 8000c4c:	4917      	ldr	r1, [pc, #92]	@ (8000cac <DisplayClockHandler+0x80>)
 8000c4e:	4818      	ldr	r0, [pc, #96]	@ (8000cb0 <DisplayClockHandler+0x84>)
 8000c50:	f005 fc6e 	bl	8006530 <siprintf>
	LCD_goto_XY(1, 4);
 8000c54:	2104      	movs	r1, #4
 8000c56:	2001      	movs	r0, #1
 8000c58:	f005 fbfc 	bl	8006454 <LCD_goto_XY>
	LCD_send_string(timeDisplay);
 8000c5c:	4814      	ldr	r0, [pc, #80]	@ (8000cb0 <DisplayClockHandler+0x84>)
 8000c5e:	f005 fbdd 	bl	800641c <LCD_send_string>

	DS3231_GetDate(&DS3231_Date);
 8000c62:	4814      	ldr	r0, [pc, #80]	@ (8000cb4 <DisplayClockHandler+0x88>)
 8000c64:	f005 f9b5 	bl	8005fd2 <DS3231_GetDate>
	sprintf(dateDisplay, "%s %02d/%02d/20%02d", dayOfWeek[DS3231_Date.Day], DS3231_Date.Date, DS3231_Date.Month, DS3231_Date.Year);
 8000c68:	4b12      	ldr	r3, [pc, #72]	@ (8000cb4 <DisplayClockHandler+0x88>)
 8000c6a:	79db      	ldrb	r3, [r3, #7]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <DisplayClockHandler+0x8c>)
 8000c70:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c74:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb4 <DisplayClockHandler+0x88>)
 8000c76:	7a1b      	ldrb	r3, [r3, #8]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb4 <DisplayClockHandler+0x88>)
 8000c7c:	7a5b      	ldrb	r3, [r3, #9]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <DisplayClockHandler+0x88>)
 8000c82:	7a9b      	ldrb	r3, [r3, #10]
 8000c84:	9301      	str	r3, [sp, #4]
 8000c86:	9100      	str	r1, [sp, #0]
 8000c88:	4603      	mov	r3, r0
 8000c8a:	490c      	ldr	r1, [pc, #48]	@ (8000cbc <DisplayClockHandler+0x90>)
 8000c8c:	480c      	ldr	r0, [pc, #48]	@ (8000cc0 <DisplayClockHandler+0x94>)
 8000c8e:	f005 fc4f 	bl	8006530 <siprintf>
	LCD_goto_XY(2, 1);
 8000c92:	2101      	movs	r1, #1
 8000c94:	2002      	movs	r0, #2
 8000c96:	f005 fbdd 	bl	8006454 <LCD_goto_XY>
	LCD_send_string(dateDisplay);
 8000c9a:	4809      	ldr	r0, [pc, #36]	@ (8000cc0 <DisplayClockHandler+0x94>)
 8000c9c:	f005 fbbe 	bl	800641c <LCD_send_string>
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200001d8 	.word	0x200001d8
 8000cac:	08006ef0 	.word	0x08006ef0
 8000cb0:	2000021c 	.word	0x2000021c
 8000cb4:	200001f4 	.word	0x200001f4
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	08006f00 	.word	0x08006f00
 8000cc0:	20000230 	.word	0x20000230

08000cc4 <SetHourHandler>:
  * 		- Press BUTTON_INCREASE the Hour value will increase by 1
  * 		- Press BUTTON_REDUCE the Hour value will reduce by 1
  * 		- The Hour value 0 -> 23
  */
void SetHourHandler(void)
{
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af02      	add	r7, sp, #8
    sprintf(timeDisplay, "%02d:%02d:%02d", hourBuffer, minuteBuffer, secondBuffer);
 8000cca:	4b40      	ldr	r3, [pc, #256]	@ (8000dcc <SetHourHandler+0x108>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	4b3f      	ldr	r3, [pc, #252]	@ (8000dd0 <SetHourHandler+0x10c>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4b3f      	ldr	r3, [pc, #252]	@ (8000dd4 <SetHourHandler+0x110>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	493e      	ldr	r1, [pc, #248]	@ (8000dd8 <SetHourHandler+0x114>)
 8000ce0:	483e      	ldr	r0, [pc, #248]	@ (8000ddc <SetHourHandler+0x118>)
 8000ce2:	f005 fc25 	bl	8006530 <siprintf>
    LCD_goto_XY(1, 4);
 8000ce6:	2104      	movs	r1, #4
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f005 fbb3 	bl	8006454 <LCD_goto_XY>
    LCD_send_string(timeDisplay);
 8000cee:	483b      	ldr	r0, [pc, #236]	@ (8000ddc <SetHourHandler+0x118>)
 8000cf0:	f005 fb94 	bl	800641c <LCD_send_string>

	LCD_goto_XY(2, 1);
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	2002      	movs	r0, #2
 8000cf8:	f005 fbac 	bl	8006454 <LCD_goto_XY>
	sprintf(dateDisplay, "20%02d/%02d/%02d %s", yearBuffer, monthBuffer, dateBuffer, dayOfWeek[dayBuffer]);
 8000cfc:	4b38      	ldr	r3, [pc, #224]	@ (8000de0 <SetHourHandler+0x11c>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	4b38      	ldr	r3, [pc, #224]	@ (8000de4 <SetHourHandler+0x120>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	461c      	mov	r4, r3
 8000d08:	4b37      	ldr	r3, [pc, #220]	@ (8000de8 <SetHourHandler+0x124>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b37      	ldr	r3, [pc, #220]	@ (8000dec <SetHourHandler+0x128>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	4619      	mov	r1, r3
 8000d14:	4b36      	ldr	r3, [pc, #216]	@ (8000df0 <SetHourHandler+0x12c>)
 8000d16:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000d1a:	9301      	str	r3, [sp, #4]
 8000d1c:	9200      	str	r2, [sp, #0]
 8000d1e:	4623      	mov	r3, r4
 8000d20:	4602      	mov	r2, r0
 8000d22:	4934      	ldr	r1, [pc, #208]	@ (8000df4 <SetHourHandler+0x130>)
 8000d24:	4834      	ldr	r0, [pc, #208]	@ (8000df8 <SetHourHandler+0x134>)
 8000d26:	f005 fc03 	bl	8006530 <siprintf>
	LCD_send_string(dateDisplay);
 8000d2a:	4833      	ldr	r0, [pc, #204]	@ (8000df8 <SetHourHandler+0x134>)
 8000d2c:	f005 fb76 	bl	800641c <LCD_send_string>

    LCD_goto_XY(1, 5);
 8000d30:	2105      	movs	r1, #5
 8000d32:	2001      	movs	r0, #1
 8000d34:	f005 fb8e 	bl	8006454 <LCD_goto_XY>
    LCD_blink_cursor_on();
 8000d38:	f005 fbae 	bl	8006498 <LCD_blink_cursor_on>

    if (HAL_GPIO_ReadPin(GPIOA, BUTTON_INCREASE) == PRESS_BUTTON)
 8000d3c:	2102      	movs	r1, #2
 8000d3e:	482f      	ldr	r0, [pc, #188]	@ (8000dfc <SetHourHandler+0x138>)
 8000d40:	f001 fe00 	bl	8002944 <HAL_GPIO_ReadPin>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d119      	bne.n	8000d7e <SetHourHandler+0xba>
    {
        HAL_Delay(40);
 8000d4a:	2028      	movs	r0, #40	@ 0x28
 8000d4c:	f001 fa92 	bl	8002274 <HAL_Delay>
        while(HAL_GPIO_ReadPin(GPIOA, BUTTON_INCREASE) == PRESS_BUTTON);
 8000d50:	bf00      	nop
 8000d52:	2102      	movs	r1, #2
 8000d54:	4829      	ldr	r0, [pc, #164]	@ (8000dfc <SetHourHandler+0x138>)
 8000d56:	f001 fdf5 	bl	8002944 <HAL_GPIO_ReadPin>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d0f8      	beq.n	8000d52 <SetHourHandler+0x8e>

        hourBuffer++;
 8000d60:	4b1a      	ldr	r3, [pc, #104]	@ (8000dcc <SetHourHandler+0x108>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	3301      	adds	r3, #1
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	4b18      	ldr	r3, [pc, #96]	@ (8000dcc <SetHourHandler+0x108>)
 8000d6a:	701a      	strb	r2, [r3, #0]
        if (hourBuffer > MAX_HOUR)
 8000d6c:	4b17      	ldr	r3, [pc, #92]	@ (8000dcc <SetHourHandler+0x108>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b17      	cmp	r3, #23
 8000d72:	d902      	bls.n	8000d7a <SetHourHandler+0xb6>
        {
            hourBuffer = MIN_HOUR;
 8000d74:	4b15      	ldr	r3, [pc, #84]	@ (8000dcc <SetHourHandler+0x108>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]
        }
        LCD_blink_cursor_off();
 8000d7a:	f005 fb94 	bl	80064a6 <LCD_blink_cursor_off>
    }

    if (HAL_GPIO_ReadPin(GPIOA, BUTTON_REDUCE) == PRESS_BUTTON)
 8000d7e:	2104      	movs	r1, #4
 8000d80:	481e      	ldr	r0, [pc, #120]	@ (8000dfc <SetHourHandler+0x138>)
 8000d82:	f001 fddf 	bl	8002944 <HAL_GPIO_ReadPin>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d11a      	bne.n	8000dc2 <SetHourHandler+0xfe>
    {
        HAL_Delay(40);
 8000d8c:	2028      	movs	r0, #40	@ 0x28
 8000d8e:	f001 fa71 	bl	8002274 <HAL_Delay>
        while(HAL_GPIO_ReadPin(GPIOA, BUTTON_REDUCE) == PRESS_BUTTON);
 8000d92:	bf00      	nop
 8000d94:	2104      	movs	r1, #4
 8000d96:	4819      	ldr	r0, [pc, #100]	@ (8000dfc <SetHourHandler+0x138>)
 8000d98:	f001 fdd4 	bl	8002944 <HAL_GPIO_ReadPin>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d0f8      	beq.n	8000d94 <SetHourHandler+0xd0>

        if (hourBuffer == MIN_HOUR)
 8000da2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dcc <SetHourHandler+0x108>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d103      	bne.n	8000db2 <SetHourHandler+0xee>
        {
        	hourBuffer = MAX_HOUR;
 8000daa:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <SetHourHandler+0x108>)
 8000dac:	2217      	movs	r2, #23
 8000dae:	701a      	strb	r2, [r3, #0]
 8000db0:	e005      	b.n	8000dbe <SetHourHandler+0xfa>
        }
        else
        {
        	hourBuffer--;
 8000db2:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <SetHourHandler+0x108>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4b04      	ldr	r3, [pc, #16]	@ (8000dcc <SetHourHandler+0x108>)
 8000dbc:	701a      	strb	r2, [r3, #0]
        }

        LCD_blink_cursor_off();
 8000dbe:	f005 fb72 	bl	80064a6 <LCD_blink_cursor_off>
    }
}
 8000dc2:	bf00      	nop
 8000dc4:	3704      	adds	r7, #4
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd90      	pop	{r4, r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000255 	.word	0x20000255
 8000dd0:	20000256 	.word	0x20000256
 8000dd4:	20000257 	.word	0x20000257
 8000dd8:	08006ef0 	.word	0x08006ef0
 8000ddc:	2000021c 	.word	0x2000021c
 8000de0:	2000025b 	.word	0x2000025b
 8000de4:	2000025a 	.word	0x2000025a
 8000de8:	20000259 	.word	0x20000259
 8000dec:	20000258 	.word	0x20000258
 8000df0:	20000000 	.word	0x20000000
 8000df4:	08006f14 	.word	0x08006f14
 8000df8:	20000230 	.word	0x20000230
 8000dfc:	40010800 	.word	0x40010800

08000e00 <SetMinuteHandler>:
  * 		- Press BUTTON_INCREASE the Minute value will increase by 1
  * 		- Press BUTTON_REDUCE the Minute value will reduce by 1
  * 		- The Minute value 0 -> 59
  */
void SetMinuteHandler(void)
{
 8000e00:	b590      	push	{r4, r7, lr}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af02      	add	r7, sp, #8
    sprintf(timeDisplay, "%02d:%02d:%02d", hourBuffer, minuteBuffer, secondBuffer);
 8000e06:	4b40      	ldr	r3, [pc, #256]	@ (8000f08 <SetMinuteHandler+0x108>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	4b3f      	ldr	r3, [pc, #252]	@ (8000f0c <SetMinuteHandler+0x10c>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	4619      	mov	r1, r3
 8000e12:	4b3f      	ldr	r3, [pc, #252]	@ (8000f10 <SetMinuteHandler+0x110>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	460b      	mov	r3, r1
 8000e1a:	493e      	ldr	r1, [pc, #248]	@ (8000f14 <SetMinuteHandler+0x114>)
 8000e1c:	483e      	ldr	r0, [pc, #248]	@ (8000f18 <SetMinuteHandler+0x118>)
 8000e1e:	f005 fb87 	bl	8006530 <siprintf>
    LCD_goto_XY(1, 4);
 8000e22:	2104      	movs	r1, #4
 8000e24:	2001      	movs	r0, #1
 8000e26:	f005 fb15 	bl	8006454 <LCD_goto_XY>
    LCD_send_string(timeDisplay);
 8000e2a:	483b      	ldr	r0, [pc, #236]	@ (8000f18 <SetMinuteHandler+0x118>)
 8000e2c:	f005 faf6 	bl	800641c <LCD_send_string>

	LCD_goto_XY(2, 1);
 8000e30:	2101      	movs	r1, #1
 8000e32:	2002      	movs	r0, #2
 8000e34:	f005 fb0e 	bl	8006454 <LCD_goto_XY>
	sprintf(dateDisplay, "20%02d/%02d/%02d %s", yearBuffer, monthBuffer, dateBuffer, dayOfWeek[dayBuffer]);
 8000e38:	4b38      	ldr	r3, [pc, #224]	@ (8000f1c <SetMinuteHandler+0x11c>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	4b38      	ldr	r3, [pc, #224]	@ (8000f20 <SetMinuteHandler+0x120>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	461c      	mov	r4, r3
 8000e44:	4b37      	ldr	r3, [pc, #220]	@ (8000f24 <SetMinuteHandler+0x124>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b37      	ldr	r3, [pc, #220]	@ (8000f28 <SetMinuteHandler+0x128>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4b36      	ldr	r3, [pc, #216]	@ (8000f2c <SetMinuteHandler+0x12c>)
 8000e52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000e56:	9301      	str	r3, [sp, #4]
 8000e58:	9200      	str	r2, [sp, #0]
 8000e5a:	4623      	mov	r3, r4
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	4934      	ldr	r1, [pc, #208]	@ (8000f30 <SetMinuteHandler+0x130>)
 8000e60:	4834      	ldr	r0, [pc, #208]	@ (8000f34 <SetMinuteHandler+0x134>)
 8000e62:	f005 fb65 	bl	8006530 <siprintf>
	LCD_send_string(dateDisplay);
 8000e66:	4833      	ldr	r0, [pc, #204]	@ (8000f34 <SetMinuteHandler+0x134>)
 8000e68:	f005 fad8 	bl	800641c <LCD_send_string>

    LCD_goto_XY(1, 8);
 8000e6c:	2108      	movs	r1, #8
 8000e6e:	2001      	movs	r0, #1
 8000e70:	f005 faf0 	bl	8006454 <LCD_goto_XY>
    LCD_blink_cursor_on();
 8000e74:	f005 fb10 	bl	8006498 <LCD_blink_cursor_on>

    if (HAL_GPIO_ReadPin(GPIOA, BUTTON_INCREASE) == PRESS_BUTTON)
 8000e78:	2102      	movs	r1, #2
 8000e7a:	482f      	ldr	r0, [pc, #188]	@ (8000f38 <SetMinuteHandler+0x138>)
 8000e7c:	f001 fd62 	bl	8002944 <HAL_GPIO_ReadPin>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d119      	bne.n	8000eba <SetMinuteHandler+0xba>
    {
        HAL_Delay(40);
 8000e86:	2028      	movs	r0, #40	@ 0x28
 8000e88:	f001 f9f4 	bl	8002274 <HAL_Delay>
        while(HAL_GPIO_ReadPin(GPIOA, BUTTON_INCREASE) == PRESS_BUTTON);
 8000e8c:	bf00      	nop
 8000e8e:	2102      	movs	r1, #2
 8000e90:	4829      	ldr	r0, [pc, #164]	@ (8000f38 <SetMinuteHandler+0x138>)
 8000e92:	f001 fd57 	bl	8002944 <HAL_GPIO_ReadPin>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d0f8      	beq.n	8000e8e <SetMinuteHandler+0x8e>

        minuteBuffer++;
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f0c <SetMinuteHandler+0x10c>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	4b19      	ldr	r3, [pc, #100]	@ (8000f0c <SetMinuteHandler+0x10c>)
 8000ea6:	701a      	strb	r2, [r3, #0]
        if (minuteBuffer > MAX_MINUTE)
 8000ea8:	4b18      	ldr	r3, [pc, #96]	@ (8000f0c <SetMinuteHandler+0x10c>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b3b      	cmp	r3, #59	@ 0x3b
 8000eae:	d902      	bls.n	8000eb6 <SetMinuteHandler+0xb6>
        {
        	minuteBuffer = MIN_MINUTE;
 8000eb0:	4b16      	ldr	r3, [pc, #88]	@ (8000f0c <SetMinuteHandler+0x10c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
        }
        LCD_blink_cursor_off();
 8000eb6:	f005 faf6 	bl	80064a6 <LCD_blink_cursor_off>
    }

    if (HAL_GPIO_ReadPin(GPIOA, BUTTON_REDUCE) == PRESS_BUTTON)
 8000eba:	2104      	movs	r1, #4
 8000ebc:	481e      	ldr	r0, [pc, #120]	@ (8000f38 <SetMinuteHandler+0x138>)
 8000ebe:	f001 fd41 	bl	8002944 <HAL_GPIO_ReadPin>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d11a      	bne.n	8000efe <SetMinuteHandler+0xfe>
    {
        HAL_Delay(40);
 8000ec8:	2028      	movs	r0, #40	@ 0x28
 8000eca:	f001 f9d3 	bl	8002274 <HAL_Delay>
        while(HAL_GPIO_ReadPin(GPIOA, BUTTON_REDUCE) == PRESS_BUTTON);
 8000ece:	bf00      	nop
 8000ed0:	2104      	movs	r1, #4
 8000ed2:	4819      	ldr	r0, [pc, #100]	@ (8000f38 <SetMinuteHandler+0x138>)
 8000ed4:	f001 fd36 	bl	8002944 <HAL_GPIO_ReadPin>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d0f8      	beq.n	8000ed0 <SetMinuteHandler+0xd0>
    	if (minuteBuffer == MIN_MINUTE)
 8000ede:	4b0b      	ldr	r3, [pc, #44]	@ (8000f0c <SetMinuteHandler+0x10c>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d103      	bne.n	8000eee <SetMinuteHandler+0xee>
    	{
    		minuteBuffer = MAX_MINUTE;
 8000ee6:	4b09      	ldr	r3, [pc, #36]	@ (8000f0c <SetMinuteHandler+0x10c>)
 8000ee8:	223b      	movs	r2, #59	@ 0x3b
 8000eea:	701a      	strb	r2, [r3, #0]
 8000eec:	e005      	b.n	8000efa <SetMinuteHandler+0xfa>
    	}
    	else
    	{
    		minuteBuffer--;
 8000eee:	4b07      	ldr	r3, [pc, #28]	@ (8000f0c <SetMinuteHandler+0x10c>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4b05      	ldr	r3, [pc, #20]	@ (8000f0c <SetMinuteHandler+0x10c>)
 8000ef8:	701a      	strb	r2, [r3, #0]
    	}

    	LCD_blink_cursor_off();
 8000efa:	f005 fad4 	bl	80064a6 <LCD_blink_cursor_off>
    }
}
 8000efe:	bf00      	nop
 8000f00:	3704      	adds	r7, #4
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd90      	pop	{r4, r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000255 	.word	0x20000255
 8000f0c:	20000256 	.word	0x20000256
 8000f10:	20000257 	.word	0x20000257
 8000f14:	08006ef0 	.word	0x08006ef0
 8000f18:	2000021c 	.word	0x2000021c
 8000f1c:	2000025b 	.word	0x2000025b
 8000f20:	2000025a 	.word	0x2000025a
 8000f24:	20000259 	.word	0x20000259
 8000f28:	20000258 	.word	0x20000258
 8000f2c:	20000000 	.word	0x20000000
 8000f30:	08006f14 	.word	0x08006f14
 8000f34:	20000230 	.word	0x20000230
 8000f38:	40010800 	.word	0x40010800

08000f3c <SetSecondHandler>:
  * 		- Press BUTTON_INCREASE the Second value will increase by 1
  * 		- Press BUTTON_REDUCE the Second value will reduce by 1
  * 		- The Second value 0 -> 59
  */
void SetSecondHandler(void)
{
 8000f3c:	b590      	push	{r4, r7, lr}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af02      	add	r7, sp, #8
    sprintf(timeDisplay, "%02d:%02d:%02d", hourBuffer, minuteBuffer, secondBuffer);
 8000f42:	4b40      	ldr	r3, [pc, #256]	@ (8001044 <SetSecondHandler+0x108>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	4b3f      	ldr	r3, [pc, #252]	@ (8001048 <SetSecondHandler+0x10c>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4b3f      	ldr	r3, [pc, #252]	@ (800104c <SetSecondHandler+0x110>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	460b      	mov	r3, r1
 8000f56:	493e      	ldr	r1, [pc, #248]	@ (8001050 <SetSecondHandler+0x114>)
 8000f58:	483e      	ldr	r0, [pc, #248]	@ (8001054 <SetSecondHandler+0x118>)
 8000f5a:	f005 fae9 	bl	8006530 <siprintf>
    LCD_goto_XY(1, 4);
 8000f5e:	2104      	movs	r1, #4
 8000f60:	2001      	movs	r0, #1
 8000f62:	f005 fa77 	bl	8006454 <LCD_goto_XY>
    LCD_send_string(timeDisplay);
 8000f66:	483b      	ldr	r0, [pc, #236]	@ (8001054 <SetSecondHandler+0x118>)
 8000f68:	f005 fa58 	bl	800641c <LCD_send_string>

	LCD_goto_XY(2, 1);
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	2002      	movs	r0, #2
 8000f70:	f005 fa70 	bl	8006454 <LCD_goto_XY>
	sprintf(dateDisplay, "20%02d/%02d/%02d %s", yearBuffer, monthBuffer, dateBuffer, dayOfWeek[dayBuffer]);
 8000f74:	4b38      	ldr	r3, [pc, #224]	@ (8001058 <SetSecondHandler+0x11c>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	4b38      	ldr	r3, [pc, #224]	@ (800105c <SetSecondHandler+0x120>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	461c      	mov	r4, r3
 8000f80:	4b37      	ldr	r3, [pc, #220]	@ (8001060 <SetSecondHandler+0x124>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b37      	ldr	r3, [pc, #220]	@ (8001064 <SetSecondHandler+0x128>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4b36      	ldr	r3, [pc, #216]	@ (8001068 <SetSecondHandler+0x12c>)
 8000f8e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000f92:	9301      	str	r3, [sp, #4]
 8000f94:	9200      	str	r2, [sp, #0]
 8000f96:	4623      	mov	r3, r4
 8000f98:	4602      	mov	r2, r0
 8000f9a:	4934      	ldr	r1, [pc, #208]	@ (800106c <SetSecondHandler+0x130>)
 8000f9c:	4834      	ldr	r0, [pc, #208]	@ (8001070 <SetSecondHandler+0x134>)
 8000f9e:	f005 fac7 	bl	8006530 <siprintf>
	LCD_send_string(dateDisplay);
 8000fa2:	4833      	ldr	r0, [pc, #204]	@ (8001070 <SetSecondHandler+0x134>)
 8000fa4:	f005 fa3a 	bl	800641c <LCD_send_string>

    LCD_goto_XY(1, 11);
 8000fa8:	210b      	movs	r1, #11
 8000faa:	2001      	movs	r0, #1
 8000fac:	f005 fa52 	bl	8006454 <LCD_goto_XY>
    LCD_blink_cursor_on();
 8000fb0:	f005 fa72 	bl	8006498 <LCD_blink_cursor_on>

    if (HAL_GPIO_ReadPin(GPIOA, BUTTON_INCREASE) == PRESS_BUTTON)
 8000fb4:	2102      	movs	r1, #2
 8000fb6:	482f      	ldr	r0, [pc, #188]	@ (8001074 <SetSecondHandler+0x138>)
 8000fb8:	f001 fcc4 	bl	8002944 <HAL_GPIO_ReadPin>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d119      	bne.n	8000ff6 <SetSecondHandler+0xba>
    {
        HAL_Delay(40);
 8000fc2:	2028      	movs	r0, #40	@ 0x28
 8000fc4:	f001 f956 	bl	8002274 <HAL_Delay>
        while(HAL_GPIO_ReadPin(GPIOA, BUTTON_INCREASE) == PRESS_BUTTON);
 8000fc8:	bf00      	nop
 8000fca:	2102      	movs	r1, #2
 8000fcc:	4829      	ldr	r0, [pc, #164]	@ (8001074 <SetSecondHandler+0x138>)
 8000fce:	f001 fcb9 	bl	8002944 <HAL_GPIO_ReadPin>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d0f8      	beq.n	8000fca <SetSecondHandler+0x8e>

        secondBuffer++;
 8000fd8:	4b1c      	ldr	r3, [pc, #112]	@ (800104c <SetSecondHandler+0x110>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800104c <SetSecondHandler+0x110>)
 8000fe2:	701a      	strb	r2, [r3, #0]
        if (secondBuffer > MAX_SECOND)
 8000fe4:	4b19      	ldr	r3, [pc, #100]	@ (800104c <SetSecondHandler+0x110>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b3b      	cmp	r3, #59	@ 0x3b
 8000fea:	d902      	bls.n	8000ff2 <SetSecondHandler+0xb6>
        {
        	secondBuffer = MIN_SECOND;
 8000fec:	4b17      	ldr	r3, [pc, #92]	@ (800104c <SetSecondHandler+0x110>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
        }
        LCD_blink_cursor_off();
 8000ff2:	f005 fa58 	bl	80064a6 <LCD_blink_cursor_off>
    }

    if (HAL_GPIO_ReadPin(GPIOA, BUTTON_REDUCE) == PRESS_BUTTON)
 8000ff6:	2104      	movs	r1, #4
 8000ff8:	481e      	ldr	r0, [pc, #120]	@ (8001074 <SetSecondHandler+0x138>)
 8000ffa:	f001 fca3 	bl	8002944 <HAL_GPIO_ReadPin>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d11a      	bne.n	800103a <SetSecondHandler+0xfe>
    {
        HAL_Delay(40);
 8001004:	2028      	movs	r0, #40	@ 0x28
 8001006:	f001 f935 	bl	8002274 <HAL_Delay>
        while(HAL_GPIO_ReadPin(GPIOA, BUTTON_REDUCE) == PRESS_BUTTON);
 800100a:	bf00      	nop
 800100c:	2104      	movs	r1, #4
 800100e:	4819      	ldr	r0, [pc, #100]	@ (8001074 <SetSecondHandler+0x138>)
 8001010:	f001 fc98 	bl	8002944 <HAL_GPIO_ReadPin>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0f8      	beq.n	800100c <SetSecondHandler+0xd0>
    	if (secondBuffer == MIN_SECOND)
 800101a:	4b0c      	ldr	r3, [pc, #48]	@ (800104c <SetSecondHandler+0x110>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d103      	bne.n	800102a <SetSecondHandler+0xee>
    	{
    		secondBuffer = MAX_SECOND;
 8001022:	4b0a      	ldr	r3, [pc, #40]	@ (800104c <SetSecondHandler+0x110>)
 8001024:	223b      	movs	r2, #59	@ 0x3b
 8001026:	701a      	strb	r2, [r3, #0]
 8001028:	e005      	b.n	8001036 <SetSecondHandler+0xfa>
    	}
    	else
    	{
    		secondBuffer--;
 800102a:	4b08      	ldr	r3, [pc, #32]	@ (800104c <SetSecondHandler+0x110>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	3b01      	subs	r3, #1
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4b06      	ldr	r3, [pc, #24]	@ (800104c <SetSecondHandler+0x110>)
 8001034:	701a      	strb	r2, [r3, #0]
    	}

    	LCD_blink_cursor_off();
 8001036:	f005 fa36 	bl	80064a6 <LCD_blink_cursor_off>
    }
}
 800103a:	bf00      	nop
 800103c:	3704      	adds	r7, #4
 800103e:	46bd      	mov	sp, r7
 8001040:	bd90      	pop	{r4, r7, pc}
 8001042:	bf00      	nop
 8001044:	20000255 	.word	0x20000255
 8001048:	20000256 	.word	0x20000256
 800104c:	20000257 	.word	0x20000257
 8001050:	08006ef0 	.word	0x08006ef0
 8001054:	2000021c 	.word	0x2000021c
 8001058:	2000025b 	.word	0x2000025b
 800105c:	2000025a 	.word	0x2000025a
 8001060:	20000259 	.word	0x20000259
 8001064:	20000258 	.word	0x20000258
 8001068:	20000000 	.word	0x20000000
 800106c:	08006f14 	.word	0x08006f14
 8001070:	20000230 	.word	0x20000230
 8001074:	40010800 	.word	0x40010800

08001078 <SetYearHandler>:
  * 		- Press BUTTON_INCREASE the Year value will increase by 1
  * 		- Press BUTTON_REDUCE the Year value will reduce by 1
  * 		- The Year value 0 -> 99 (+ 2000)
  */
void SetYearHandler(void)
{
 8001078:	b590      	push	{r4, r7, lr}
 800107a:	b083      	sub	sp, #12
 800107c:	af02      	add	r7, sp, #8
    sprintf(timeDisplay, "%02d:%02d:%02d", hourBuffer, minuteBuffer, secondBuffer);
 800107e:	4b40      	ldr	r3, [pc, #256]	@ (8001180 <SetYearHandler+0x108>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	461a      	mov	r2, r3
 8001084:	4b3f      	ldr	r3, [pc, #252]	@ (8001184 <SetYearHandler+0x10c>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	4619      	mov	r1, r3
 800108a:	4b3f      	ldr	r3, [pc, #252]	@ (8001188 <SetYearHandler+0x110>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	460b      	mov	r3, r1
 8001092:	493e      	ldr	r1, [pc, #248]	@ (800118c <SetYearHandler+0x114>)
 8001094:	483e      	ldr	r0, [pc, #248]	@ (8001190 <SetYearHandler+0x118>)
 8001096:	f005 fa4b 	bl	8006530 <siprintf>
    LCD_goto_XY(1, 4);
 800109a:	2104      	movs	r1, #4
 800109c:	2001      	movs	r0, #1
 800109e:	f005 f9d9 	bl	8006454 <LCD_goto_XY>
    LCD_send_string(timeDisplay);
 80010a2:	483b      	ldr	r0, [pc, #236]	@ (8001190 <SetYearHandler+0x118>)
 80010a4:	f005 f9ba 	bl	800641c <LCD_send_string>

	LCD_goto_XY(2, 1);
 80010a8:	2101      	movs	r1, #1
 80010aa:	2002      	movs	r0, #2
 80010ac:	f005 f9d2 	bl	8006454 <LCD_goto_XY>
	sprintf(dateDisplay, "20%02d/%02d/%02d %s", yearBuffer, monthBuffer, dateBuffer, dayOfWeek[dayBuffer]);
 80010b0:	4b38      	ldr	r3, [pc, #224]	@ (8001194 <SetYearHandler+0x11c>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	4b38      	ldr	r3, [pc, #224]	@ (8001198 <SetYearHandler+0x120>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	461c      	mov	r4, r3
 80010bc:	4b37      	ldr	r3, [pc, #220]	@ (800119c <SetYearHandler+0x124>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b37      	ldr	r3, [pc, #220]	@ (80011a0 <SetYearHandler+0x128>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	4619      	mov	r1, r3
 80010c8:	4b36      	ldr	r3, [pc, #216]	@ (80011a4 <SetYearHandler+0x12c>)
 80010ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80010ce:	9301      	str	r3, [sp, #4]
 80010d0:	9200      	str	r2, [sp, #0]
 80010d2:	4623      	mov	r3, r4
 80010d4:	4602      	mov	r2, r0
 80010d6:	4934      	ldr	r1, [pc, #208]	@ (80011a8 <SetYearHandler+0x130>)
 80010d8:	4834      	ldr	r0, [pc, #208]	@ (80011ac <SetYearHandler+0x134>)
 80010da:	f005 fa29 	bl	8006530 <siprintf>
	LCD_send_string(dateDisplay);
 80010de:	4833      	ldr	r0, [pc, #204]	@ (80011ac <SetYearHandler+0x134>)
 80010e0:	f005 f99c 	bl	800641c <LCD_send_string>

	LCD_goto_XY(2, 4);
 80010e4:	2104      	movs	r1, #4
 80010e6:	2002      	movs	r0, #2
 80010e8:	f005 f9b4 	bl	8006454 <LCD_goto_XY>
	LCD_blink_cursor_on();
 80010ec:	f005 f9d4 	bl	8006498 <LCD_blink_cursor_on>

    if (HAL_GPIO_ReadPin(GPIOA, BUTTON_INCREASE) == PRESS_BUTTON)
 80010f0:	2102      	movs	r1, #2
 80010f2:	482f      	ldr	r0, [pc, #188]	@ (80011b0 <SetYearHandler+0x138>)
 80010f4:	f001 fc26 	bl	8002944 <HAL_GPIO_ReadPin>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d119      	bne.n	8001132 <SetYearHandler+0xba>
    {
        HAL_Delay(40);
 80010fe:	2028      	movs	r0, #40	@ 0x28
 8001100:	f001 f8b8 	bl	8002274 <HAL_Delay>
        while(HAL_GPIO_ReadPin(GPIOA, BUTTON_INCREASE) == PRESS_BUTTON);
 8001104:	bf00      	nop
 8001106:	2102      	movs	r1, #2
 8001108:	4829      	ldr	r0, [pc, #164]	@ (80011b0 <SetYearHandler+0x138>)
 800110a:	f001 fc1b 	bl	8002944 <HAL_GPIO_ReadPin>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d0f8      	beq.n	8001106 <SetYearHandler+0x8e>

        yearBuffer++;
 8001114:	4b1f      	ldr	r3, [pc, #124]	@ (8001194 <SetYearHandler+0x11c>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	3301      	adds	r3, #1
 800111a:	b2da      	uxtb	r2, r3
 800111c:	4b1d      	ldr	r3, [pc, #116]	@ (8001194 <SetYearHandler+0x11c>)
 800111e:	701a      	strb	r2, [r3, #0]
        if (yearBuffer > MAX_YEAR)
 8001120:	4b1c      	ldr	r3, [pc, #112]	@ (8001194 <SetYearHandler+0x11c>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b63      	cmp	r3, #99	@ 0x63
 8001126:	d902      	bls.n	800112e <SetYearHandler+0xb6>
        {
        	yearBuffer = MIN_YEAR;
 8001128:	4b1a      	ldr	r3, [pc, #104]	@ (8001194 <SetYearHandler+0x11c>)
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
        }
        LCD_blink_cursor_off();
 800112e:	f005 f9ba 	bl	80064a6 <LCD_blink_cursor_off>
    }

    if (HAL_GPIO_ReadPin(GPIOA, BUTTON_REDUCE) == PRESS_BUTTON)
 8001132:	2104      	movs	r1, #4
 8001134:	481e      	ldr	r0, [pc, #120]	@ (80011b0 <SetYearHandler+0x138>)
 8001136:	f001 fc05 	bl	8002944 <HAL_GPIO_ReadPin>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d11a      	bne.n	8001176 <SetYearHandler+0xfe>
    {
        HAL_Delay(40);
 8001140:	2028      	movs	r0, #40	@ 0x28
 8001142:	f001 f897 	bl	8002274 <HAL_Delay>
        while(HAL_GPIO_ReadPin(GPIOA, BUTTON_REDUCE) == PRESS_BUTTON);
 8001146:	bf00      	nop
 8001148:	2104      	movs	r1, #4
 800114a:	4819      	ldr	r0, [pc, #100]	@ (80011b0 <SetYearHandler+0x138>)
 800114c:	f001 fbfa 	bl	8002944 <HAL_GPIO_ReadPin>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d0f8      	beq.n	8001148 <SetYearHandler+0xd0>
    	if (yearBuffer == MIN_YEAR)
 8001156:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <SetYearHandler+0x11c>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d103      	bne.n	8001166 <SetYearHandler+0xee>
    	{
    		yearBuffer = MAX_YEAR;
 800115e:	4b0d      	ldr	r3, [pc, #52]	@ (8001194 <SetYearHandler+0x11c>)
 8001160:	2263      	movs	r2, #99	@ 0x63
 8001162:	701a      	strb	r2, [r3, #0]
 8001164:	e005      	b.n	8001172 <SetYearHandler+0xfa>
    	}
    	else
    	{
    		yearBuffer--;
 8001166:	4b0b      	ldr	r3, [pc, #44]	@ (8001194 <SetYearHandler+0x11c>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	3b01      	subs	r3, #1
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <SetYearHandler+0x11c>)
 8001170:	701a      	strb	r2, [r3, #0]
    	}

    	LCD_blink_cursor_off();
 8001172:	f005 f998 	bl	80064a6 <LCD_blink_cursor_off>
    }
}
 8001176:	bf00      	nop
 8001178:	3704      	adds	r7, #4
 800117a:	46bd      	mov	sp, r7
 800117c:	bd90      	pop	{r4, r7, pc}
 800117e:	bf00      	nop
 8001180:	20000255 	.word	0x20000255
 8001184:	20000256 	.word	0x20000256
 8001188:	20000257 	.word	0x20000257
 800118c:	08006ef0 	.word	0x08006ef0
 8001190:	2000021c 	.word	0x2000021c
 8001194:	2000025b 	.word	0x2000025b
 8001198:	2000025a 	.word	0x2000025a
 800119c:	20000259 	.word	0x20000259
 80011a0:	20000258 	.word	0x20000258
 80011a4:	20000000 	.word	0x20000000
 80011a8:	08006f14 	.word	0x08006f14
 80011ac:	20000230 	.word	0x20000230
 80011b0:	40010800 	.word	0x40010800

080011b4 <SetMonthHandler>:
  * 		- Press BUTTON_INCREASE the Month value will increase by 1
  * 		- Press BUTTON_REDUCE the Month value will reduce by 1
  * 		- The Month value 1 -> 12
  */
void SetMonthHandler(void)
{
 80011b4:	b590      	push	{r4, r7, lr}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af02      	add	r7, sp, #8
    sprintf(timeDisplay, "%02d:%02d:%02d", hourBuffer, minuteBuffer, secondBuffer);
 80011ba:	4b40      	ldr	r3, [pc, #256]	@ (80012bc <SetMonthHandler+0x108>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	4b3f      	ldr	r3, [pc, #252]	@ (80012c0 <SetMonthHandler+0x10c>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	4619      	mov	r1, r3
 80011c6:	4b3f      	ldr	r3, [pc, #252]	@ (80012c4 <SetMonthHandler+0x110>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	460b      	mov	r3, r1
 80011ce:	493e      	ldr	r1, [pc, #248]	@ (80012c8 <SetMonthHandler+0x114>)
 80011d0:	483e      	ldr	r0, [pc, #248]	@ (80012cc <SetMonthHandler+0x118>)
 80011d2:	f005 f9ad 	bl	8006530 <siprintf>
    LCD_goto_XY(1, 4);
 80011d6:	2104      	movs	r1, #4
 80011d8:	2001      	movs	r0, #1
 80011da:	f005 f93b 	bl	8006454 <LCD_goto_XY>
    LCD_send_string(timeDisplay);
 80011de:	483b      	ldr	r0, [pc, #236]	@ (80012cc <SetMonthHandler+0x118>)
 80011e0:	f005 f91c 	bl	800641c <LCD_send_string>

	LCD_goto_XY(2, 1);
 80011e4:	2101      	movs	r1, #1
 80011e6:	2002      	movs	r0, #2
 80011e8:	f005 f934 	bl	8006454 <LCD_goto_XY>
	sprintf(dateDisplay, "20%02d/%02d/%02d %s", yearBuffer, monthBuffer, dateBuffer, dayOfWeek[dayBuffer]);
 80011ec:	4b38      	ldr	r3, [pc, #224]	@ (80012d0 <SetMonthHandler+0x11c>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	4b38      	ldr	r3, [pc, #224]	@ (80012d4 <SetMonthHandler+0x120>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	461c      	mov	r4, r3
 80011f8:	4b37      	ldr	r3, [pc, #220]	@ (80012d8 <SetMonthHandler+0x124>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b37      	ldr	r3, [pc, #220]	@ (80012dc <SetMonthHandler+0x128>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	4619      	mov	r1, r3
 8001204:	4b36      	ldr	r3, [pc, #216]	@ (80012e0 <SetMonthHandler+0x12c>)
 8001206:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800120a:	9301      	str	r3, [sp, #4]
 800120c:	9200      	str	r2, [sp, #0]
 800120e:	4623      	mov	r3, r4
 8001210:	4602      	mov	r2, r0
 8001212:	4934      	ldr	r1, [pc, #208]	@ (80012e4 <SetMonthHandler+0x130>)
 8001214:	4834      	ldr	r0, [pc, #208]	@ (80012e8 <SetMonthHandler+0x134>)
 8001216:	f005 f98b 	bl	8006530 <siprintf>
	LCD_send_string(dateDisplay);
 800121a:	4833      	ldr	r0, [pc, #204]	@ (80012e8 <SetMonthHandler+0x134>)
 800121c:	f005 f8fe 	bl	800641c <LCD_send_string>

	LCD_goto_XY(2, 7);
 8001220:	2107      	movs	r1, #7
 8001222:	2002      	movs	r0, #2
 8001224:	f005 f916 	bl	8006454 <LCD_goto_XY>
	LCD_blink_cursor_on();
 8001228:	f005 f936 	bl	8006498 <LCD_blink_cursor_on>

    if (HAL_GPIO_ReadPin(GPIOA, BUTTON_INCREASE) == PRESS_BUTTON)
 800122c:	2102      	movs	r1, #2
 800122e:	482f      	ldr	r0, [pc, #188]	@ (80012ec <SetMonthHandler+0x138>)
 8001230:	f001 fb88 	bl	8002944 <HAL_GPIO_ReadPin>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d119      	bne.n	800126e <SetMonthHandler+0xba>
    {
        HAL_Delay(40);
 800123a:	2028      	movs	r0, #40	@ 0x28
 800123c:	f001 f81a 	bl	8002274 <HAL_Delay>
        while(HAL_GPIO_ReadPin(GPIOA, BUTTON_INCREASE) == PRESS_BUTTON);
 8001240:	bf00      	nop
 8001242:	2102      	movs	r1, #2
 8001244:	4829      	ldr	r0, [pc, #164]	@ (80012ec <SetMonthHandler+0x138>)
 8001246:	f001 fb7d 	bl	8002944 <HAL_GPIO_ReadPin>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0f8      	beq.n	8001242 <SetMonthHandler+0x8e>

        monthBuffer++;
 8001250:	4b20      	ldr	r3, [pc, #128]	@ (80012d4 <SetMonthHandler+0x120>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	3301      	adds	r3, #1
 8001256:	b2da      	uxtb	r2, r3
 8001258:	4b1e      	ldr	r3, [pc, #120]	@ (80012d4 <SetMonthHandler+0x120>)
 800125a:	701a      	strb	r2, [r3, #0]
        if (monthBuffer > MAX_MONTH)
 800125c:	4b1d      	ldr	r3, [pc, #116]	@ (80012d4 <SetMonthHandler+0x120>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b0c      	cmp	r3, #12
 8001262:	d902      	bls.n	800126a <SetMonthHandler+0xb6>
        {
        	monthBuffer = MIN_MONTH;
 8001264:	4b1b      	ldr	r3, [pc, #108]	@ (80012d4 <SetMonthHandler+0x120>)
 8001266:	2201      	movs	r2, #1
 8001268:	701a      	strb	r2, [r3, #0]
        }

        LCD_blink_cursor_off();
 800126a:	f005 f91c 	bl	80064a6 <LCD_blink_cursor_off>
    }

    if (HAL_GPIO_ReadPin(GPIOA, BUTTON_REDUCE) == PRESS_BUTTON)
 800126e:	2104      	movs	r1, #4
 8001270:	481e      	ldr	r0, [pc, #120]	@ (80012ec <SetMonthHandler+0x138>)
 8001272:	f001 fb67 	bl	8002944 <HAL_GPIO_ReadPin>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d11a      	bne.n	80012b2 <SetMonthHandler+0xfe>
    {
        HAL_Delay(40);
 800127c:	2028      	movs	r0, #40	@ 0x28
 800127e:	f000 fff9 	bl	8002274 <HAL_Delay>
        while(HAL_GPIO_ReadPin(GPIOA, BUTTON_REDUCE) == PRESS_BUTTON);
 8001282:	bf00      	nop
 8001284:	2104      	movs	r1, #4
 8001286:	4819      	ldr	r0, [pc, #100]	@ (80012ec <SetMonthHandler+0x138>)
 8001288:	f001 fb5c 	bl	8002944 <HAL_GPIO_ReadPin>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0f8      	beq.n	8001284 <SetMonthHandler+0xd0>
    	if (monthBuffer == MIN_MONTH)
 8001292:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <SetMonthHandler+0x120>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d103      	bne.n	80012a2 <SetMonthHandler+0xee>
    	{
    		monthBuffer = MAX_MONTH;
 800129a:	4b0e      	ldr	r3, [pc, #56]	@ (80012d4 <SetMonthHandler+0x120>)
 800129c:	220c      	movs	r2, #12
 800129e:	701a      	strb	r2, [r3, #0]
 80012a0:	e005      	b.n	80012ae <SetMonthHandler+0xfa>
    	}
    	else
    	{
    		monthBuffer--;
 80012a2:	4b0c      	ldr	r3, [pc, #48]	@ (80012d4 <SetMonthHandler+0x120>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4b0a      	ldr	r3, [pc, #40]	@ (80012d4 <SetMonthHandler+0x120>)
 80012ac:	701a      	strb	r2, [r3, #0]
    	}
    	LCD_blink_cursor_off();
 80012ae:	f005 f8fa 	bl	80064a6 <LCD_blink_cursor_off>
    }
}
 80012b2:	bf00      	nop
 80012b4:	3704      	adds	r7, #4
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd90      	pop	{r4, r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000255 	.word	0x20000255
 80012c0:	20000256 	.word	0x20000256
 80012c4:	20000257 	.word	0x20000257
 80012c8:	08006ef0 	.word	0x08006ef0
 80012cc:	2000021c 	.word	0x2000021c
 80012d0:	2000025b 	.word	0x2000025b
 80012d4:	2000025a 	.word	0x2000025a
 80012d8:	20000259 	.word	0x20000259
 80012dc:	20000258 	.word	0x20000258
 80012e0:	20000000 	.word	0x20000000
 80012e4:	08006f14 	.word	0x08006f14
 80012e8:	20000230 	.word	0x20000230
 80012ec:	40010800 	.word	0x40010800

080012f0 <SetDateHandler>:
  * 		- Press BUTTON_INCREASE the Date value will increase by 1
  * 		- Press BUTTON_REDUCE the Date value will reduce by 1
  * 		- The Date value 1 -> 31 or 30 or 28 or 29
  */
void SetDateHandler(void)
{
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af02      	add	r7, sp, #8
    sprintf(timeDisplay, "%02d:%02d:%02d", hourBuffer, minuteBuffer, secondBuffer);
 80012f6:	4b47      	ldr	r3, [pc, #284]	@ (8001414 <SetDateHandler+0x124>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	4b46      	ldr	r3, [pc, #280]	@ (8001418 <SetDateHandler+0x128>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	4619      	mov	r1, r3
 8001302:	4b46      	ldr	r3, [pc, #280]	@ (800141c <SetDateHandler+0x12c>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	460b      	mov	r3, r1
 800130a:	4945      	ldr	r1, [pc, #276]	@ (8001420 <SetDateHandler+0x130>)
 800130c:	4845      	ldr	r0, [pc, #276]	@ (8001424 <SetDateHandler+0x134>)
 800130e:	f005 f90f 	bl	8006530 <siprintf>
    LCD_goto_XY(1, 4);
 8001312:	2104      	movs	r1, #4
 8001314:	2001      	movs	r0, #1
 8001316:	f005 f89d 	bl	8006454 <LCD_goto_XY>
    LCD_send_string(timeDisplay);
 800131a:	4842      	ldr	r0, [pc, #264]	@ (8001424 <SetDateHandler+0x134>)
 800131c:	f005 f87e 	bl	800641c <LCD_send_string>

	LCD_goto_XY(2, 1);
 8001320:	2101      	movs	r1, #1
 8001322:	2002      	movs	r0, #2
 8001324:	f005 f896 	bl	8006454 <LCD_goto_XY>
	sprintf(dateDisplay, "20%02d/%02d/%02d %s", yearBuffer, monthBuffer, dateBuffer, dayOfWeek[dayBuffer]);
 8001328:	4b3f      	ldr	r3, [pc, #252]	@ (8001428 <SetDateHandler+0x138>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	4b3f      	ldr	r3, [pc, #252]	@ (800142c <SetDateHandler+0x13c>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	461c      	mov	r4, r3
 8001334:	4b3e      	ldr	r3, [pc, #248]	@ (8001430 <SetDateHandler+0x140>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	4b3e      	ldr	r3, [pc, #248]	@ (8001434 <SetDateHandler+0x144>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	4619      	mov	r1, r3
 8001340:	4b3d      	ldr	r3, [pc, #244]	@ (8001438 <SetDateHandler+0x148>)
 8001342:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001346:	9301      	str	r3, [sp, #4]
 8001348:	9200      	str	r2, [sp, #0]
 800134a:	4623      	mov	r3, r4
 800134c:	4602      	mov	r2, r0
 800134e:	493b      	ldr	r1, [pc, #236]	@ (800143c <SetDateHandler+0x14c>)
 8001350:	483b      	ldr	r0, [pc, #236]	@ (8001440 <SetDateHandler+0x150>)
 8001352:	f005 f8ed 	bl	8006530 <siprintf>
	LCD_send_string(dateDisplay);
 8001356:	483a      	ldr	r0, [pc, #232]	@ (8001440 <SetDateHandler+0x150>)
 8001358:	f005 f860 	bl	800641c <LCD_send_string>

	LCD_goto_XY(2, 10);
 800135c:	210a      	movs	r1, #10
 800135e:	2002      	movs	r0, #2
 8001360:	f005 f878 	bl	8006454 <LCD_goto_XY>
	LCD_blink_cursor_on();
 8001364:	f005 f898 	bl	8006498 <LCD_blink_cursor_on>

	uint8_t MAX_DATE = daysInMonth(monthBuffer, 2000 + yearBuffer);
 8001368:	4b30      	ldr	r3, [pc, #192]	@ (800142c <SetDateHandler+0x13c>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4a2e      	ldr	r2, [pc, #184]	@ (8001428 <SetDateHandler+0x138>)
 800136e:	7812      	ldrb	r2, [r2, #0]
 8001370:	f502 62fa 	add.w	r2, r2, #2000	@ 0x7d0
 8001374:	b292      	uxth	r2, r2
 8001376:	4611      	mov	r1, r2
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fbf9 	bl	8000b70 <daysInMonth>
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]

	if (HAL_GPIO_ReadPin(GPIOA, BUTTON_INCREASE) == PRESS_BUTTON)
 8001382:	2102      	movs	r1, #2
 8001384:	482f      	ldr	r0, [pc, #188]	@ (8001444 <SetDateHandler+0x154>)
 8001386:	f001 fadd 	bl	8002944 <HAL_GPIO_ReadPin>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d11a      	bne.n	80013c6 <SetDateHandler+0xd6>
	{
		HAL_Delay(40);
 8001390:	2028      	movs	r0, #40	@ 0x28
 8001392:	f000 ff6f 	bl	8002274 <HAL_Delay>
		while (HAL_GPIO_ReadPin(GPIOA, BUTTON_INCREASE) == PRESS_BUTTON);
 8001396:	bf00      	nop
 8001398:	2102      	movs	r1, #2
 800139a:	482a      	ldr	r0, [pc, #168]	@ (8001444 <SetDateHandler+0x154>)
 800139c:	f001 fad2 	bl	8002944 <HAL_GPIO_ReadPin>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f8      	beq.n	8001398 <SetDateHandler+0xa8>

		dateBuffer++;
 80013a6:	4b22      	ldr	r3, [pc, #136]	@ (8001430 <SetDateHandler+0x140>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	3301      	adds	r3, #1
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	4b20      	ldr	r3, [pc, #128]	@ (8001430 <SetDateHandler+0x140>)
 80013b0:	701a      	strb	r2, [r3, #0]
		if (dateBuffer > MAX_DATE)
 80013b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001430 <SetDateHandler+0x140>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	79fa      	ldrb	r2, [r7, #7]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d202      	bcs.n	80013c2 <SetDateHandler+0xd2>
		{
			dateBuffer = MIN_DATE;
 80013bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001430 <SetDateHandler+0x140>)
 80013be:	2201      	movs	r2, #1
 80013c0:	701a      	strb	r2, [r3, #0]
		}

		LCD_blink_cursor_off();
 80013c2:	f005 f870 	bl	80064a6 <LCD_blink_cursor_off>
	}

	if (HAL_GPIO_ReadPin(GPIOA, BUTTON_REDUCE) == PRESS_BUTTON)
 80013c6:	2104      	movs	r1, #4
 80013c8:	481e      	ldr	r0, [pc, #120]	@ (8001444 <SetDateHandler+0x154>)
 80013ca:	f001 fabb 	bl	8002944 <HAL_GPIO_ReadPin>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d11a      	bne.n	800140a <SetDateHandler+0x11a>
	{
		HAL_Delay(40);
 80013d4:	2028      	movs	r0, #40	@ 0x28
 80013d6:	f000 ff4d 	bl	8002274 <HAL_Delay>
		while (HAL_GPIO_ReadPin(GPIOA, BUTTON_REDUCE) == PRESS_BUTTON);
 80013da:	bf00      	nop
 80013dc:	2104      	movs	r1, #4
 80013de:	4819      	ldr	r0, [pc, #100]	@ (8001444 <SetDateHandler+0x154>)
 80013e0:	f001 fab0 	bl	8002944 <HAL_GPIO_ReadPin>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0f8      	beq.n	80013dc <SetDateHandler+0xec>

		if (dateBuffer == MIN_DATE)
 80013ea:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <SetDateHandler+0x140>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d103      	bne.n	80013fa <SetDateHandler+0x10a>
		{
			dateBuffer = MAX_DATE;
 80013f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001430 <SetDateHandler+0x140>)
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	7013      	strb	r3, [r2, #0]
 80013f8:	e005      	b.n	8001406 <SetDateHandler+0x116>
		}
		else
		{
			dateBuffer--;
 80013fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001430 <SetDateHandler+0x140>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	3b01      	subs	r3, #1
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <SetDateHandler+0x140>)
 8001404:	701a      	strb	r2, [r3, #0]
		}

		LCD_blink_cursor_off();
 8001406:	f005 f84e 	bl	80064a6 <LCD_blink_cursor_off>
	}
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	bd90      	pop	{r4, r7, pc}
 8001412:	bf00      	nop
 8001414:	20000255 	.word	0x20000255
 8001418:	20000256 	.word	0x20000256
 800141c:	20000257 	.word	0x20000257
 8001420:	08006ef0 	.word	0x08006ef0
 8001424:	2000021c 	.word	0x2000021c
 8001428:	2000025b 	.word	0x2000025b
 800142c:	2000025a 	.word	0x2000025a
 8001430:	20000259 	.word	0x20000259
 8001434:	20000258 	.word	0x20000258
 8001438:	20000000 	.word	0x20000000
 800143c:	08006f14 	.word	0x08006f14
 8001440:	20000230 	.word	0x20000230
 8001444:	40010800 	.word	0x40010800

08001448 <SetDayHandler>:
  * 		- Press BUTTON_INCREASE the Day value will increase by 1
  * 		- Press BUTTON_REDUCE the Day value will reduce by 1
  * 		- The Day value in Day (enum)
  */
void SetDayHandler(void)
{
 8001448:	b590      	push	{r4, r7, lr}
 800144a:	b083      	sub	sp, #12
 800144c:	af02      	add	r7, sp, #8
    sprintf(timeDisplay, "%02d:%02d:%02d", hourBuffer, minuteBuffer, secondBuffer);
 800144e:	4b40      	ldr	r3, [pc, #256]	@ (8001550 <SetDayHandler+0x108>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	461a      	mov	r2, r3
 8001454:	4b3f      	ldr	r3, [pc, #252]	@ (8001554 <SetDayHandler+0x10c>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4619      	mov	r1, r3
 800145a:	4b3f      	ldr	r3, [pc, #252]	@ (8001558 <SetDayHandler+0x110>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	460b      	mov	r3, r1
 8001462:	493e      	ldr	r1, [pc, #248]	@ (800155c <SetDayHandler+0x114>)
 8001464:	483e      	ldr	r0, [pc, #248]	@ (8001560 <SetDayHandler+0x118>)
 8001466:	f005 f863 	bl	8006530 <siprintf>
    LCD_goto_XY(1, 4);
 800146a:	2104      	movs	r1, #4
 800146c:	2001      	movs	r0, #1
 800146e:	f004 fff1 	bl	8006454 <LCD_goto_XY>
    LCD_send_string(timeDisplay);
 8001472:	483b      	ldr	r0, [pc, #236]	@ (8001560 <SetDayHandler+0x118>)
 8001474:	f004 ffd2 	bl	800641c <LCD_send_string>

	LCD_goto_XY(2, 1);
 8001478:	2101      	movs	r1, #1
 800147a:	2002      	movs	r0, #2
 800147c:	f004 ffea 	bl	8006454 <LCD_goto_XY>
	sprintf(dateDisplay, "20%02d/%02d/%02d %s", yearBuffer, monthBuffer, dateBuffer, dayOfWeek[dayBuffer]);
 8001480:	4b38      	ldr	r3, [pc, #224]	@ (8001564 <SetDayHandler+0x11c>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	4b38      	ldr	r3, [pc, #224]	@ (8001568 <SetDayHandler+0x120>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	461c      	mov	r4, r3
 800148c:	4b37      	ldr	r3, [pc, #220]	@ (800156c <SetDayHandler+0x124>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	461a      	mov	r2, r3
 8001492:	4b37      	ldr	r3, [pc, #220]	@ (8001570 <SetDayHandler+0x128>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	4619      	mov	r1, r3
 8001498:	4b36      	ldr	r3, [pc, #216]	@ (8001574 <SetDayHandler+0x12c>)
 800149a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800149e:	9301      	str	r3, [sp, #4]
 80014a0:	9200      	str	r2, [sp, #0]
 80014a2:	4623      	mov	r3, r4
 80014a4:	4602      	mov	r2, r0
 80014a6:	4934      	ldr	r1, [pc, #208]	@ (8001578 <SetDayHandler+0x130>)
 80014a8:	4834      	ldr	r0, [pc, #208]	@ (800157c <SetDayHandler+0x134>)
 80014aa:	f005 f841 	bl	8006530 <siprintf>
	LCD_send_string(dateDisplay);
 80014ae:	4833      	ldr	r0, [pc, #204]	@ (800157c <SetDayHandler+0x134>)
 80014b0:	f004 ffb4 	bl	800641c <LCD_send_string>

	LCD_goto_XY(2, 14);
 80014b4:	210e      	movs	r1, #14
 80014b6:	2002      	movs	r0, #2
 80014b8:	f004 ffcc 	bl	8006454 <LCD_goto_XY>
	LCD_blink_cursor_on();
 80014bc:	f004 ffec 	bl	8006498 <LCD_blink_cursor_on>

    if (HAL_GPIO_ReadPin(GPIOA, BUTTON_INCREASE) == PRESS_BUTTON)
 80014c0:	2102      	movs	r1, #2
 80014c2:	482f      	ldr	r0, [pc, #188]	@ (8001580 <SetDayHandler+0x138>)
 80014c4:	f001 fa3e 	bl	8002944 <HAL_GPIO_ReadPin>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d119      	bne.n	8001502 <SetDayHandler+0xba>
    {
        HAL_Delay(40);
 80014ce:	2028      	movs	r0, #40	@ 0x28
 80014d0:	f000 fed0 	bl	8002274 <HAL_Delay>
        while(HAL_GPIO_ReadPin(GPIOA, BUTTON_INCREASE) == PRESS_BUTTON);
 80014d4:	bf00      	nop
 80014d6:	2102      	movs	r1, #2
 80014d8:	4829      	ldr	r0, [pc, #164]	@ (8001580 <SetDayHandler+0x138>)
 80014da:	f001 fa33 	bl	8002944 <HAL_GPIO_ReadPin>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0f8      	beq.n	80014d6 <SetDayHandler+0x8e>

        dayBuffer++;
 80014e4:	4b22      	ldr	r3, [pc, #136]	@ (8001570 <SetDayHandler+0x128>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	3301      	adds	r3, #1
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	4b20      	ldr	r3, [pc, #128]	@ (8001570 <SetDayHandler+0x128>)
 80014ee:	701a      	strb	r2, [r3, #0]
        if (dayBuffer > SAT)
 80014f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001570 <SetDayHandler+0x128>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b07      	cmp	r3, #7
 80014f6:	d902      	bls.n	80014fe <SetDayHandler+0xb6>
        {
        	dayBuffer = SUN;
 80014f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001570 <SetDayHandler+0x128>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	701a      	strb	r2, [r3, #0]
        }

        LCD_blink_cursor_off();
 80014fe:	f004 ffd2 	bl	80064a6 <LCD_blink_cursor_off>
    }

    if (HAL_GPIO_ReadPin(GPIOA, BUTTON_REDUCE) == PRESS_BUTTON)
 8001502:	2104      	movs	r1, #4
 8001504:	481e      	ldr	r0, [pc, #120]	@ (8001580 <SetDayHandler+0x138>)
 8001506:	f001 fa1d 	bl	8002944 <HAL_GPIO_ReadPin>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d11a      	bne.n	8001546 <SetDayHandler+0xfe>
    {
        HAL_Delay(40);
 8001510:	2028      	movs	r0, #40	@ 0x28
 8001512:	f000 feaf 	bl	8002274 <HAL_Delay>
        while(HAL_GPIO_ReadPin(GPIOA, BUTTON_REDUCE) == PRESS_BUTTON);
 8001516:	bf00      	nop
 8001518:	2104      	movs	r1, #4
 800151a:	4819      	ldr	r0, [pc, #100]	@ (8001580 <SetDayHandler+0x138>)
 800151c:	f001 fa12 	bl	8002944 <HAL_GPIO_ReadPin>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0f8      	beq.n	8001518 <SetDayHandler+0xd0>
    	if (dayBuffer == SUN)
 8001526:	4b12      	ldr	r3, [pc, #72]	@ (8001570 <SetDayHandler+0x128>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d103      	bne.n	8001536 <SetDayHandler+0xee>
    	{
    		dayBuffer = SAT;
 800152e:	4b10      	ldr	r3, [pc, #64]	@ (8001570 <SetDayHandler+0x128>)
 8001530:	2207      	movs	r2, #7
 8001532:	701a      	strb	r2, [r3, #0]
 8001534:	e005      	b.n	8001542 <SetDayHandler+0xfa>
    	}
    	else
    	{
    		dayBuffer--;
 8001536:	4b0e      	ldr	r3, [pc, #56]	@ (8001570 <SetDayHandler+0x128>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	3b01      	subs	r3, #1
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4b0c      	ldr	r3, [pc, #48]	@ (8001570 <SetDayHandler+0x128>)
 8001540:	701a      	strb	r2, [r3, #0]
    	}
    	LCD_blink_cursor_off();
 8001542:	f004 ffb0 	bl	80064a6 <LCD_blink_cursor_off>
    }
}
 8001546:	bf00      	nop
 8001548:	3704      	adds	r7, #4
 800154a:	46bd      	mov	sp, r7
 800154c:	bd90      	pop	{r4, r7, pc}
 800154e:	bf00      	nop
 8001550:	20000255 	.word	0x20000255
 8001554:	20000256 	.word	0x20000256
 8001558:	20000257 	.word	0x20000257
 800155c:	08006ef0 	.word	0x08006ef0
 8001560:	2000021c 	.word	0x2000021c
 8001564:	2000025b 	.word	0x2000025b
 8001568:	2000025a 	.word	0x2000025a
 800156c:	20000259 	.word	0x20000259
 8001570:	20000258 	.word	0x20000258
 8001574:	20000000 	.word	0x20000000
 8001578:	08006f14 	.word	0x08006f14
 800157c:	20000230 	.word	0x20000230
 8001580:	40010800 	.word	0x40010800

08001584 <SetHourAlarmHandler>:
  * 		- Press BUTTON_INCREASE the Alarm Hour value will increase by 1
  * 		- Press BUTTON_REDUCE the Alarm Hour value will reduce by 1
  * 		- The Hour value 0 -> 23
  */
void SetHourAlarmHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af02      	add	r7, sp, #8
	LCD_goto_XY(1, 3);
 800158a:	2103      	movs	r1, #3
 800158c:	2001      	movs	r0, #1
 800158e:	f004 ff61 	bl	8006454 <LCD_goto_XY>
	LCD_send_string("ALARM MODE");
 8001592:	4834      	ldr	r0, [pc, #208]	@ (8001664 <SetHourAlarmHandler+0xe0>)
 8001594:	f004 ff42 	bl	800641c <LCD_send_string>
	LCD_goto_XY(2, 3);
 8001598:	2103      	movs	r1, #3
 800159a:	2002      	movs	r0, #2
 800159c:	f004 ff5a 	bl	8006454 <LCD_goto_XY>
	sprintf(alarmDisplay, "%02d:%02d  %s", hourAlarmBuffer, minuteAlarmBuffer, modeAlarm[checkAlarmStatus]);
 80015a0:	4b31      	ldr	r3, [pc, #196]	@ (8001668 <SetHourAlarmHandler+0xe4>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	4619      	mov	r1, r3
 80015a6:	4b31      	ldr	r3, [pc, #196]	@ (800166c <SetHourAlarmHandler+0xe8>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	4b30      	ldr	r3, [pc, #192]	@ (8001670 <SetHourAlarmHandler+0xec>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b30      	ldr	r3, [pc, #192]	@ (8001674 <SetHourAlarmHandler+0xf0>)
 80015b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	4603      	mov	r3, r0
 80015bc:	460a      	mov	r2, r1
 80015be:	492e      	ldr	r1, [pc, #184]	@ (8001678 <SetHourAlarmHandler+0xf4>)
 80015c0:	482e      	ldr	r0, [pc, #184]	@ (800167c <SetHourAlarmHandler+0xf8>)
 80015c2:	f004 ffb5 	bl	8006530 <siprintf>
	LCD_send_string(alarmDisplay);
 80015c6:	482d      	ldr	r0, [pc, #180]	@ (800167c <SetHourAlarmHandler+0xf8>)
 80015c8:	f004 ff28 	bl	800641c <LCD_send_string>

    LCD_goto_XY(2, 4);
 80015cc:	2104      	movs	r1, #4
 80015ce:	2002      	movs	r0, #2
 80015d0:	f004 ff40 	bl	8006454 <LCD_goto_XY>
    LCD_blink_cursor_on();
 80015d4:	f004 ff60 	bl	8006498 <LCD_blink_cursor_on>

    if (HAL_GPIO_ReadPin(GPIOA, BUTTON_INCREASE) == PRESS_BUTTON)
 80015d8:	2102      	movs	r1, #2
 80015da:	4829      	ldr	r0, [pc, #164]	@ (8001680 <SetHourAlarmHandler+0xfc>)
 80015dc:	f001 f9b2 	bl	8002944 <HAL_GPIO_ReadPin>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d119      	bne.n	800161a <SetHourAlarmHandler+0x96>
    {
        HAL_Delay(40);
 80015e6:	2028      	movs	r0, #40	@ 0x28
 80015e8:	f000 fe44 	bl	8002274 <HAL_Delay>
        while(HAL_GPIO_ReadPin(GPIOA, BUTTON_INCREASE) == PRESS_BUTTON);
 80015ec:	bf00      	nop
 80015ee:	2102      	movs	r1, #2
 80015f0:	4823      	ldr	r0, [pc, #140]	@ (8001680 <SetHourAlarmHandler+0xfc>)
 80015f2:	f001 f9a7 	bl	8002944 <HAL_GPIO_ReadPin>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0f8      	beq.n	80015ee <SetHourAlarmHandler+0x6a>

        hourAlarmBuffer++;
 80015fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001668 <SetHourAlarmHandler+0xe4>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	3301      	adds	r3, #1
 8001602:	b2da      	uxtb	r2, r3
 8001604:	4b18      	ldr	r3, [pc, #96]	@ (8001668 <SetHourAlarmHandler+0xe4>)
 8001606:	701a      	strb	r2, [r3, #0]
        if (hourAlarmBuffer > MAX_HOUR)
 8001608:	4b17      	ldr	r3, [pc, #92]	@ (8001668 <SetHourAlarmHandler+0xe4>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b17      	cmp	r3, #23
 800160e:	d902      	bls.n	8001616 <SetHourAlarmHandler+0x92>
        {
        	hourAlarmBuffer = MIN_HOUR;
 8001610:	4b15      	ldr	r3, [pc, #84]	@ (8001668 <SetHourAlarmHandler+0xe4>)
 8001612:	2200      	movs	r2, #0
 8001614:	701a      	strb	r2, [r3, #0]
        }
        LCD_blink_cursor_off();
 8001616:	f004 ff46 	bl	80064a6 <LCD_blink_cursor_off>
    }

    if (HAL_GPIO_ReadPin(GPIOA, BUTTON_REDUCE) == PRESS_BUTTON)
 800161a:	2104      	movs	r1, #4
 800161c:	4818      	ldr	r0, [pc, #96]	@ (8001680 <SetHourAlarmHandler+0xfc>)
 800161e:	f001 f991 	bl	8002944 <HAL_GPIO_ReadPin>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d11a      	bne.n	800165e <SetHourAlarmHandler+0xda>
    {
        HAL_Delay(40);
 8001628:	2028      	movs	r0, #40	@ 0x28
 800162a:	f000 fe23 	bl	8002274 <HAL_Delay>
        while(HAL_GPIO_ReadPin(GPIOA, BUTTON_REDUCE) == PRESS_BUTTON);
 800162e:	bf00      	nop
 8001630:	2104      	movs	r1, #4
 8001632:	4813      	ldr	r0, [pc, #76]	@ (8001680 <SetHourAlarmHandler+0xfc>)
 8001634:	f001 f986 	bl	8002944 <HAL_GPIO_ReadPin>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f8      	beq.n	8001630 <SetHourAlarmHandler+0xac>

        if (hourAlarmBuffer == MIN_HOUR)
 800163e:	4b0a      	ldr	r3, [pc, #40]	@ (8001668 <SetHourAlarmHandler+0xe4>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d103      	bne.n	800164e <SetHourAlarmHandler+0xca>
        {
        	hourAlarmBuffer = MAX_HOUR;
 8001646:	4b08      	ldr	r3, [pc, #32]	@ (8001668 <SetHourAlarmHandler+0xe4>)
 8001648:	2217      	movs	r2, #23
 800164a:	701a      	strb	r2, [r3, #0]
 800164c:	e005      	b.n	800165a <SetHourAlarmHandler+0xd6>
        }
        else
        {
        	hourAlarmBuffer--;
 800164e:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <SetHourAlarmHandler+0xe4>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	3b01      	subs	r3, #1
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4b04      	ldr	r3, [pc, #16]	@ (8001668 <SetHourAlarmHandler+0xe4>)
 8001658:	701a      	strb	r2, [r3, #0]
        }

        LCD_blink_cursor_off();
 800165a:	f004 ff24 	bl	80064a6 <LCD_blink_cursor_off>
    }
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	08006f28 	.word	0x08006f28
 8001668:	2000025c 	.word	0x2000025c
 800166c:	2000025d 	.word	0x2000025d
 8001670:	2000025e 	.word	0x2000025e
 8001674:	20000020 	.word	0x20000020
 8001678:	08006f34 	.word	0x08006f34
 800167c:	20000244 	.word	0x20000244
 8001680:	40010800 	.word	0x40010800

08001684 <SetMinuteAlarmHandler>:
  * 		- Press BUTTON_INCREASE the Minute value will increase by 1
  * 		- Press BUTTON_REDUCE the Minute value will reduce by 1
  * 		- The Alarm Minute value 0 -> 59
  */
void SetMinuteAlarmHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af02      	add	r7, sp, #8
	LCD_goto_XY(1, 3);
 800168a:	2103      	movs	r1, #3
 800168c:	2001      	movs	r0, #1
 800168e:	f004 fee1 	bl	8006454 <LCD_goto_XY>
	LCD_send_string("ALARM MODE");
 8001692:	4834      	ldr	r0, [pc, #208]	@ (8001764 <SetMinuteAlarmHandler+0xe0>)
 8001694:	f004 fec2 	bl	800641c <LCD_send_string>
	LCD_goto_XY(2, 3);
 8001698:	2103      	movs	r1, #3
 800169a:	2002      	movs	r0, #2
 800169c:	f004 feda 	bl	8006454 <LCD_goto_XY>
	sprintf(alarmDisplay, "%02d:%02d  %s", hourAlarmBuffer, minuteAlarmBuffer, modeAlarm[checkAlarmStatus]);
 80016a0:	4b31      	ldr	r3, [pc, #196]	@ (8001768 <SetMinuteAlarmHandler+0xe4>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	4619      	mov	r1, r3
 80016a6:	4b31      	ldr	r3, [pc, #196]	@ (800176c <SetMinuteAlarmHandler+0xe8>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	4b30      	ldr	r3, [pc, #192]	@ (8001770 <SetMinuteAlarmHandler+0xec>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b30      	ldr	r3, [pc, #192]	@ (8001774 <SetMinuteAlarmHandler+0xf0>)
 80016b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	4603      	mov	r3, r0
 80016bc:	460a      	mov	r2, r1
 80016be:	492e      	ldr	r1, [pc, #184]	@ (8001778 <SetMinuteAlarmHandler+0xf4>)
 80016c0:	482e      	ldr	r0, [pc, #184]	@ (800177c <SetMinuteAlarmHandler+0xf8>)
 80016c2:	f004 ff35 	bl	8006530 <siprintf>
	LCD_send_string(alarmDisplay);
 80016c6:	482d      	ldr	r0, [pc, #180]	@ (800177c <SetMinuteAlarmHandler+0xf8>)
 80016c8:	f004 fea8 	bl	800641c <LCD_send_string>

    LCD_goto_XY(2, 7);
 80016cc:	2107      	movs	r1, #7
 80016ce:	2002      	movs	r0, #2
 80016d0:	f004 fec0 	bl	8006454 <LCD_goto_XY>
    LCD_blink_cursor_on();
 80016d4:	f004 fee0 	bl	8006498 <LCD_blink_cursor_on>

    if (HAL_GPIO_ReadPin(GPIOA, BUTTON_INCREASE) == PRESS_BUTTON)
 80016d8:	2102      	movs	r1, #2
 80016da:	4829      	ldr	r0, [pc, #164]	@ (8001780 <SetMinuteAlarmHandler+0xfc>)
 80016dc:	f001 f932 	bl	8002944 <HAL_GPIO_ReadPin>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d119      	bne.n	800171a <SetMinuteAlarmHandler+0x96>
    {
    	 HAL_Delay(40);
 80016e6:	2028      	movs	r0, #40	@ 0x28
 80016e8:	f000 fdc4 	bl	8002274 <HAL_Delay>
         while(HAL_GPIO_ReadPin(GPIOA, BUTTON_INCREASE) == PRESS_BUTTON);
 80016ec:	bf00      	nop
 80016ee:	2102      	movs	r1, #2
 80016f0:	4823      	ldr	r0, [pc, #140]	@ (8001780 <SetMinuteAlarmHandler+0xfc>)
 80016f2:	f001 f927 	bl	8002944 <HAL_GPIO_ReadPin>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f8      	beq.n	80016ee <SetMinuteAlarmHandler+0x6a>

         minuteAlarmBuffer++;
 80016fc:	4b1b      	ldr	r3, [pc, #108]	@ (800176c <SetMinuteAlarmHandler+0xe8>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	3301      	adds	r3, #1
 8001702:	b2da      	uxtb	r2, r3
 8001704:	4b19      	ldr	r3, [pc, #100]	@ (800176c <SetMinuteAlarmHandler+0xe8>)
 8001706:	701a      	strb	r2, [r3, #0]
         if (minuteAlarmBuffer > MAX_MINUTE)
 8001708:	4b18      	ldr	r3, [pc, #96]	@ (800176c <SetMinuteAlarmHandler+0xe8>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b3b      	cmp	r3, #59	@ 0x3b
 800170e:	d902      	bls.n	8001716 <SetMinuteAlarmHandler+0x92>
         {
        	 minuteAlarmBuffer = MIN_MINUTE;
 8001710:	4b16      	ldr	r3, [pc, #88]	@ (800176c <SetMinuteAlarmHandler+0xe8>)
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]
         }
         LCD_blink_cursor_off();
 8001716:	f004 fec6 	bl	80064a6 <LCD_blink_cursor_off>
     }

     if (HAL_GPIO_ReadPin(GPIOA, BUTTON_REDUCE) == PRESS_BUTTON)
 800171a:	2104      	movs	r1, #4
 800171c:	4818      	ldr	r0, [pc, #96]	@ (8001780 <SetMinuteAlarmHandler+0xfc>)
 800171e:	f001 f911 	bl	8002944 <HAL_GPIO_ReadPin>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d11a      	bne.n	800175e <SetMinuteAlarmHandler+0xda>
     {
         HAL_Delay(40);
 8001728:	2028      	movs	r0, #40	@ 0x28
 800172a:	f000 fda3 	bl	8002274 <HAL_Delay>
         while(HAL_GPIO_ReadPin(GPIOA, BUTTON_REDUCE) == PRESS_BUTTON);
 800172e:	bf00      	nop
 8001730:	2104      	movs	r1, #4
 8001732:	4813      	ldr	r0, [pc, #76]	@ (8001780 <SetMinuteAlarmHandler+0xfc>)
 8001734:	f001 f906 	bl	8002944 <HAL_GPIO_ReadPin>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0f8      	beq.n	8001730 <SetMinuteAlarmHandler+0xac>
     	if (minuteAlarmBuffer == MIN_MINUTE)
 800173e:	4b0b      	ldr	r3, [pc, #44]	@ (800176c <SetMinuteAlarmHandler+0xe8>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d103      	bne.n	800174e <SetMinuteAlarmHandler+0xca>
     	{
     		minuteAlarmBuffer = MAX_MINUTE;
 8001746:	4b09      	ldr	r3, [pc, #36]	@ (800176c <SetMinuteAlarmHandler+0xe8>)
 8001748:	223b      	movs	r2, #59	@ 0x3b
 800174a:	701a      	strb	r2, [r3, #0]
 800174c:	e005      	b.n	800175a <SetMinuteAlarmHandler+0xd6>
     	}
     	else
     	{
     		minuteAlarmBuffer--;
 800174e:	4b07      	ldr	r3, [pc, #28]	@ (800176c <SetMinuteAlarmHandler+0xe8>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	3b01      	subs	r3, #1
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4b05      	ldr	r3, [pc, #20]	@ (800176c <SetMinuteAlarmHandler+0xe8>)
 8001758:	701a      	strb	r2, [r3, #0]
     	}

     	LCD_blink_cursor_off();
 800175a:	f004 fea4 	bl	80064a6 <LCD_blink_cursor_off>
     }
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	08006f28 	.word	0x08006f28
 8001768:	2000025c 	.word	0x2000025c
 800176c:	2000025d 	.word	0x2000025d
 8001770:	2000025e 	.word	0x2000025e
 8001774:	20000020 	.word	0x20000020
 8001778:	08006f34 	.word	0x08006f34
 800177c:	20000244 	.word	0x20000244
 8001780:	40010800 	.word	0x40010800

08001784 <SetModeAlarmHandler>:
  * @brief Handles Alarm Mode adjustment in the clock state machine.
  * 		- Have 2 modes: ON_ALARM or OFF_ALARM
  * 		- Press BUTTON_INCREASE or BUTTON_REDUCE to change the mode
  */
void SetModeAlarmHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af02      	add	r7, sp, #8
	LCD_goto_XY(1, 3);
 800178a:	2103      	movs	r1, #3
 800178c:	2001      	movs	r0, #1
 800178e:	f004 fe61 	bl	8006454 <LCD_goto_XY>
	LCD_send_string("ALARM MODE");
 8001792:	4839      	ldr	r0, [pc, #228]	@ (8001878 <SetModeAlarmHandler+0xf4>)
 8001794:	f004 fe42 	bl	800641c <LCD_send_string>
	LCD_goto_XY(2, 3);
 8001798:	2103      	movs	r1, #3
 800179a:	2002      	movs	r0, #2
 800179c:	f004 fe5a 	bl	8006454 <LCD_goto_XY>
	sprintf(alarmDisplay, "%02d:%02d  %s", hourAlarmBuffer, minuteAlarmBuffer, modeAlarm[checkAlarmStatus]);
 80017a0:	4b36      	ldr	r3, [pc, #216]	@ (800187c <SetModeAlarmHandler+0xf8>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	4619      	mov	r1, r3
 80017a6:	4b36      	ldr	r3, [pc, #216]	@ (8001880 <SetModeAlarmHandler+0xfc>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	4b35      	ldr	r3, [pc, #212]	@ (8001884 <SetModeAlarmHandler+0x100>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b35      	ldr	r3, [pc, #212]	@ (8001888 <SetModeAlarmHandler+0x104>)
 80017b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	4603      	mov	r3, r0
 80017bc:	460a      	mov	r2, r1
 80017be:	4933      	ldr	r1, [pc, #204]	@ (800188c <SetModeAlarmHandler+0x108>)
 80017c0:	4833      	ldr	r0, [pc, #204]	@ (8001890 <SetModeAlarmHandler+0x10c>)
 80017c2:	f004 feb5 	bl	8006530 <siprintf>
	LCD_send_string(alarmDisplay);
 80017c6:	4832      	ldr	r0, [pc, #200]	@ (8001890 <SetModeAlarmHandler+0x10c>)
 80017c8:	f004 fe28 	bl	800641c <LCD_send_string>

    LCD_goto_XY(2, 10);
 80017cc:	210a      	movs	r1, #10
 80017ce:	2002      	movs	r0, #2
 80017d0:	f004 fe40 	bl	8006454 <LCD_goto_XY>
    LCD_blink_cursor_on();
 80017d4:	f004 fe60 	bl	8006498 <LCD_blink_cursor_on>

    if (HAL_GPIO_ReadPin(GPIOA, BUTTON_INCREASE) == PRESS_BUTTON)
 80017d8:	2102      	movs	r1, #2
 80017da:	482e      	ldr	r0, [pc, #184]	@ (8001894 <SetModeAlarmHandler+0x110>)
 80017dc:	f001 f8b2 	bl	8002944 <HAL_GPIO_ReadPin>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d11e      	bne.n	8001824 <SetModeAlarmHandler+0xa0>
    {
    	 HAL_Delay(40);
 80017e6:	2028      	movs	r0, #40	@ 0x28
 80017e8:	f000 fd44 	bl	8002274 <HAL_Delay>
         while(HAL_GPIO_ReadPin(GPIOA, BUTTON_INCREASE) == PRESS_BUTTON);
 80017ec:	bf00      	nop
 80017ee:	2102      	movs	r1, #2
 80017f0:	4828      	ldr	r0, [pc, #160]	@ (8001894 <SetModeAlarmHandler+0x110>)
 80017f2:	f001 f8a7 	bl	8002944 <HAL_GPIO_ReadPin>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0f8      	beq.n	80017ee <SetModeAlarmHandler+0x6a>

         checkAlarmStatus++;
 80017fc:	4b21      	ldr	r3, [pc, #132]	@ (8001884 <SetModeAlarmHandler+0x100>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	3301      	adds	r3, #1
 8001802:	b2da      	uxtb	r2, r3
 8001804:	4b1f      	ldr	r3, [pc, #124]	@ (8001884 <SetModeAlarmHandler+0x100>)
 8001806:	701a      	strb	r2, [r3, #0]
         if (checkAlarmStatus > ON_ALARM)
 8001808:	4b1e      	ldr	r3, [pc, #120]	@ (8001884 <SetModeAlarmHandler+0x100>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d902      	bls.n	8001816 <SetModeAlarmHandler+0x92>
         {
        	 checkAlarmStatus = OFF_ALARM;
 8001810:	4b1c      	ldr	r3, [pc, #112]	@ (8001884 <SetModeAlarmHandler+0x100>)
 8001812:	2200      	movs	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]
         }
         ModeAlarmHandling(checkAlarmStatus);
 8001816:	4b1b      	ldr	r3, [pc, #108]	@ (8001884 <SetModeAlarmHandler+0x100>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff f9ee 	bl	8000bfc <ModeAlarmHandling>
         LCD_blink_cursor_off();
 8001820:	f004 fe41 	bl	80064a6 <LCD_blink_cursor_off>
     }

     if (HAL_GPIO_ReadPin(GPIOA, BUTTON_REDUCE) == PRESS_BUTTON)
 8001824:	2104      	movs	r1, #4
 8001826:	481b      	ldr	r0, [pc, #108]	@ (8001894 <SetModeAlarmHandler+0x110>)
 8001828:	f001 f88c 	bl	8002944 <HAL_GPIO_ReadPin>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d11f      	bne.n	8001872 <SetModeAlarmHandler+0xee>
     {
         HAL_Delay(40);
 8001832:	2028      	movs	r0, #40	@ 0x28
 8001834:	f000 fd1e 	bl	8002274 <HAL_Delay>
         while(HAL_GPIO_ReadPin(GPIOA, BUTTON_REDUCE) == PRESS_BUTTON);
 8001838:	bf00      	nop
 800183a:	2104      	movs	r1, #4
 800183c:	4815      	ldr	r0, [pc, #84]	@ (8001894 <SetModeAlarmHandler+0x110>)
 800183e:	f001 f881 	bl	8002944 <HAL_GPIO_ReadPin>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0f8      	beq.n	800183a <SetModeAlarmHandler+0xb6>
         if (checkAlarmStatus == OFF_ALARM)
 8001848:	4b0e      	ldr	r3, [pc, #56]	@ (8001884 <SetModeAlarmHandler+0x100>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d103      	bne.n	8001858 <SetModeAlarmHandler+0xd4>
         {
        	 checkAlarmStatus = ON_ALARM;
 8001850:	4b0c      	ldr	r3, [pc, #48]	@ (8001884 <SetModeAlarmHandler+0x100>)
 8001852:	2201      	movs	r2, #1
 8001854:	701a      	strb	r2, [r3, #0]
 8001856:	e005      	b.n	8001864 <SetModeAlarmHandler+0xe0>
         }
         else
         {
        	 checkAlarmStatus--;
 8001858:	4b0a      	ldr	r3, [pc, #40]	@ (8001884 <SetModeAlarmHandler+0x100>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	3b01      	subs	r3, #1
 800185e:	b2da      	uxtb	r2, r3
 8001860:	4b08      	ldr	r3, [pc, #32]	@ (8001884 <SetModeAlarmHandler+0x100>)
 8001862:	701a      	strb	r2, [r3, #0]
         }
         ModeAlarmHandling(checkAlarmStatus);
 8001864:	4b07      	ldr	r3, [pc, #28]	@ (8001884 <SetModeAlarmHandler+0x100>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff f9c7 	bl	8000bfc <ModeAlarmHandling>
         LCD_blink_cursor_off();
 800186e:	f004 fe1a 	bl	80064a6 <LCD_blink_cursor_off>
      }
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	08006f28 	.word	0x08006f28
 800187c:	2000025c 	.word	0x2000025c
 8001880:	2000025d 	.word	0x2000025d
 8001884:	2000025e 	.word	0x2000025e
 8001888:	20000020 	.word	0x20000020
 800188c:	08006f34 	.word	0x08006f34
 8001890:	20000244 	.word	0x20000244
 8001894:	40010800 	.word	0x40010800

08001898 <HandleClockStateMachine>:
 *
 * @note   This function should be called periodically in the main loop or a task.
 *
 */
void HandleClockStateMachine(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af02      	add	r7, sp, #8
	switch (currentClock) {
 800189e:	4bb7      	ldr	r3, [pc, #732]	@ (8001b7c <HandleClockStateMachine+0x2e4>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b0a      	cmp	r3, #10
 80018a4:	f200 81bb 	bhi.w	8001c1e <HandleClockStateMachine+0x386>
 80018a8:	a201      	add	r2, pc, #4	@ (adr r2, 80018b0 <HandleClockStateMachine+0x18>)
 80018aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ae:	bf00      	nop
 80018b0:	080018dd 	.word	0x080018dd
 80018b4:	08001961 	.word	0x08001961
 80018b8:	08001993 	.word	0x08001993
 80018bc:	080019c5 	.word	0x080019c5
 80018c0:	08001a29 	.word	0x08001a29
 80018c4:	08001a5b 	.word	0x08001a5b
 80018c8:	08001a8d 	.word	0x08001a8d
 80018cc:	08001abf 	.word	0x08001abf
 80018d0:	08001b13 	.word	0x08001b13
 80018d4:	08001b47 	.word	0x08001b47
 80018d8:	08001bad 	.word	0x08001bad
		case STATE_DISPLAY:
			uint32_t currentDisplayMillis = HAL_GetTick();
 80018dc:	f000 fcc0 	bl	8002260 <HAL_GetTick>
 80018e0:	6078      	str	r0, [r7, #4]
			static uint32_t previousDisplayMillis = 0;

			if (currentDisplayMillis - previousDisplayMillis >= 1000)
 80018e2:	4ba7      	ldr	r3, [pc, #668]	@ (8001b80 <HandleClockStateMachine+0x2e8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80018ee:	d304      	bcc.n	80018fa <HandleClockStateMachine+0x62>
			{
				previousDisplayMillis = currentDisplayMillis;
 80018f0:	4aa3      	ldr	r2, [pc, #652]	@ (8001b80 <HandleClockStateMachine+0x2e8>)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6013      	str	r3, [r2, #0]
				DisplayClockHandler();
 80018f6:	f7ff f999 	bl	8000c2c <DisplayClockHandler>
			}


		    if (HAL_GPIO_ReadPin(GPIOA, BUTTON_MODE) == PRESS_BUTTON)
 80018fa:	2108      	movs	r1, #8
 80018fc:	48a1      	ldr	r0, [pc, #644]	@ (8001b84 <HandleClockStateMachine+0x2ec>)
 80018fe:	f001 f821 	bl	8002944 <HAL_GPIO_ReadPin>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	f040 8175 	bne.w	8001bf4 <HandleClockStateMachine+0x35c>
		    {
		        HAL_Delay(40);
 800190a:	2028      	movs	r0, #40	@ 0x28
 800190c:	f000 fcb2 	bl	8002274 <HAL_Delay>
		        while(HAL_GPIO_ReadPin(GPIOA, BUTTON_MODE) == PRESS_BUTTON);
 8001910:	bf00      	nop
 8001912:	2108      	movs	r1, #8
 8001914:	489b      	ldr	r0, [pc, #620]	@ (8001b84 <HandleClockStateMachine+0x2ec>)
 8001916:	f001 f815 	bl	8002944 <HAL_GPIO_ReadPin>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0f8      	beq.n	8001912 <HandleClockStateMachine+0x7a>
		        currentClock = STATE_SET_HOUR;
 8001920:	4b96      	ldr	r3, [pc, #600]	@ (8001b7c <HandleClockStateMachine+0x2e4>)
 8001922:	2201      	movs	r2, #1
 8001924:	701a      	strb	r2, [r3, #0]

		    	// Trước khi cài đặt thì lấy thời gian hiện tại chứ ko phải là thời gian lần đầu lấy ở init();
		    	hourBuffer = DS3231_Time.Hour;
 8001926:	4b98      	ldr	r3, [pc, #608]	@ (8001b88 <HandleClockStateMachine+0x2f0>)
 8001928:	799a      	ldrb	r2, [r3, #6]
 800192a:	4b98      	ldr	r3, [pc, #608]	@ (8001b8c <HandleClockStateMachine+0x2f4>)
 800192c:	701a      	strb	r2, [r3, #0]
		    	minuteBuffer = DS3231_Time.Minutes;
 800192e:	4b96      	ldr	r3, [pc, #600]	@ (8001b88 <HandleClockStateMachine+0x2f0>)
 8001930:	795a      	ldrb	r2, [r3, #5]
 8001932:	4b97      	ldr	r3, [pc, #604]	@ (8001b90 <HandleClockStateMachine+0x2f8>)
 8001934:	701a      	strb	r2, [r3, #0]
		    	secondBuffer = DS3231_Time.Seconds;
 8001936:	4b94      	ldr	r3, [pc, #592]	@ (8001b88 <HandleClockStateMachine+0x2f0>)
 8001938:	791a      	ldrb	r2, [r3, #4]
 800193a:	4b96      	ldr	r3, [pc, #600]	@ (8001b94 <HandleClockStateMachine+0x2fc>)
 800193c:	701a      	strb	r2, [r3, #0]
		        dayBuffer = DS3231_Date.Day;
 800193e:	4b96      	ldr	r3, [pc, #600]	@ (8001b98 <HandleClockStateMachine+0x300>)
 8001940:	79da      	ldrb	r2, [r3, #7]
 8001942:	4b96      	ldr	r3, [pc, #600]	@ (8001b9c <HandleClockStateMachine+0x304>)
 8001944:	701a      	strb	r2, [r3, #0]
		        dateBuffer = DS3231_Date.Date;
 8001946:	4b94      	ldr	r3, [pc, #592]	@ (8001b98 <HandleClockStateMachine+0x300>)
 8001948:	7a1a      	ldrb	r2, [r3, #8]
 800194a:	4b95      	ldr	r3, [pc, #596]	@ (8001ba0 <HandleClockStateMachine+0x308>)
 800194c:	701a      	strb	r2, [r3, #0]
		        monthBuffer = DS3231_Date.Month;
 800194e:	4b92      	ldr	r3, [pc, #584]	@ (8001b98 <HandleClockStateMachine+0x300>)
 8001950:	7a5a      	ldrb	r2, [r3, #9]
 8001952:	4b94      	ldr	r3, [pc, #592]	@ (8001ba4 <HandleClockStateMachine+0x30c>)
 8001954:	701a      	strb	r2, [r3, #0]
		        yearBuffer = DS3231_Date.Year;
 8001956:	4b90      	ldr	r3, [pc, #576]	@ (8001b98 <HandleClockStateMachine+0x300>)
 8001958:	7a9a      	ldrb	r2, [r3, #10]
 800195a:	4b93      	ldr	r3, [pc, #588]	@ (8001ba8 <HandleClockStateMachine+0x310>)
 800195c:	701a      	strb	r2, [r3, #0]
		    }

			break;
 800195e:	e149      	b.n	8001bf4 <HandleClockStateMachine+0x35c>

		case STATE_SET_HOUR:
			SetHourHandler();
 8001960:	f7ff f9b0 	bl	8000cc4 <SetHourHandler>
		    if (HAL_GPIO_ReadPin(GPIOA, BUTTON_MODE) == PRESS_BUTTON)
 8001964:	2108      	movs	r1, #8
 8001966:	4887      	ldr	r0, [pc, #540]	@ (8001b84 <HandleClockStateMachine+0x2ec>)
 8001968:	f000 ffec 	bl	8002944 <HAL_GPIO_ReadPin>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	f040 8142 	bne.w	8001bf8 <HandleClockStateMachine+0x360>
		    {
		        HAL_Delay(40);
 8001974:	2028      	movs	r0, #40	@ 0x28
 8001976:	f000 fc7d 	bl	8002274 <HAL_Delay>
		        while(HAL_GPIO_ReadPin(GPIOA, BUTTON_MODE) == PRESS_BUTTON);
 800197a:	bf00      	nop
 800197c:	2108      	movs	r1, #8
 800197e:	4881      	ldr	r0, [pc, #516]	@ (8001b84 <HandleClockStateMachine+0x2ec>)
 8001980:	f000 ffe0 	bl	8002944 <HAL_GPIO_ReadPin>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f8      	beq.n	800197c <HandleClockStateMachine+0xe4>
		        currentClock = STATE_SET_MINUTE;
 800198a:	4b7c      	ldr	r3, [pc, #496]	@ (8001b7c <HandleClockStateMachine+0x2e4>)
 800198c:	2202      	movs	r2, #2
 800198e:	701a      	strb	r2, [r3, #0]
		    }
			break;
 8001990:	e132      	b.n	8001bf8 <HandleClockStateMachine+0x360>

		case STATE_SET_MINUTE:
			SetMinuteHandler();
 8001992:	f7ff fa35 	bl	8000e00 <SetMinuteHandler>
		    if (HAL_GPIO_ReadPin(GPIOA, BUTTON_MODE) == PRESS_BUTTON)
 8001996:	2108      	movs	r1, #8
 8001998:	487a      	ldr	r0, [pc, #488]	@ (8001b84 <HandleClockStateMachine+0x2ec>)
 800199a:	f000 ffd3 	bl	8002944 <HAL_GPIO_ReadPin>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f040 812b 	bne.w	8001bfc <HandleClockStateMachine+0x364>
		    {
		        HAL_Delay(40);
 80019a6:	2028      	movs	r0, #40	@ 0x28
 80019a8:	f000 fc64 	bl	8002274 <HAL_Delay>
		        while(HAL_GPIO_ReadPin(GPIOA, BUTTON_MODE) == PRESS_BUTTON);
 80019ac:	bf00      	nop
 80019ae:	2108      	movs	r1, #8
 80019b0:	4874      	ldr	r0, [pc, #464]	@ (8001b84 <HandleClockStateMachine+0x2ec>)
 80019b2:	f000 ffc7 	bl	8002944 <HAL_GPIO_ReadPin>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0f8      	beq.n	80019ae <HandleClockStateMachine+0x116>
		        currentClock = STATE_SET_SECOND;
 80019bc:	4b6f      	ldr	r3, [pc, #444]	@ (8001b7c <HandleClockStateMachine+0x2e4>)
 80019be:	2203      	movs	r2, #3
 80019c0:	701a      	strb	r2, [r3, #0]
		    }
			break;
 80019c2:	e11b      	b.n	8001bfc <HandleClockStateMachine+0x364>

		case STATE_SET_SECOND:
			SetSecondHandler();
 80019c4:	f7ff faba 	bl	8000f3c <SetSecondHandler>
		    if (HAL_GPIO_ReadPin(GPIOA, BUTTON_MODE) == PRESS_BUTTON)
 80019c8:	2108      	movs	r1, #8
 80019ca:	486e      	ldr	r0, [pc, #440]	@ (8001b84 <HandleClockStateMachine+0x2ec>)
 80019cc:	f000 ffba 	bl	8002944 <HAL_GPIO_ReadPin>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f040 8114 	bne.w	8001c00 <HandleClockStateMachine+0x368>
		    {
		        HAL_Delay(40);
 80019d8:	2028      	movs	r0, #40	@ 0x28
 80019da:	f000 fc4b 	bl	8002274 <HAL_Delay>
		        while(HAL_GPIO_ReadPin(GPIOA, BUTTON_MODE) == PRESS_BUTTON);
 80019de:	bf00      	nop
 80019e0:	2108      	movs	r1, #8
 80019e2:	4868      	ldr	r0, [pc, #416]	@ (8001b84 <HandleClockStateMachine+0x2ec>)
 80019e4:	f000 ffae 	bl	8002944 <HAL_GPIO_ReadPin>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f8      	beq.n	80019e0 <HandleClockStateMachine+0x148>
		        DS3231_SetTime(&DS3231_Time, hourBuffer, minuteBuffer, secondBuffer);	//Chốt Giờ-phút-giây
 80019ee:	4b67      	ldr	r3, [pc, #412]	@ (8001b8c <HandleClockStateMachine+0x2f4>)
 80019f0:	7819      	ldrb	r1, [r3, #0]
 80019f2:	4b67      	ldr	r3, [pc, #412]	@ (8001b90 <HandleClockStateMachine+0x2f8>)
 80019f4:	781a      	ldrb	r2, [r3, #0]
 80019f6:	4b67      	ldr	r3, [pc, #412]	@ (8001b94 <HandleClockStateMachine+0x2fc>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	4863      	ldr	r0, [pc, #396]	@ (8001b88 <HandleClockStateMachine+0x2f0>)
 80019fc:	f004 fa53 	bl	8005ea6 <DS3231_SetTime>
		        currentClock = STATE_SET_YEAR;
 8001a00:	4b5e      	ldr	r3, [pc, #376]	@ (8001b7c <HandleClockStateMachine+0x2e4>)
 8001a02:	2204      	movs	r2, #4
 8001a04:	701a      	strb	r2, [r3, #0]
		        // Trước khi set date thì lấy thời gian hiện tại đang chạy cái đã
		        dayBuffer = DS3231_Date.Day;
 8001a06:	4b64      	ldr	r3, [pc, #400]	@ (8001b98 <HandleClockStateMachine+0x300>)
 8001a08:	79da      	ldrb	r2, [r3, #7]
 8001a0a:	4b64      	ldr	r3, [pc, #400]	@ (8001b9c <HandleClockStateMachine+0x304>)
 8001a0c:	701a      	strb	r2, [r3, #0]
		        dateBuffer = DS3231_Date.Date;
 8001a0e:	4b62      	ldr	r3, [pc, #392]	@ (8001b98 <HandleClockStateMachine+0x300>)
 8001a10:	7a1a      	ldrb	r2, [r3, #8]
 8001a12:	4b63      	ldr	r3, [pc, #396]	@ (8001ba0 <HandleClockStateMachine+0x308>)
 8001a14:	701a      	strb	r2, [r3, #0]
		        monthBuffer = DS3231_Date.Month;
 8001a16:	4b60      	ldr	r3, [pc, #384]	@ (8001b98 <HandleClockStateMachine+0x300>)
 8001a18:	7a5a      	ldrb	r2, [r3, #9]
 8001a1a:	4b62      	ldr	r3, [pc, #392]	@ (8001ba4 <HandleClockStateMachine+0x30c>)
 8001a1c:	701a      	strb	r2, [r3, #0]
		        yearBuffer = DS3231_Date.Year;
 8001a1e:	4b5e      	ldr	r3, [pc, #376]	@ (8001b98 <HandleClockStateMachine+0x300>)
 8001a20:	7a9a      	ldrb	r2, [r3, #10]
 8001a22:	4b61      	ldr	r3, [pc, #388]	@ (8001ba8 <HandleClockStateMachine+0x310>)
 8001a24:	701a      	strb	r2, [r3, #0]
		    }
			break;
 8001a26:	e0eb      	b.n	8001c00 <HandleClockStateMachine+0x368>

		case STATE_SET_YEAR:
			SetYearHandler();
 8001a28:	f7ff fb26 	bl	8001078 <SetYearHandler>
		    if (HAL_GPIO_ReadPin(GPIOA, BUTTON_MODE) == PRESS_BUTTON)
 8001a2c:	2108      	movs	r1, #8
 8001a2e:	4855      	ldr	r0, [pc, #340]	@ (8001b84 <HandleClockStateMachine+0x2ec>)
 8001a30:	f000 ff88 	bl	8002944 <HAL_GPIO_ReadPin>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f040 80e4 	bne.w	8001c04 <HandleClockStateMachine+0x36c>
		    {
		        HAL_Delay(40);
 8001a3c:	2028      	movs	r0, #40	@ 0x28
 8001a3e:	f000 fc19 	bl	8002274 <HAL_Delay>
		        while(HAL_GPIO_ReadPin(GPIOA, BUTTON_MODE) == PRESS_BUTTON);
 8001a42:	bf00      	nop
 8001a44:	2108      	movs	r1, #8
 8001a46:	484f      	ldr	r0, [pc, #316]	@ (8001b84 <HandleClockStateMachine+0x2ec>)
 8001a48:	f000 ff7c 	bl	8002944 <HAL_GPIO_ReadPin>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f8      	beq.n	8001a44 <HandleClockStateMachine+0x1ac>
		        currentClock = STATE_SET_MONTH;
 8001a52:	4b4a      	ldr	r3, [pc, #296]	@ (8001b7c <HandleClockStateMachine+0x2e4>)
 8001a54:	2205      	movs	r2, #5
 8001a56:	701a      	strb	r2, [r3, #0]
		    }
			break;
 8001a58:	e0d4      	b.n	8001c04 <HandleClockStateMachine+0x36c>

		case STATE_SET_MONTH:
			SetMonthHandler();
 8001a5a:	f7ff fbab 	bl	80011b4 <SetMonthHandler>
		    if (HAL_GPIO_ReadPin(GPIOA, BUTTON_MODE) == PRESS_BUTTON)
 8001a5e:	2108      	movs	r1, #8
 8001a60:	4848      	ldr	r0, [pc, #288]	@ (8001b84 <HandleClockStateMachine+0x2ec>)
 8001a62:	f000 ff6f 	bl	8002944 <HAL_GPIO_ReadPin>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f040 80cd 	bne.w	8001c08 <HandleClockStateMachine+0x370>
		    {
		        HAL_Delay(40);
 8001a6e:	2028      	movs	r0, #40	@ 0x28
 8001a70:	f000 fc00 	bl	8002274 <HAL_Delay>
		        while(HAL_GPIO_ReadPin(GPIOA, BUTTON_MODE) == PRESS_BUTTON);
 8001a74:	bf00      	nop
 8001a76:	2108      	movs	r1, #8
 8001a78:	4842      	ldr	r0, [pc, #264]	@ (8001b84 <HandleClockStateMachine+0x2ec>)
 8001a7a:	f000 ff63 	bl	8002944 <HAL_GPIO_ReadPin>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0f8      	beq.n	8001a76 <HandleClockStateMachine+0x1de>
		        currentClock = STATE_SET_DATE;
 8001a84:	4b3d      	ldr	r3, [pc, #244]	@ (8001b7c <HandleClockStateMachine+0x2e4>)
 8001a86:	2206      	movs	r2, #6
 8001a88:	701a      	strb	r2, [r3, #0]
		    }
			break;
 8001a8a:	e0bd      	b.n	8001c08 <HandleClockStateMachine+0x370>

		case STATE_SET_DATE:
			SetDateHandler();
 8001a8c:	f7ff fc30 	bl	80012f0 <SetDateHandler>
		    if (HAL_GPIO_ReadPin(GPIOA, BUTTON_MODE) == PRESS_BUTTON)
 8001a90:	2108      	movs	r1, #8
 8001a92:	483c      	ldr	r0, [pc, #240]	@ (8001b84 <HandleClockStateMachine+0x2ec>)
 8001a94:	f000 ff56 	bl	8002944 <HAL_GPIO_ReadPin>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f040 80b6 	bne.w	8001c0c <HandleClockStateMachine+0x374>
		    {
		        HAL_Delay(40);
 8001aa0:	2028      	movs	r0, #40	@ 0x28
 8001aa2:	f000 fbe7 	bl	8002274 <HAL_Delay>
		        while(HAL_GPIO_ReadPin(GPIOA, BUTTON_MODE) == PRESS_BUTTON);
 8001aa6:	bf00      	nop
 8001aa8:	2108      	movs	r1, #8
 8001aaa:	4836      	ldr	r0, [pc, #216]	@ (8001b84 <HandleClockStateMachine+0x2ec>)
 8001aac:	f000 ff4a 	bl	8002944 <HAL_GPIO_ReadPin>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0f8      	beq.n	8001aa8 <HandleClockStateMachine+0x210>
		        currentClock = STATE_SET_DAY;
 8001ab6:	4b31      	ldr	r3, [pc, #196]	@ (8001b7c <HandleClockStateMachine+0x2e4>)
 8001ab8:	2207      	movs	r2, #7
 8001aba:	701a      	strb	r2, [r3, #0]
		    }
			break;
 8001abc:	e0a6      	b.n	8001c0c <HandleClockStateMachine+0x374>

		case STATE_SET_DAY:
			SetDayHandler();
 8001abe:	f7ff fcc3 	bl	8001448 <SetDayHandler>
		    if (HAL_GPIO_ReadPin(GPIOA, BUTTON_MODE) == PRESS_BUTTON)
 8001ac2:	2108      	movs	r1, #8
 8001ac4:	482f      	ldr	r0, [pc, #188]	@ (8001b84 <HandleClockStateMachine+0x2ec>)
 8001ac6:	f000 ff3d 	bl	8002944 <HAL_GPIO_ReadPin>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f040 809f 	bne.w	8001c10 <HandleClockStateMachine+0x378>
		    {
		        HAL_Delay(40);
 8001ad2:	2028      	movs	r0, #40	@ 0x28
 8001ad4:	f000 fbce 	bl	8002274 <HAL_Delay>
		        while(HAL_GPIO_ReadPin(GPIOA, BUTTON_MODE) == PRESS_BUTTON);
 8001ad8:	bf00      	nop
 8001ada:	2108      	movs	r1, #8
 8001adc:	4829      	ldr	r0, [pc, #164]	@ (8001b84 <HandleClockStateMachine+0x2ec>)
 8001ade:	f000 ff31 	bl	8002944 <HAL_GPIO_ReadPin>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f8      	beq.n	8001ada <HandleClockStateMachine+0x242>
		        DS3231_SetDate(&DS3231_Date, dayBuffer, dateBuffer, monthBuffer, yearBuffer);	// Chốt thứ - ngày - tháng - năm
 8001ae8:	4b2c      	ldr	r3, [pc, #176]	@ (8001b9c <HandleClockStateMachine+0x304>)
 8001aea:	7819      	ldrb	r1, [r3, #0]
 8001aec:	4b2c      	ldr	r3, [pc, #176]	@ (8001ba0 <HandleClockStateMachine+0x308>)
 8001aee:	781a      	ldrb	r2, [r3, #0]
 8001af0:	4b2c      	ldr	r3, [pc, #176]	@ (8001ba4 <HandleClockStateMachine+0x30c>)
 8001af2:	7818      	ldrb	r0, [r3, #0]
 8001af4:	4b2c      	ldr	r3, [pc, #176]	@ (8001ba8 <HandleClockStateMachine+0x310>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	4603      	mov	r3, r0
 8001afc:	4826      	ldr	r0, [pc, #152]	@ (8001b98 <HandleClockStateMachine+0x300>)
 8001afe:	f004 fa2f 	bl	8005f60 <DS3231_SetDate>
		        LCD_blink_cursor_off();		// Tắt con trỏ nhấp nháy
 8001b02:	f004 fcd0 	bl	80064a6 <LCD_blink_cursor_off>
		        currentClock = STATE_SET_HOUR_ALARM;
 8001b06:	4b1d      	ldr	r3, [pc, #116]	@ (8001b7c <HandleClockStateMachine+0x2e4>)
 8001b08:	2208      	movs	r2, #8
 8001b0a:	701a      	strb	r2, [r3, #0]
		        LCD_clear_display(); // Xóa trước khi qua set alarm
 8001b0c:	f004 fc9b 	bl	8006446 <LCD_clear_display>
		    }
			break;
 8001b10:	e07e      	b.n	8001c10 <HandleClockStateMachine+0x378>

		case STATE_SET_HOUR_ALARM:
			SetHourAlarmHandler();
 8001b12:	f7ff fd37 	bl	8001584 <SetHourAlarmHandler>
		    if (HAL_GPIO_ReadPin(GPIOA, BUTTON_MODE) == PRESS_BUTTON)
 8001b16:	2108      	movs	r1, #8
 8001b18:	481a      	ldr	r0, [pc, #104]	@ (8001b84 <HandleClockStateMachine+0x2ec>)
 8001b1a:	f000 ff13 	bl	8002944 <HAL_GPIO_ReadPin>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d177      	bne.n	8001c14 <HandleClockStateMachine+0x37c>
		    {
		        HAL_Delay(40);
 8001b24:	2028      	movs	r0, #40	@ 0x28
 8001b26:	f000 fba5 	bl	8002274 <HAL_Delay>
		        while(HAL_GPIO_ReadPin(GPIOA, BUTTON_MODE) == PRESS_BUTTON);
 8001b2a:	bf00      	nop
 8001b2c:	2108      	movs	r1, #8
 8001b2e:	4815      	ldr	r0, [pc, #84]	@ (8001b84 <HandleClockStateMachine+0x2ec>)
 8001b30:	f000 ff08 	bl	8002944 <HAL_GPIO_ReadPin>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f8      	beq.n	8001b2c <HandleClockStateMachine+0x294>
		        LCD_blink_cursor_off();		// Tắt con trỏ nhấp nháy
 8001b3a:	f004 fcb4 	bl	80064a6 <LCD_blink_cursor_off>
		        currentClock = STATE_SET_MINUTE_ALARM;
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b7c <HandleClockStateMachine+0x2e4>)
 8001b40:	2209      	movs	r2, #9
 8001b42:	701a      	strb	r2, [r3, #0]
		    }
			break;
 8001b44:	e066      	b.n	8001c14 <HandleClockStateMachine+0x37c>

		case STATE_SET_MINUTE_ALARM:
			SetMinuteAlarmHandler();
 8001b46:	f7ff fd9d 	bl	8001684 <SetMinuteAlarmHandler>
		    if (HAL_GPIO_ReadPin(GPIOA, BUTTON_MODE) == PRESS_BUTTON)
 8001b4a:	2108      	movs	r1, #8
 8001b4c:	480d      	ldr	r0, [pc, #52]	@ (8001b84 <HandleClockStateMachine+0x2ec>)
 8001b4e:	f000 fef9 	bl	8002944 <HAL_GPIO_ReadPin>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d15f      	bne.n	8001c18 <HandleClockStateMachine+0x380>
		    {
		        HAL_Delay(40);
 8001b58:	2028      	movs	r0, #40	@ 0x28
 8001b5a:	f000 fb8b 	bl	8002274 <HAL_Delay>
		        while(HAL_GPIO_ReadPin(GPIOA, BUTTON_MODE) == PRESS_BUTTON);
 8001b5e:	bf00      	nop
 8001b60:	2108      	movs	r1, #8
 8001b62:	4808      	ldr	r0, [pc, #32]	@ (8001b84 <HandleClockStateMachine+0x2ec>)
 8001b64:	f000 feee 	bl	8002944 <HAL_GPIO_ReadPin>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0f8      	beq.n	8001b60 <HandleClockStateMachine+0x2c8>
		        LCD_blink_cursor_off();		// Tắt con trỏ nhấp nháy
 8001b6e:	f004 fc9a 	bl	80064a6 <LCD_blink_cursor_off>
		        currentClock = STATE_SET_MODE_ALARM;
 8001b72:	4b02      	ldr	r3, [pc, #8]	@ (8001b7c <HandleClockStateMachine+0x2e4>)
 8001b74:	220a      	movs	r2, #10
 8001b76:	701a      	strb	r2, [r3, #0]
		    }
			break;
 8001b78:	e04e      	b.n	8001c18 <HandleClockStateMachine+0x380>
 8001b7a:	bf00      	nop
 8001b7c:	20000264 	.word	0x20000264
 8001b80:	20000284 	.word	0x20000284
 8001b84:	40010800 	.word	0x40010800
 8001b88:	200001d8 	.word	0x200001d8
 8001b8c:	20000255 	.word	0x20000255
 8001b90:	20000256 	.word	0x20000256
 8001b94:	20000257 	.word	0x20000257
 8001b98:	200001f4 	.word	0x200001f4
 8001b9c:	20000258 	.word	0x20000258
 8001ba0:	20000259 	.word	0x20000259
 8001ba4:	2000025a 	.word	0x2000025a
 8001ba8:	2000025b 	.word	0x2000025b

		case STATE_SET_MODE_ALARM:
			SetModeAlarmHandler();
 8001bac:	f7ff fdea 	bl	8001784 <SetModeAlarmHandler>
		    if (HAL_GPIO_ReadPin(GPIOA, BUTTON_MODE) == PRESS_BUTTON)
 8001bb0:	2108      	movs	r1, #8
 8001bb2:	481d      	ldr	r0, [pc, #116]	@ (8001c28 <HandleClockStateMachine+0x390>)
 8001bb4:	f000 fec6 	bl	8002944 <HAL_GPIO_ReadPin>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d12e      	bne.n	8001c1c <HandleClockStateMachine+0x384>
		    {
		        HAL_Delay(40);
 8001bbe:	2028      	movs	r0, #40	@ 0x28
 8001bc0:	f000 fb58 	bl	8002274 <HAL_Delay>
		        while(HAL_GPIO_ReadPin(GPIOA, BUTTON_MODE) == PRESS_BUTTON);
 8001bc4:	bf00      	nop
 8001bc6:	2108      	movs	r1, #8
 8001bc8:	4817      	ldr	r0, [pc, #92]	@ (8001c28 <HandleClockStateMachine+0x390>)
 8001bca:	f000 febb 	bl	8002944 <HAL_GPIO_ReadPin>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0f8      	beq.n	8001bc6 <HandleClockStateMachine+0x32e>

		        DS3231_SetAlarm2(&DS3231_Alarm, hourAlarmBuffer, minuteAlarmBuffer);
 8001bd4:	4b15      	ldr	r3, [pc, #84]	@ (8001c2c <HandleClockStateMachine+0x394>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	4a15      	ldr	r2, [pc, #84]	@ (8001c30 <HandleClockStateMachine+0x398>)
 8001bda:	7812      	ldrb	r2, [r2, #0]
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4815      	ldr	r0, [pc, #84]	@ (8001c34 <HandleClockStateMachine+0x39c>)
 8001be0:	f004 fa65 	bl	80060ae <DS3231_SetAlarm2>
		        LCD_blink_cursor_off();		// Tắt con trỏ nhấp nháy
 8001be4:	f004 fc5f 	bl	80064a6 <LCD_blink_cursor_off>
		        currentClock = STATE_DISPLAY;
 8001be8:	4b13      	ldr	r3, [pc, #76]	@ (8001c38 <HandleClockStateMachine+0x3a0>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	701a      	strb	r2, [r3, #0]
		        LCD_clear_display(); // Xóa trước khi qua hiển thị từ đầu
 8001bee:	f004 fc2a 	bl	8006446 <LCD_clear_display>
		    }
			break;
 8001bf2:	e013      	b.n	8001c1c <HandleClockStateMachine+0x384>
			break;
 8001bf4:	bf00      	nop
 8001bf6:	e012      	b.n	8001c1e <HandleClockStateMachine+0x386>
			break;
 8001bf8:	bf00      	nop
 8001bfa:	e010      	b.n	8001c1e <HandleClockStateMachine+0x386>
			break;
 8001bfc:	bf00      	nop
 8001bfe:	e00e      	b.n	8001c1e <HandleClockStateMachine+0x386>
			break;
 8001c00:	bf00      	nop
 8001c02:	e00c      	b.n	8001c1e <HandleClockStateMachine+0x386>
			break;
 8001c04:	bf00      	nop
 8001c06:	e00a      	b.n	8001c1e <HandleClockStateMachine+0x386>
			break;
 8001c08:	bf00      	nop
 8001c0a:	e008      	b.n	8001c1e <HandleClockStateMachine+0x386>
			break;
 8001c0c:	bf00      	nop
 8001c0e:	e006      	b.n	8001c1e <HandleClockStateMachine+0x386>
			break;
 8001c10:	bf00      	nop
 8001c12:	e004      	b.n	8001c1e <HandleClockStateMachine+0x386>
			break;
 8001c14:	bf00      	nop
 8001c16:	e002      	b.n	8001c1e <HandleClockStateMachine+0x386>
			break;
 8001c18:	bf00      	nop
 8001c1a:	e000      	b.n	8001c1e <HandleClockStateMachine+0x386>
			break;
 8001c1c:	bf00      	nop
	}
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40010800 	.word	0x40010800
 8001c2c:	2000025c 	.word	0x2000025c
 8001c30:	2000025d 	.word	0x2000025d
 8001c34:	20000210 	.word	0x20000210
 8001c38:	20000264 	.word	0x20000264

08001c3c <EnergySavingProcessing>:
 *
 * @note   This function should be called periodically in the main loop or a task.
 *
 */
void EnergySavingProcessing(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
	static uint32_t currentBackLightMillis = 0;
	if ((currentClock == STATE_DISPLAY ) && (0 <= DS3231_Time.Hour && DS3231_Time.Hour < 5) && (HAL_GetTick() - currentBackLightMillis >= BACKLIGH_WAITING))
 8001c40:	4b20      	ldr	r3, [pc, #128]	@ (8001cc4 <EnergySavingProcessing+0x88>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d137      	bne.n	8001cb8 <EnergySavingProcessing+0x7c>
 8001c48:	4b1f      	ldr	r3, [pc, #124]	@ (8001cc8 <EnergySavingProcessing+0x8c>)
 8001c4a:	799b      	ldrb	r3, [r3, #6]
 8001c4c:	2b04      	cmp	r3, #4
 8001c4e:	d833      	bhi.n	8001cb8 <EnergySavingProcessing+0x7c>
 8001c50:	f000 fb06 	bl	8002260 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	4b1d      	ldr	r3, [pc, #116]	@ (8001ccc <EnergySavingProcessing+0x90>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d929      	bls.n	8001cb8 <EnergySavingProcessing+0x7c>
	{
		LCD_backlight_off();
 8001c64:	f004 fba0 	bl	80063a8 <LCD_backlight_off>
		if ((HAL_GPIO_ReadPin(GPIOA, BUTTON_INCREASE) == PRESS_BUTTON || HAL_GPIO_ReadPin(GPIOA, BUTTON_REDUCE) == PRESS_BUTTON))
 8001c68:	2102      	movs	r1, #2
 8001c6a:	4819      	ldr	r0, [pc, #100]	@ (8001cd0 <EnergySavingProcessing+0x94>)
 8001c6c:	f000 fe6a 	bl	8002944 <HAL_GPIO_ReadPin>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d006      	beq.n	8001c84 <EnergySavingProcessing+0x48>
 8001c76:	2104      	movs	r1, #4
 8001c78:	4815      	ldr	r0, [pc, #84]	@ (8001cd0 <EnergySavingProcessing+0x94>)
 8001c7a:	f000 fe63 	bl	8002944 <HAL_GPIO_ReadPin>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d11c      	bne.n	8001cbe <EnergySavingProcessing+0x82>
		{
			HAL_Delay(40);
 8001c84:	2028      	movs	r0, #40	@ 0x28
 8001c86:	f000 faf5 	bl	8002274 <HAL_Delay>
			while ((HAL_GPIO_ReadPin(GPIOA, BUTTON_INCREASE) == PRESS_BUTTON || HAL_GPIO_ReadPin(GPIOA, BUTTON_REDUCE) == PRESS_BUTTON));
 8001c8a:	bf00      	nop
 8001c8c:	2102      	movs	r1, #2
 8001c8e:	4810      	ldr	r0, [pc, #64]	@ (8001cd0 <EnergySavingProcessing+0x94>)
 8001c90:	f000 fe58 	bl	8002944 <HAL_GPIO_ReadPin>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0f8      	beq.n	8001c8c <EnergySavingProcessing+0x50>
 8001c9a:	2104      	movs	r1, #4
 8001c9c:	480c      	ldr	r0, [pc, #48]	@ (8001cd0 <EnergySavingProcessing+0x94>)
 8001c9e:	f000 fe51 	bl	8002944 <HAL_GPIO_ReadPin>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0f1      	beq.n	8001c8c <EnergySavingProcessing+0x50>

			LCD_backlight_on();
 8001ca8:	f004 fb72 	bl	8006390 <LCD_backlight_on>

			currentBackLightMillis = HAL_GetTick();
 8001cac:	f000 fad8 	bl	8002260 <HAL_GetTick>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4a06      	ldr	r2, [pc, #24]	@ (8001ccc <EnergySavingProcessing+0x90>)
 8001cb4:	6013      	str	r3, [r2, #0]
		if ((HAL_GPIO_ReadPin(GPIOA, BUTTON_INCREASE) == PRESS_BUTTON || HAL_GPIO_ReadPin(GPIOA, BUTTON_REDUCE) == PRESS_BUTTON))
 8001cb6:	e002      	b.n	8001cbe <EnergySavingProcessing+0x82>
		}
	}
	else
	{
		LCD_backlight_on();
 8001cb8:	f004 fb6a 	bl	8006390 <LCD_backlight_on>
	}
}
 8001cbc:	e000      	b.n	8001cc0 <EnergySavingProcessing+0x84>
		if ((HAL_GPIO_ReadPin(GPIOA, BUTTON_INCREASE) == PRESS_BUTTON || HAL_GPIO_ReadPin(GPIOA, BUTTON_REDUCE) == PRESS_BUTTON))
 8001cbe:	bf00      	nop
}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000264 	.word	0x20000264
 8001cc8:	200001d8 	.word	0x200001d8
 8001ccc:	20000288 	.word	0x20000288
 8001cd0:	40010800 	.word	0x40010800

08001cd4 <AlarmProcessing>:
 *
 * @note   This function should be called periodically in the main loop or a task.
 *
 */
void AlarmProcessing(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
	while (flagAlarm)
 8001cda:	e05c      	b.n	8001d96 <AlarmProcessing+0xc2>
	{
		LCD_backlight_on();
 8001cdc:	f004 fb58 	bl	8006390 <LCD_backlight_on>

		uint32_t currentAlarmMillis = HAL_GetTick();
 8001ce0:	f000 fabe 	bl	8002260 <HAL_GetTick>
 8001ce4:	6078      	str	r0, [r7, #4]
		static uint32_t previousAlarmMillis = 0;

		LCD_goto_XY(1, 4);
 8001ce6:	2104      	movs	r1, #4
 8001ce8:	2001      	movs	r0, #1
 8001cea:	f004 fbb3 	bl	8006454 <LCD_goto_XY>
		LCD_send_string("WAKE UP!");
 8001cee:	482e      	ldr	r0, [pc, #184]	@ (8001da8 <AlarmProcessing+0xd4>)
 8001cf0:	f004 fb94 	bl	800641c <LCD_send_string>
		LCD_goto_XY(2, 1);
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	2002      	movs	r0, #2
 8001cf8:	f004 fbac 	bl	8006454 <LCD_goto_XY>
		LCD_send_string("RISE AND SHINE");
 8001cfc:	482b      	ldr	r0, [pc, #172]	@ (8001dac <AlarmProcessing+0xd8>)
 8001cfe:	f004 fb8d 	bl	800641c <LCD_send_string>

		if (currentAlarmMillis - previousAlarmMillis >= (TIME_WAITING + ALARM_DELAY_TIME))
 8001d02:	4b2b      	ldr	r3, [pc, #172]	@ (8001db0 <AlarmProcessing+0xdc>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d905      	bls.n	8001d1e <AlarmProcessing+0x4a>
		{
			alarmSound();
 8001d12:	f7fe feed 	bl	8000af0 <alarmSound>
			previousAlarmMillis = currentAlarmMillis;
 8001d16:	4a26      	ldr	r2, [pc, #152]	@ (8001db0 <AlarmProcessing+0xdc>)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6013      	str	r3, [r2, #0]
 8001d1c:	e028      	b.n	8001d70 <AlarmProcessing+0x9c>
		}
		else
		{
			if ((HAL_GPIO_ReadPin(GPIOA, BUTTON_INCREASE) == PRESS_BUTTON || HAL_GPIO_ReadPin(GPIOA, BUTTON_REDUCE) == PRESS_BUTTON))
 8001d1e:	2102      	movs	r1, #2
 8001d20:	4824      	ldr	r0, [pc, #144]	@ (8001db4 <AlarmProcessing+0xe0>)
 8001d22:	f000 fe0f 	bl	8002944 <HAL_GPIO_ReadPin>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d006      	beq.n	8001d3a <AlarmProcessing+0x66>
 8001d2c:	2104      	movs	r1, #4
 8001d2e:	4821      	ldr	r0, [pc, #132]	@ (8001db4 <AlarmProcessing+0xe0>)
 8001d30:	f000 fe08 	bl	8002944 <HAL_GPIO_ReadPin>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d11a      	bne.n	8001d70 <AlarmProcessing+0x9c>
			{
				HAL_Delay(40);
 8001d3a:	2028      	movs	r0, #40	@ 0x28
 8001d3c:	f000 fa9a 	bl	8002274 <HAL_Delay>
				while ((HAL_GPIO_ReadPin(GPIOA, BUTTON_INCREASE) == PRESS_BUTTON || HAL_GPIO_ReadPin(GPIOA, BUTTON_REDUCE) == PRESS_BUTTON));
 8001d40:	bf00      	nop
 8001d42:	2102      	movs	r1, #2
 8001d44:	481b      	ldr	r0, [pc, #108]	@ (8001db4 <AlarmProcessing+0xe0>)
 8001d46:	f000 fdfd 	bl	8002944 <HAL_GPIO_ReadPin>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0f8      	beq.n	8001d42 <AlarmProcessing+0x6e>
 8001d50:	2104      	movs	r1, #4
 8001d52:	4818      	ldr	r0, [pc, #96]	@ (8001db4 <AlarmProcessing+0xe0>)
 8001d54:	f000 fdf6 	bl	8002944 <HAL_GPIO_ReadPin>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0f1      	beq.n	8001d42 <AlarmProcessing+0x6e>

				flagAlarm = 0;	// Clear Flag Alarm
 8001d5e:	4b16      	ldr	r3, [pc, #88]	@ (8001db8 <AlarmProcessing+0xe4>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
				LCD_clear_display();
 8001d64:	f004 fb6f 	bl	8006446 <LCD_clear_display>
				HAL_Delay(40);
 8001d68:	2028      	movs	r0, #40	@ 0x28
 8001d6a:	f000 fa83 	bl	8002274 <HAL_Delay>

				break; // Break out of the loop
 8001d6e:	e017      	b.n	8001da0 <AlarmProcessing+0xcc>
			}
		}

		if (HAL_GetTick() - alarmStartTime >= TIMEOUT_ALARM)
 8001d70:	f000 fa76 	bl	8002260 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	4b11      	ldr	r3, [pc, #68]	@ (8001dbc <AlarmProcessing+0xe8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d908      	bls.n	8001d96 <AlarmProcessing+0xc2>
		{
			flagAlarm = 0;
 8001d84:	4b0c      	ldr	r3, [pc, #48]	@ (8001db8 <AlarmProcessing+0xe4>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	701a      	strb	r2, [r3, #0]
			LCD_clear_display();
 8001d8a:	f004 fb5c 	bl	8006446 <LCD_clear_display>
			HAL_Delay(40);
 8001d8e:	2028      	movs	r0, #40	@ 0x28
 8001d90:	f000 fa70 	bl	8002274 <HAL_Delay>

			break;
 8001d94:	e004      	b.n	8001da0 <AlarmProcessing+0xcc>
	while (flagAlarm)
 8001d96:	4b08      	ldr	r3, [pc, #32]	@ (8001db8 <AlarmProcessing+0xe4>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d19e      	bne.n	8001cdc <AlarmProcessing+0x8>
		}
	}
}
 8001d9e:	bf00      	nop
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	08006f44 	.word	0x08006f44
 8001dac:	08006f50 	.word	0x08006f50
 8001db0:	2000028c 	.word	0x2000028c
 8001db4:	40010800 	.word	0x40010800
 8001db8:	2000025f 	.word	0x2000025f
 8001dbc:	20000260 	.word	0x20000260

08001dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc4:	b672      	cpsid	i
}
 8001dc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dc8:	bf00      	nop
 8001dca:	e7fd      	b.n	8001dc8 <Error_Handler+0x8>

08001dcc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001dd2:	4b15      	ldr	r3, [pc, #84]	@ (8001e28 <HAL_MspInit+0x5c>)
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	4a14      	ldr	r2, [pc, #80]	@ (8001e28 <HAL_MspInit+0x5c>)
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	6193      	str	r3, [r2, #24]
 8001dde:	4b12      	ldr	r3, [pc, #72]	@ (8001e28 <HAL_MspInit+0x5c>)
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dea:	4b0f      	ldr	r3, [pc, #60]	@ (8001e28 <HAL_MspInit+0x5c>)
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	4a0e      	ldr	r2, [pc, #56]	@ (8001e28 <HAL_MspInit+0x5c>)
 8001df0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001df4:	61d3      	str	r3, [r2, #28]
 8001df6:	4b0c      	ldr	r3, [pc, #48]	@ (8001e28 <HAL_MspInit+0x5c>)
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e02:	4b0a      	ldr	r3, [pc, #40]	@ (8001e2c <HAL_MspInit+0x60>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	4a04      	ldr	r2, [pc, #16]	@ (8001e2c <HAL_MspInit+0x60>)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40010000 	.word	0x40010000

08001e30 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08a      	sub	sp, #40	@ 0x28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e38:	f107 0318 	add.w	r3, r7, #24
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a2b      	ldr	r2, [pc, #172]	@ (8001ef8 <HAL_I2C_MspInit+0xc8>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d124      	bne.n	8001e9a <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e50:	4b2a      	ldr	r3, [pc, #168]	@ (8001efc <HAL_I2C_MspInit+0xcc>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	4a29      	ldr	r2, [pc, #164]	@ (8001efc <HAL_I2C_MspInit+0xcc>)
 8001e56:	f043 0308 	orr.w	r3, r3, #8
 8001e5a:	6193      	str	r3, [r2, #24]
 8001e5c:	4b27      	ldr	r3, [pc, #156]	@ (8001efc <HAL_I2C_MspInit+0xcc>)
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	f003 0308 	and.w	r3, r3, #8
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e68:	23c0      	movs	r3, #192	@ 0xc0
 8001e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e6c:	2312      	movs	r3, #18
 8001e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e70:	2303      	movs	r3, #3
 8001e72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e74:	f107 0318 	add.w	r3, r7, #24
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4821      	ldr	r0, [pc, #132]	@ (8001f00 <HAL_I2C_MspInit+0xd0>)
 8001e7c:	f000 fbde 	bl	800263c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e80:	4b1e      	ldr	r3, [pc, #120]	@ (8001efc <HAL_I2C_MspInit+0xcc>)
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	4a1d      	ldr	r2, [pc, #116]	@ (8001efc <HAL_I2C_MspInit+0xcc>)
 8001e86:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e8a:	61d3      	str	r3, [r2, #28]
 8001e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001efc <HAL_I2C_MspInit+0xcc>)
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e98:	e029      	b.n	8001eee <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a19      	ldr	r2, [pc, #100]	@ (8001f04 <HAL_I2C_MspInit+0xd4>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d124      	bne.n	8001eee <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea4:	4b15      	ldr	r3, [pc, #84]	@ (8001efc <HAL_I2C_MspInit+0xcc>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	4a14      	ldr	r2, [pc, #80]	@ (8001efc <HAL_I2C_MspInit+0xcc>)
 8001eaa:	f043 0308 	orr.w	r3, r3, #8
 8001eae:	6193      	str	r3, [r2, #24]
 8001eb0:	4b12      	ldr	r3, [pc, #72]	@ (8001efc <HAL_I2C_MspInit+0xcc>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	f003 0308 	and.w	r3, r3, #8
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ebc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ec2:	2312      	movs	r3, #18
 8001ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eca:	f107 0318 	add.w	r3, r7, #24
 8001ece:	4619      	mov	r1, r3
 8001ed0:	480b      	ldr	r0, [pc, #44]	@ (8001f00 <HAL_I2C_MspInit+0xd0>)
 8001ed2:	f000 fbb3 	bl	800263c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ed6:	4b09      	ldr	r3, [pc, #36]	@ (8001efc <HAL_I2C_MspInit+0xcc>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	4a08      	ldr	r2, [pc, #32]	@ (8001efc <HAL_I2C_MspInit+0xcc>)
 8001edc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ee0:	61d3      	str	r3, [r2, #28]
 8001ee2:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <HAL_I2C_MspInit+0xcc>)
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eea:	60bb      	str	r3, [r7, #8]
 8001eec:	68bb      	ldr	r3, [r7, #8]
}
 8001eee:	bf00      	nop
 8001ef0:	3728      	adds	r7, #40	@ 0x28
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40005400 	.word	0x40005400
 8001efc:	40021000 	.word	0x40021000
 8001f00:	40010c00 	.word	0x40010c00
 8001f04:	40005800 	.word	0x40005800

08001f08 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f18:	d10b      	bne.n	8001f32 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f1a:	4b08      	ldr	r3, [pc, #32]	@ (8001f3c <HAL_TIM_Base_MspInit+0x34>)
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	4a07      	ldr	r2, [pc, #28]	@ (8001f3c <HAL_TIM_Base_MspInit+0x34>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	61d3      	str	r3, [r2, #28]
 8001f26:	4b05      	ldr	r3, [pc, #20]	@ (8001f3c <HAL_TIM_Base_MspInit+0x34>)
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001f32:	bf00      	nop
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr
 8001f3c:	40021000 	.word	0x40021000

08001f40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 030c 	add.w	r3, r7, #12
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f5e:	d129      	bne.n	8001fb4 <HAL_TIM_MspPostInit+0x74>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f60:	4b16      	ldr	r3, [pc, #88]	@ (8001fbc <HAL_TIM_MspPostInit+0x7c>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	4a15      	ldr	r2, [pc, #84]	@ (8001fbc <HAL_TIM_MspPostInit+0x7c>)
 8001f66:	f043 0308 	orr.w	r3, r3, #8
 8001f6a:	6193      	str	r3, [r2, #24]
 8001f6c:	4b13      	ldr	r3, [pc, #76]	@ (8001fbc <HAL_TIM_MspPostInit+0x7c>)
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f78:	2308      	movs	r3, #8
 8001f7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f80:	2302      	movs	r3, #2
 8001f82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f84:	f107 030c 	add.w	r3, r7, #12
 8001f88:	4619      	mov	r1, r3
 8001f8a:	480d      	ldr	r0, [pc, #52]	@ (8001fc0 <HAL_TIM_MspPostInit+0x80>)
 8001f8c:	f000 fb56 	bl	800263c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001f90:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc4 <HAL_TIM_MspPostInit+0x84>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	61fb      	str	r3, [r7, #28]
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f9c:	61fb      	str	r3, [r7, #28]
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fac:	61fb      	str	r3, [r7, #28]
 8001fae:	4a05      	ldr	r2, [pc, #20]	@ (8001fc4 <HAL_TIM_MspPostInit+0x84>)
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	6053      	str	r3, [r2, #4]
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001fb4:	bf00      	nop
 8001fb6:	3720      	adds	r7, #32
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40010c00 	.word	0x40010c00
 8001fc4:	40010000 	.word	0x40010000

08001fc8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd0:	f107 0310 	add.w	r3, r7, #16
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a20      	ldr	r2, [pc, #128]	@ (8002064 <HAL_UART_MspInit+0x9c>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d139      	bne.n	800205c <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fe8:	4b1f      	ldr	r3, [pc, #124]	@ (8002068 <HAL_UART_MspInit+0xa0>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	4a1e      	ldr	r2, [pc, #120]	@ (8002068 <HAL_UART_MspInit+0xa0>)
 8001fee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ff2:	6193      	str	r3, [r2, #24]
 8001ff4:	4b1c      	ldr	r3, [pc, #112]	@ (8002068 <HAL_UART_MspInit+0xa0>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002000:	4b19      	ldr	r3, [pc, #100]	@ (8002068 <HAL_UART_MspInit+0xa0>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	4a18      	ldr	r2, [pc, #96]	@ (8002068 <HAL_UART_MspInit+0xa0>)
 8002006:	f043 0304 	orr.w	r3, r3, #4
 800200a:	6193      	str	r3, [r2, #24]
 800200c:	4b16      	ldr	r3, [pc, #88]	@ (8002068 <HAL_UART_MspInit+0xa0>)
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002018:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800201c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201e:	2302      	movs	r3, #2
 8002020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002022:	2303      	movs	r3, #3
 8002024:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002026:	f107 0310 	add.w	r3, r7, #16
 800202a:	4619      	mov	r1, r3
 800202c:	480f      	ldr	r0, [pc, #60]	@ (800206c <HAL_UART_MspInit+0xa4>)
 800202e:	f000 fb05 	bl	800263c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002032:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002036:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002040:	f107 0310 	add.w	r3, r7, #16
 8002044:	4619      	mov	r1, r3
 8002046:	4809      	ldr	r0, [pc, #36]	@ (800206c <HAL_UART_MspInit+0xa4>)
 8002048:	f000 faf8 	bl	800263c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 800204c:	2200      	movs	r2, #0
 800204e:	2102      	movs	r1, #2
 8002050:	2025      	movs	r0, #37	@ 0x25
 8002052:	f000 fa0a 	bl	800246a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002056:	2025      	movs	r0, #37	@ 0x25
 8002058:	f000 fa23 	bl	80024a2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800205c:	bf00      	nop
 800205e:	3720      	adds	r7, #32
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40013800 	.word	0x40013800
 8002068:	40021000 	.word	0x40021000
 800206c:	40010800 	.word	0x40010800

08002070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002074:	bf00      	nop
 8002076:	e7fd      	b.n	8002074 <NMI_Handler+0x4>

08002078 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800207c:	bf00      	nop
 800207e:	e7fd      	b.n	800207c <HardFault_Handler+0x4>

08002080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002084:	bf00      	nop
 8002086:	e7fd      	b.n	8002084 <MemManage_Handler+0x4>

08002088 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800208c:	bf00      	nop
 800208e:	e7fd      	b.n	800208c <BusFault_Handler+0x4>

08002090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002094:	bf00      	nop
 8002096:	e7fd      	b.n	8002094 <UsageFault_Handler+0x4>

08002098 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr

080020bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020c0:	f000 f8bc 	bl	800223c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020c4:	bf00      	nop
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020cc:	4802      	ldr	r0, [pc, #8]	@ (80020d8 <USART1_IRQHandler+0x10>)
 80020ce:	f003 f8b7 	bl	8005240 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000190 	.word	0x20000190

080020dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80020e0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80020e4:	f000 fc46 	bl	8002974 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}

080020ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020f4:	4a14      	ldr	r2, [pc, #80]	@ (8002148 <_sbrk+0x5c>)
 80020f6:	4b15      	ldr	r3, [pc, #84]	@ (800214c <_sbrk+0x60>)
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002100:	4b13      	ldr	r3, [pc, #76]	@ (8002150 <_sbrk+0x64>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d102      	bne.n	800210e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002108:	4b11      	ldr	r3, [pc, #68]	@ (8002150 <_sbrk+0x64>)
 800210a:	4a12      	ldr	r2, [pc, #72]	@ (8002154 <_sbrk+0x68>)
 800210c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800210e:	4b10      	ldr	r3, [pc, #64]	@ (8002150 <_sbrk+0x64>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	429a      	cmp	r2, r3
 800211a:	d207      	bcs.n	800212c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800211c:	f004 fa32 	bl	8006584 <__errno>
 8002120:	4603      	mov	r3, r0
 8002122:	220c      	movs	r2, #12
 8002124:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002126:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800212a:	e009      	b.n	8002140 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800212c:	4b08      	ldr	r3, [pc, #32]	@ (8002150 <_sbrk+0x64>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002132:	4b07      	ldr	r3, [pc, #28]	@ (8002150 <_sbrk+0x64>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	4a05      	ldr	r2, [pc, #20]	@ (8002150 <_sbrk+0x64>)
 800213c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800213e:	68fb      	ldr	r3, [r7, #12]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20005000 	.word	0x20005000
 800214c:	00000400 	.word	0x00000400
 8002150:	20000290 	.word	0x20000290
 8002154:	200003e0 	.word	0x200003e0

08002158 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr

08002164 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002164:	f7ff fff8 	bl	8002158 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002168:	480b      	ldr	r0, [pc, #44]	@ (8002198 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800216a:	490c      	ldr	r1, [pc, #48]	@ (800219c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800216c:	4a0c      	ldr	r2, [pc, #48]	@ (80021a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800216e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002170:	e002      	b.n	8002178 <LoopCopyDataInit>

08002172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002176:	3304      	adds	r3, #4

08002178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800217a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800217c:	d3f9      	bcc.n	8002172 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800217e:	4a09      	ldr	r2, [pc, #36]	@ (80021a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002180:	4c09      	ldr	r4, [pc, #36]	@ (80021a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002184:	e001      	b.n	800218a <LoopFillZerobss>

08002186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002188:	3204      	adds	r2, #4

0800218a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800218a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800218c:	d3fb      	bcc.n	8002186 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800218e:	f004 f9ff 	bl	8006590 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002192:	f7fe fa37 	bl	8000604 <main>
  bx lr
 8002196:	4770      	bx	lr
  ldr r0, =_sdata
 8002198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800219c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80021a0:	08007000 	.word	0x08007000
  ldr r2, =_sbss
 80021a4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80021a8:	200003e0 	.word	0x200003e0

080021ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021ac:	e7fe      	b.n	80021ac <ADC1_2_IRQHandler>
	...

080021b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021b4:	4b08      	ldr	r3, [pc, #32]	@ (80021d8 <HAL_Init+0x28>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a07      	ldr	r2, [pc, #28]	@ (80021d8 <HAL_Init+0x28>)
 80021ba:	f043 0310 	orr.w	r3, r3, #16
 80021be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021c0:	2003      	movs	r0, #3
 80021c2:	f000 f947 	bl	8002454 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021c6:	2000      	movs	r0, #0
 80021c8:	f000 f808 	bl	80021dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021cc:	f7ff fdfe 	bl	8001dcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40022000 	.word	0x40022000

080021dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021e4:	4b12      	ldr	r3, [pc, #72]	@ (8002230 <HAL_InitTick+0x54>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4b12      	ldr	r3, [pc, #72]	@ (8002234 <HAL_InitTick+0x58>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	4619      	mov	r1, r3
 80021ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 f95f 	bl	80024be <HAL_SYSTICK_Config>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e00e      	b.n	8002228 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b0f      	cmp	r3, #15
 800220e:	d80a      	bhi.n	8002226 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002210:	2200      	movs	r2, #0
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002218:	f000 f927 	bl	800246a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800221c:	4a06      	ldr	r2, [pc, #24]	@ (8002238 <HAL_InitTick+0x5c>)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002222:	2300      	movs	r3, #0
 8002224:	e000      	b.n	8002228 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
}
 8002228:	4618      	mov	r0, r3
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	20000028 	.word	0x20000028
 8002234:	20000030 	.word	0x20000030
 8002238:	2000002c 	.word	0x2000002c

0800223c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002240:	4b05      	ldr	r3, [pc, #20]	@ (8002258 <HAL_IncTick+0x1c>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	461a      	mov	r2, r3
 8002246:	4b05      	ldr	r3, [pc, #20]	@ (800225c <HAL_IncTick+0x20>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4413      	add	r3, r2
 800224c:	4a03      	ldr	r2, [pc, #12]	@ (800225c <HAL_IncTick+0x20>)
 800224e:	6013      	str	r3, [r2, #0]
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr
 8002258:	20000030 	.word	0x20000030
 800225c:	20000294 	.word	0x20000294

08002260 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  return uwTick;
 8002264:	4b02      	ldr	r3, [pc, #8]	@ (8002270 <HAL_GetTick+0x10>)
 8002266:	681b      	ldr	r3, [r3, #0]
}
 8002268:	4618      	mov	r0, r3
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr
 8002270:	20000294 	.word	0x20000294

08002274 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800227c:	f7ff fff0 	bl	8002260 <HAL_GetTick>
 8002280:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800228c:	d005      	beq.n	800229a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800228e:	4b0a      	ldr	r3, [pc, #40]	@ (80022b8 <HAL_Delay+0x44>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	461a      	mov	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4413      	add	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800229a:	bf00      	nop
 800229c:	f7ff ffe0 	bl	8002260 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d8f7      	bhi.n	800229c <HAL_Delay+0x28>
  {
  }
}
 80022ac:	bf00      	nop
 80022ae:	bf00      	nop
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20000030 	.word	0x20000030

080022bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002300 <__NVIC_SetPriorityGrouping+0x44>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022d8:	4013      	ands	r3, r2
 80022da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ee:	4a04      	ldr	r2, [pc, #16]	@ (8002300 <__NVIC_SetPriorityGrouping+0x44>)
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	60d3      	str	r3, [r2, #12]
}
 80022f4:	bf00      	nop
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002308:	4b04      	ldr	r3, [pc, #16]	@ (800231c <__NVIC_GetPriorityGrouping+0x18>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	0a1b      	lsrs	r3, r3, #8
 800230e:	f003 0307 	and.w	r3, r3, #7
}
 8002312:	4618      	mov	r0, r3
 8002314:	46bd      	mov	sp, r7
 8002316:	bc80      	pop	{r7}
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800232a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232e:	2b00      	cmp	r3, #0
 8002330:	db0b      	blt.n	800234a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	f003 021f 	and.w	r2, r3, #31
 8002338:	4906      	ldr	r1, [pc, #24]	@ (8002354 <__NVIC_EnableIRQ+0x34>)
 800233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233e:	095b      	lsrs	r3, r3, #5
 8002340:	2001      	movs	r0, #1
 8002342:	fa00 f202 	lsl.w	r2, r0, r2
 8002346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr
 8002354:	e000e100 	.word	0xe000e100

08002358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	6039      	str	r1, [r7, #0]
 8002362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002368:	2b00      	cmp	r3, #0
 800236a:	db0a      	blt.n	8002382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	b2da      	uxtb	r2, r3
 8002370:	490c      	ldr	r1, [pc, #48]	@ (80023a4 <__NVIC_SetPriority+0x4c>)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	0112      	lsls	r2, r2, #4
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	440b      	add	r3, r1
 800237c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002380:	e00a      	b.n	8002398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	b2da      	uxtb	r2, r3
 8002386:	4908      	ldr	r1, [pc, #32]	@ (80023a8 <__NVIC_SetPriority+0x50>)
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	3b04      	subs	r3, #4
 8002390:	0112      	lsls	r2, r2, #4
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	440b      	add	r3, r1
 8002396:	761a      	strb	r2, [r3, #24]
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	e000e100 	.word	0xe000e100
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b089      	sub	sp, #36	@ 0x24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f1c3 0307 	rsb	r3, r3, #7
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	bf28      	it	cs
 80023ca:	2304      	movcs	r3, #4
 80023cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3304      	adds	r3, #4
 80023d2:	2b06      	cmp	r3, #6
 80023d4:	d902      	bls.n	80023dc <NVIC_EncodePriority+0x30>
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	3b03      	subs	r3, #3
 80023da:	e000      	b.n	80023de <NVIC_EncodePriority+0x32>
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43da      	mvns	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	401a      	ands	r2, r3
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	fa01 f303 	lsl.w	r3, r1, r3
 80023fe:	43d9      	mvns	r1, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002404:	4313      	orrs	r3, r2
         );
}
 8002406:	4618      	mov	r0, r3
 8002408:	3724      	adds	r7, #36	@ 0x24
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr

08002410 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3b01      	subs	r3, #1
 800241c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002420:	d301      	bcc.n	8002426 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002422:	2301      	movs	r3, #1
 8002424:	e00f      	b.n	8002446 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002426:	4a0a      	ldr	r2, [pc, #40]	@ (8002450 <SysTick_Config+0x40>)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3b01      	subs	r3, #1
 800242c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800242e:	210f      	movs	r1, #15
 8002430:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002434:	f7ff ff90 	bl	8002358 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002438:	4b05      	ldr	r3, [pc, #20]	@ (8002450 <SysTick_Config+0x40>)
 800243a:	2200      	movs	r2, #0
 800243c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800243e:	4b04      	ldr	r3, [pc, #16]	@ (8002450 <SysTick_Config+0x40>)
 8002440:	2207      	movs	r2, #7
 8002442:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	e000e010 	.word	0xe000e010

08002454 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f7ff ff2d 	bl	80022bc <__NVIC_SetPriorityGrouping>
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800246a:	b580      	push	{r7, lr}
 800246c:	b086      	sub	sp, #24
 800246e:	af00      	add	r7, sp, #0
 8002470:	4603      	mov	r3, r0
 8002472:	60b9      	str	r1, [r7, #8]
 8002474:	607a      	str	r2, [r7, #4]
 8002476:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800247c:	f7ff ff42 	bl	8002304 <__NVIC_GetPriorityGrouping>
 8002480:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	68b9      	ldr	r1, [r7, #8]
 8002486:	6978      	ldr	r0, [r7, #20]
 8002488:	f7ff ff90 	bl	80023ac <NVIC_EncodePriority>
 800248c:	4602      	mov	r2, r0
 800248e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002492:	4611      	mov	r1, r2
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff ff5f 	bl	8002358 <__NVIC_SetPriority>
}
 800249a:	bf00      	nop
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b082      	sub	sp, #8
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	4603      	mov	r3, r0
 80024aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff ff35 	bl	8002320 <__NVIC_EnableIRQ>
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b082      	sub	sp, #8
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7ff ffa2 	bl	8002410 <SysTick_Config>
 80024cc:	4603      	mov	r3, r0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b085      	sub	sp, #20
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d008      	beq.n	8002500 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2204      	movs	r2, #4
 80024f2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e020      	b.n	8002542 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 020e 	bic.w	r2, r2, #14
 800250e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 0201 	bic.w	r2, r2, #1
 800251e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002528:	2101      	movs	r1, #1
 800252a:	fa01 f202 	lsl.w	r2, r1, r2
 800252e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002540:	7bfb      	ldrb	r3, [r7, #15]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002554:	2300      	movs	r3, #0
 8002556:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d005      	beq.n	8002570 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2204      	movs	r2, #4
 8002568:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	73fb      	strb	r3, [r7, #15]
 800256e:	e051      	b.n	8002614 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 020e 	bic.w	r2, r2, #14
 800257e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0201 	bic.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a22      	ldr	r2, [pc, #136]	@ (8002620 <HAL_DMA_Abort_IT+0xd4>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d029      	beq.n	80025ee <HAL_DMA_Abort_IT+0xa2>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a21      	ldr	r2, [pc, #132]	@ (8002624 <HAL_DMA_Abort_IT+0xd8>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d022      	beq.n	80025ea <HAL_DMA_Abort_IT+0x9e>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a1f      	ldr	r2, [pc, #124]	@ (8002628 <HAL_DMA_Abort_IT+0xdc>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d01a      	beq.n	80025e4 <HAL_DMA_Abort_IT+0x98>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a1e      	ldr	r2, [pc, #120]	@ (800262c <HAL_DMA_Abort_IT+0xe0>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d012      	beq.n	80025de <HAL_DMA_Abort_IT+0x92>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a1c      	ldr	r2, [pc, #112]	@ (8002630 <HAL_DMA_Abort_IT+0xe4>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d00a      	beq.n	80025d8 <HAL_DMA_Abort_IT+0x8c>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a1b      	ldr	r2, [pc, #108]	@ (8002634 <HAL_DMA_Abort_IT+0xe8>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d102      	bne.n	80025d2 <HAL_DMA_Abort_IT+0x86>
 80025cc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80025d0:	e00e      	b.n	80025f0 <HAL_DMA_Abort_IT+0xa4>
 80025d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025d6:	e00b      	b.n	80025f0 <HAL_DMA_Abort_IT+0xa4>
 80025d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025dc:	e008      	b.n	80025f0 <HAL_DMA_Abort_IT+0xa4>
 80025de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025e2:	e005      	b.n	80025f0 <HAL_DMA_Abort_IT+0xa4>
 80025e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025e8:	e002      	b.n	80025f0 <HAL_DMA_Abort_IT+0xa4>
 80025ea:	2310      	movs	r3, #16
 80025ec:	e000      	b.n	80025f0 <HAL_DMA_Abort_IT+0xa4>
 80025ee:	2301      	movs	r3, #1
 80025f0:	4a11      	ldr	r2, [pc, #68]	@ (8002638 <HAL_DMA_Abort_IT+0xec>)
 80025f2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	4798      	blx	r3
    } 
  }
  return status;
 8002614:	7bfb      	ldrb	r3, [r7, #15]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40020008 	.word	0x40020008
 8002624:	4002001c 	.word	0x4002001c
 8002628:	40020030 	.word	0x40020030
 800262c:	40020044 	.word	0x40020044
 8002630:	40020058 	.word	0x40020058
 8002634:	4002006c 	.word	0x4002006c
 8002638:	40020000 	.word	0x40020000

0800263c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800263c:	b480      	push	{r7}
 800263e:	b08b      	sub	sp, #44	@ 0x2c
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002646:	2300      	movs	r3, #0
 8002648:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800264a:	2300      	movs	r3, #0
 800264c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800264e:	e169      	b.n	8002924 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002650:	2201      	movs	r2, #1
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	69fa      	ldr	r2, [r7, #28]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	429a      	cmp	r2, r3
 800266a:	f040 8158 	bne.w	800291e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	4a9a      	ldr	r2, [pc, #616]	@ (80028dc <HAL_GPIO_Init+0x2a0>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d05e      	beq.n	8002736 <HAL_GPIO_Init+0xfa>
 8002678:	4a98      	ldr	r2, [pc, #608]	@ (80028dc <HAL_GPIO_Init+0x2a0>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d875      	bhi.n	800276a <HAL_GPIO_Init+0x12e>
 800267e:	4a98      	ldr	r2, [pc, #608]	@ (80028e0 <HAL_GPIO_Init+0x2a4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d058      	beq.n	8002736 <HAL_GPIO_Init+0xfa>
 8002684:	4a96      	ldr	r2, [pc, #600]	@ (80028e0 <HAL_GPIO_Init+0x2a4>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d86f      	bhi.n	800276a <HAL_GPIO_Init+0x12e>
 800268a:	4a96      	ldr	r2, [pc, #600]	@ (80028e4 <HAL_GPIO_Init+0x2a8>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d052      	beq.n	8002736 <HAL_GPIO_Init+0xfa>
 8002690:	4a94      	ldr	r2, [pc, #592]	@ (80028e4 <HAL_GPIO_Init+0x2a8>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d869      	bhi.n	800276a <HAL_GPIO_Init+0x12e>
 8002696:	4a94      	ldr	r2, [pc, #592]	@ (80028e8 <HAL_GPIO_Init+0x2ac>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d04c      	beq.n	8002736 <HAL_GPIO_Init+0xfa>
 800269c:	4a92      	ldr	r2, [pc, #584]	@ (80028e8 <HAL_GPIO_Init+0x2ac>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d863      	bhi.n	800276a <HAL_GPIO_Init+0x12e>
 80026a2:	4a92      	ldr	r2, [pc, #584]	@ (80028ec <HAL_GPIO_Init+0x2b0>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d046      	beq.n	8002736 <HAL_GPIO_Init+0xfa>
 80026a8:	4a90      	ldr	r2, [pc, #576]	@ (80028ec <HAL_GPIO_Init+0x2b0>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d85d      	bhi.n	800276a <HAL_GPIO_Init+0x12e>
 80026ae:	2b12      	cmp	r3, #18
 80026b0:	d82a      	bhi.n	8002708 <HAL_GPIO_Init+0xcc>
 80026b2:	2b12      	cmp	r3, #18
 80026b4:	d859      	bhi.n	800276a <HAL_GPIO_Init+0x12e>
 80026b6:	a201      	add	r2, pc, #4	@ (adr r2, 80026bc <HAL_GPIO_Init+0x80>)
 80026b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026bc:	08002737 	.word	0x08002737
 80026c0:	08002711 	.word	0x08002711
 80026c4:	08002723 	.word	0x08002723
 80026c8:	08002765 	.word	0x08002765
 80026cc:	0800276b 	.word	0x0800276b
 80026d0:	0800276b 	.word	0x0800276b
 80026d4:	0800276b 	.word	0x0800276b
 80026d8:	0800276b 	.word	0x0800276b
 80026dc:	0800276b 	.word	0x0800276b
 80026e0:	0800276b 	.word	0x0800276b
 80026e4:	0800276b 	.word	0x0800276b
 80026e8:	0800276b 	.word	0x0800276b
 80026ec:	0800276b 	.word	0x0800276b
 80026f0:	0800276b 	.word	0x0800276b
 80026f4:	0800276b 	.word	0x0800276b
 80026f8:	0800276b 	.word	0x0800276b
 80026fc:	0800276b 	.word	0x0800276b
 8002700:	08002719 	.word	0x08002719
 8002704:	0800272d 	.word	0x0800272d
 8002708:	4a79      	ldr	r2, [pc, #484]	@ (80028f0 <HAL_GPIO_Init+0x2b4>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d013      	beq.n	8002736 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800270e:	e02c      	b.n	800276a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	623b      	str	r3, [r7, #32]
          break;
 8002716:	e029      	b.n	800276c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	3304      	adds	r3, #4
 800271e:	623b      	str	r3, [r7, #32]
          break;
 8002720:	e024      	b.n	800276c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	3308      	adds	r3, #8
 8002728:	623b      	str	r3, [r7, #32]
          break;
 800272a:	e01f      	b.n	800276c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	330c      	adds	r3, #12
 8002732:	623b      	str	r3, [r7, #32]
          break;
 8002734:	e01a      	b.n	800276c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d102      	bne.n	8002744 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800273e:	2304      	movs	r3, #4
 8002740:	623b      	str	r3, [r7, #32]
          break;
 8002742:	e013      	b.n	800276c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d105      	bne.n	8002758 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800274c:	2308      	movs	r3, #8
 800274e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69fa      	ldr	r2, [r7, #28]
 8002754:	611a      	str	r2, [r3, #16]
          break;
 8002756:	e009      	b.n	800276c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002758:	2308      	movs	r3, #8
 800275a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	69fa      	ldr	r2, [r7, #28]
 8002760:	615a      	str	r2, [r3, #20]
          break;
 8002762:	e003      	b.n	800276c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002764:	2300      	movs	r3, #0
 8002766:	623b      	str	r3, [r7, #32]
          break;
 8002768:	e000      	b.n	800276c <HAL_GPIO_Init+0x130>
          break;
 800276a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	2bff      	cmp	r3, #255	@ 0xff
 8002770:	d801      	bhi.n	8002776 <HAL_GPIO_Init+0x13a>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	e001      	b.n	800277a <HAL_GPIO_Init+0x13e>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	3304      	adds	r3, #4
 800277a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	2bff      	cmp	r3, #255	@ 0xff
 8002780:	d802      	bhi.n	8002788 <HAL_GPIO_Init+0x14c>
 8002782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	e002      	b.n	800278e <HAL_GPIO_Init+0x152>
 8002788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278a:	3b08      	subs	r3, #8
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	210f      	movs	r1, #15
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	fa01 f303 	lsl.w	r3, r1, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	401a      	ands	r2, r3
 80027a0:	6a39      	ldr	r1, [r7, #32]
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	fa01 f303 	lsl.w	r3, r1, r3
 80027a8:	431a      	orrs	r2, r3
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 80b1 	beq.w	800291e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027bc:	4b4d      	ldr	r3, [pc, #308]	@ (80028f4 <HAL_GPIO_Init+0x2b8>)
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	4a4c      	ldr	r2, [pc, #304]	@ (80028f4 <HAL_GPIO_Init+0x2b8>)
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	6193      	str	r3, [r2, #24]
 80027c8:	4b4a      	ldr	r3, [pc, #296]	@ (80028f4 <HAL_GPIO_Init+0x2b8>)
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027d4:	4a48      	ldr	r2, [pc, #288]	@ (80028f8 <HAL_GPIO_Init+0x2bc>)
 80027d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d8:	089b      	lsrs	r3, r3, #2
 80027da:	3302      	adds	r3, #2
 80027dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e4:	f003 0303 	and.w	r3, r3, #3
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	220f      	movs	r2, #15
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	4013      	ands	r3, r2
 80027f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a40      	ldr	r2, [pc, #256]	@ (80028fc <HAL_GPIO_Init+0x2c0>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d013      	beq.n	8002828 <HAL_GPIO_Init+0x1ec>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a3f      	ldr	r2, [pc, #252]	@ (8002900 <HAL_GPIO_Init+0x2c4>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d00d      	beq.n	8002824 <HAL_GPIO_Init+0x1e8>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a3e      	ldr	r2, [pc, #248]	@ (8002904 <HAL_GPIO_Init+0x2c8>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d007      	beq.n	8002820 <HAL_GPIO_Init+0x1e4>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a3d      	ldr	r2, [pc, #244]	@ (8002908 <HAL_GPIO_Init+0x2cc>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d101      	bne.n	800281c <HAL_GPIO_Init+0x1e0>
 8002818:	2303      	movs	r3, #3
 800281a:	e006      	b.n	800282a <HAL_GPIO_Init+0x1ee>
 800281c:	2304      	movs	r3, #4
 800281e:	e004      	b.n	800282a <HAL_GPIO_Init+0x1ee>
 8002820:	2302      	movs	r3, #2
 8002822:	e002      	b.n	800282a <HAL_GPIO_Init+0x1ee>
 8002824:	2301      	movs	r3, #1
 8002826:	e000      	b.n	800282a <HAL_GPIO_Init+0x1ee>
 8002828:	2300      	movs	r3, #0
 800282a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800282c:	f002 0203 	and.w	r2, r2, #3
 8002830:	0092      	lsls	r2, r2, #2
 8002832:	4093      	lsls	r3, r2
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4313      	orrs	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800283a:	492f      	ldr	r1, [pc, #188]	@ (80028f8 <HAL_GPIO_Init+0x2bc>)
 800283c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283e:	089b      	lsrs	r3, r3, #2
 8002840:	3302      	adds	r3, #2
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d006      	beq.n	8002862 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002854:	4b2d      	ldr	r3, [pc, #180]	@ (800290c <HAL_GPIO_Init+0x2d0>)
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	492c      	ldr	r1, [pc, #176]	@ (800290c <HAL_GPIO_Init+0x2d0>)
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	4313      	orrs	r3, r2
 800285e:	608b      	str	r3, [r1, #8]
 8002860:	e006      	b.n	8002870 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002862:	4b2a      	ldr	r3, [pc, #168]	@ (800290c <HAL_GPIO_Init+0x2d0>)
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	43db      	mvns	r3, r3
 800286a:	4928      	ldr	r1, [pc, #160]	@ (800290c <HAL_GPIO_Init+0x2d0>)
 800286c:	4013      	ands	r3, r2
 800286e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d006      	beq.n	800288a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800287c:	4b23      	ldr	r3, [pc, #140]	@ (800290c <HAL_GPIO_Init+0x2d0>)
 800287e:	68da      	ldr	r2, [r3, #12]
 8002880:	4922      	ldr	r1, [pc, #136]	@ (800290c <HAL_GPIO_Init+0x2d0>)
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	4313      	orrs	r3, r2
 8002886:	60cb      	str	r3, [r1, #12]
 8002888:	e006      	b.n	8002898 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800288a:	4b20      	ldr	r3, [pc, #128]	@ (800290c <HAL_GPIO_Init+0x2d0>)
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	43db      	mvns	r3, r3
 8002892:	491e      	ldr	r1, [pc, #120]	@ (800290c <HAL_GPIO_Init+0x2d0>)
 8002894:	4013      	ands	r3, r2
 8002896:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d006      	beq.n	80028b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028a4:	4b19      	ldr	r3, [pc, #100]	@ (800290c <HAL_GPIO_Init+0x2d0>)
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	4918      	ldr	r1, [pc, #96]	@ (800290c <HAL_GPIO_Init+0x2d0>)
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	604b      	str	r3, [r1, #4]
 80028b0:	e006      	b.n	80028c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028b2:	4b16      	ldr	r3, [pc, #88]	@ (800290c <HAL_GPIO_Init+0x2d0>)
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	43db      	mvns	r3, r3
 80028ba:	4914      	ldr	r1, [pc, #80]	@ (800290c <HAL_GPIO_Init+0x2d0>)
 80028bc:	4013      	ands	r3, r2
 80028be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d021      	beq.n	8002910 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028cc:	4b0f      	ldr	r3, [pc, #60]	@ (800290c <HAL_GPIO_Init+0x2d0>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	490e      	ldr	r1, [pc, #56]	@ (800290c <HAL_GPIO_Init+0x2d0>)
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	600b      	str	r3, [r1, #0]
 80028d8:	e021      	b.n	800291e <HAL_GPIO_Init+0x2e2>
 80028da:	bf00      	nop
 80028dc:	10320000 	.word	0x10320000
 80028e0:	10310000 	.word	0x10310000
 80028e4:	10220000 	.word	0x10220000
 80028e8:	10210000 	.word	0x10210000
 80028ec:	10120000 	.word	0x10120000
 80028f0:	10110000 	.word	0x10110000
 80028f4:	40021000 	.word	0x40021000
 80028f8:	40010000 	.word	0x40010000
 80028fc:	40010800 	.word	0x40010800
 8002900:	40010c00 	.word	0x40010c00
 8002904:	40011000 	.word	0x40011000
 8002908:	40011400 	.word	0x40011400
 800290c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002910:	4b0b      	ldr	r3, [pc, #44]	@ (8002940 <HAL_GPIO_Init+0x304>)
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	43db      	mvns	r3, r3
 8002918:	4909      	ldr	r1, [pc, #36]	@ (8002940 <HAL_GPIO_Init+0x304>)
 800291a:	4013      	ands	r3, r2
 800291c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800291e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002920:	3301      	adds	r3, #1
 8002922:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292a:	fa22 f303 	lsr.w	r3, r2, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	f47f ae8e 	bne.w	8002650 <HAL_GPIO_Init+0x14>
  }
}
 8002934:	bf00      	nop
 8002936:	bf00      	nop
 8002938:	372c      	adds	r7, #44	@ 0x2c
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr
 8002940:	40010400 	.word	0x40010400

08002944 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	887b      	ldrh	r3, [r7, #2]
 8002956:	4013      	ands	r3, r2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d002      	beq.n	8002962 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800295c:	2301      	movs	r3, #1
 800295e:	73fb      	strb	r3, [r7, #15]
 8002960:	e001      	b.n	8002966 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002962:	2300      	movs	r3, #0
 8002964:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002966:	7bfb      	ldrb	r3, [r7, #15]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr
	...

08002974 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800297e:	4b08      	ldr	r3, [pc, #32]	@ (80029a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002980:	695a      	ldr	r2, [r3, #20]
 8002982:	88fb      	ldrh	r3, [r7, #6]
 8002984:	4013      	ands	r3, r2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d006      	beq.n	8002998 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800298a:	4a05      	ldr	r2, [pc, #20]	@ (80029a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800298c:	88fb      	ldrh	r3, [r7, #6]
 800298e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002990:	88fb      	ldrh	r3, [r7, #6]
 8002992:	4618      	mov	r0, r3
 8002994:	f7fd fdd4 	bl	8000540 <HAL_GPIO_EXTI_Callback>
  }
}
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40010400 	.word	0x40010400

080029a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e12b      	b.n	8002c0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d106      	bne.n	80029d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7ff fa30 	bl	8001e30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2224      	movs	r2, #36	@ 0x24
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0201 	bic.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a08:	f001 fd7c 	bl	8004504 <HAL_RCC_GetPCLK1Freq>
 8002a0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	4a81      	ldr	r2, [pc, #516]	@ (8002c18 <HAL_I2C_Init+0x274>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d807      	bhi.n	8002a28 <HAL_I2C_Init+0x84>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4a80      	ldr	r2, [pc, #512]	@ (8002c1c <HAL_I2C_Init+0x278>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	bf94      	ite	ls
 8002a20:	2301      	movls	r3, #1
 8002a22:	2300      	movhi	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	e006      	b.n	8002a36 <HAL_I2C_Init+0x92>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4a7d      	ldr	r2, [pc, #500]	@ (8002c20 <HAL_I2C_Init+0x27c>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	bf94      	ite	ls
 8002a30:	2301      	movls	r3, #1
 8002a32:	2300      	movhi	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e0e7      	b.n	8002c0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4a78      	ldr	r2, [pc, #480]	@ (8002c24 <HAL_I2C_Init+0x280>)
 8002a42:	fba2 2303 	umull	r2, r3, r2, r3
 8002a46:	0c9b      	lsrs	r3, r3, #18
 8002a48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	4a6a      	ldr	r2, [pc, #424]	@ (8002c18 <HAL_I2C_Init+0x274>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d802      	bhi.n	8002a78 <HAL_I2C_Init+0xd4>
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	3301      	adds	r3, #1
 8002a76:	e009      	b.n	8002a8c <HAL_I2C_Init+0xe8>
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a7e:	fb02 f303 	mul.w	r3, r2, r3
 8002a82:	4a69      	ldr	r2, [pc, #420]	@ (8002c28 <HAL_I2C_Init+0x284>)
 8002a84:	fba2 2303 	umull	r2, r3, r2, r3
 8002a88:	099b      	lsrs	r3, r3, #6
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6812      	ldr	r2, [r2, #0]
 8002a90:	430b      	orrs	r3, r1
 8002a92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a9e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	495c      	ldr	r1, [pc, #368]	@ (8002c18 <HAL_I2C_Init+0x274>)
 8002aa8:	428b      	cmp	r3, r1
 8002aaa:	d819      	bhi.n	8002ae0 <HAL_I2C_Init+0x13c>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	1e59      	subs	r1, r3, #1
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aba:	1c59      	adds	r1, r3, #1
 8002abc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002ac0:	400b      	ands	r3, r1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00a      	beq.n	8002adc <HAL_I2C_Init+0x138>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	1e59      	subs	r1, r3, #1
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ada:	e051      	b.n	8002b80 <HAL_I2C_Init+0x1dc>
 8002adc:	2304      	movs	r3, #4
 8002ade:	e04f      	b.n	8002b80 <HAL_I2C_Init+0x1dc>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d111      	bne.n	8002b0c <HAL_I2C_Init+0x168>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	1e58      	subs	r0, r3, #1
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6859      	ldr	r1, [r3, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	440b      	add	r3, r1
 8002af6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002afa:	3301      	adds	r3, #1
 8002afc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	bf0c      	ite	eq
 8002b04:	2301      	moveq	r3, #1
 8002b06:	2300      	movne	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	e012      	b.n	8002b32 <HAL_I2C_Init+0x18e>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	1e58      	subs	r0, r3, #1
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6859      	ldr	r1, [r3, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	0099      	lsls	r1, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b22:	3301      	adds	r3, #1
 8002b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	bf0c      	ite	eq
 8002b2c:	2301      	moveq	r3, #1
 8002b2e:	2300      	movne	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_I2C_Init+0x196>
 8002b36:	2301      	movs	r3, #1
 8002b38:	e022      	b.n	8002b80 <HAL_I2C_Init+0x1dc>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10e      	bne.n	8002b60 <HAL_I2C_Init+0x1bc>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	1e58      	subs	r0, r3, #1
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6859      	ldr	r1, [r3, #4]
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	440b      	add	r3, r1
 8002b50:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b54:	3301      	adds	r3, #1
 8002b56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b5e:	e00f      	b.n	8002b80 <HAL_I2C_Init+0x1dc>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	1e58      	subs	r0, r3, #1
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6859      	ldr	r1, [r3, #4]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	0099      	lsls	r1, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b76:	3301      	adds	r3, #1
 8002b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	6809      	ldr	r1, [r1, #0]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69da      	ldr	r2, [r3, #28]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002bae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6911      	ldr	r1, [r2, #16]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	68d2      	ldr	r2, [r2, #12]
 8002bba:	4311      	orrs	r1, r2
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6812      	ldr	r2, [r2, #0]
 8002bc0:	430b      	orrs	r3, r1
 8002bc2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	695a      	ldr	r2, [r3, #20]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0201 	orr.w	r2, r2, #1
 8002bee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	000186a0 	.word	0x000186a0
 8002c1c:	001e847f 	.word	0x001e847f
 8002c20:	003d08ff 	.word	0x003d08ff
 8002c24:	431bde83 	.word	0x431bde83
 8002c28:	10624dd3 	.word	0x10624dd3

08002c2c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b088      	sub	sp, #32
 8002c30:	af02      	add	r7, sp, #8
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	607a      	str	r2, [r7, #4]
 8002c36:	461a      	mov	r2, r3
 8002c38:	460b      	mov	r3, r1
 8002c3a:	817b      	strh	r3, [r7, #10]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c40:	f7ff fb0e 	bl	8002260 <HAL_GetTick>
 8002c44:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b20      	cmp	r3, #32
 8002c50:	f040 80e0 	bne.w	8002e14 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	2319      	movs	r3, #25
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	4970      	ldr	r1, [pc, #448]	@ (8002e20 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 fe50 	bl	8003904 <I2C_WaitOnFlagUntilTimeout>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e0d3      	b.n	8002e16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d101      	bne.n	8002c7c <HAL_I2C_Master_Transmit+0x50>
 8002c78:	2302      	movs	r3, #2
 8002c7a:	e0cc      	b.n	8002e16 <HAL_I2C_Master_Transmit+0x1ea>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d007      	beq.n	8002ca2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f042 0201 	orr.w	r2, r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cb0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2221      	movs	r2, #33	@ 0x21
 8002cb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2210      	movs	r2, #16
 8002cbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	893a      	ldrh	r2, [r7, #8]
 8002cd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	4a50      	ldr	r2, [pc, #320]	@ (8002e24 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ce2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ce4:	8979      	ldrh	r1, [r7, #10]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	6a3a      	ldr	r2, [r7, #32]
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 fc0a 	bl	8003504 <I2C_MasterRequestWrite>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e08d      	b.n	8002e16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	613b      	str	r3, [r7, #16]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	613b      	str	r3, [r7, #16]
 8002d0e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d10:	e066      	b.n	8002de0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	6a39      	ldr	r1, [r7, #32]
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 ff0e 	bl	8003b38 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00d      	beq.n	8002d3e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d107      	bne.n	8002d3a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e06b      	b.n	8002e16 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d42:	781a      	ldrb	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4e:	1c5a      	adds	r2, r3, #1
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d66:	3b01      	subs	r3, #1
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	2b04      	cmp	r3, #4
 8002d7a:	d11b      	bne.n	8002db4 <HAL_I2C_Master_Transmit+0x188>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d017      	beq.n	8002db4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d88:	781a      	ldrb	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	6a39      	ldr	r1, [r7, #32]
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 ff05 	bl	8003bc8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00d      	beq.n	8002de0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc8:	2b04      	cmp	r3, #4
 8002dca:	d107      	bne.n	8002ddc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dda:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e01a      	b.n	8002e16 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d194      	bne.n	8002d12 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002df6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e10:	2300      	movs	r3, #0
 8002e12:	e000      	b.n	8002e16 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e14:	2302      	movs	r3, #2
  }
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3718      	adds	r7, #24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	00100002 	.word	0x00100002
 8002e24:	ffff0000 	.word	0xffff0000

08002e28 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b088      	sub	sp, #32
 8002e2c:	af02      	add	r7, sp, #8
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	4608      	mov	r0, r1
 8002e32:	4611      	mov	r1, r2
 8002e34:	461a      	mov	r2, r3
 8002e36:	4603      	mov	r3, r0
 8002e38:	817b      	strh	r3, [r7, #10]
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	813b      	strh	r3, [r7, #8]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e42:	f7ff fa0d 	bl	8002260 <HAL_GetTick>
 8002e46:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b20      	cmp	r3, #32
 8002e52:	f040 80d9 	bne.w	8003008 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	2319      	movs	r3, #25
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	496d      	ldr	r1, [pc, #436]	@ (8003014 <HAL_I2C_Mem_Write+0x1ec>)
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 fd4f 	bl	8003904 <I2C_WaitOnFlagUntilTimeout>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e0cc      	b.n	800300a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <HAL_I2C_Mem_Write+0x56>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e0c5      	b.n	800300a <HAL_I2C_Mem_Write+0x1e2>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d007      	beq.n	8002ea4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0201 	orr.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002eb2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2221      	movs	r2, #33	@ 0x21
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2240      	movs	r2, #64	@ 0x40
 8002ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6a3a      	ldr	r2, [r7, #32]
 8002ece:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002ed4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4a4d      	ldr	r2, [pc, #308]	@ (8003018 <HAL_I2C_Mem_Write+0x1f0>)
 8002ee4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ee6:	88f8      	ldrh	r0, [r7, #6]
 8002ee8:	893a      	ldrh	r2, [r7, #8]
 8002eea:	8979      	ldrh	r1, [r7, #10]
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	9301      	str	r3, [sp, #4]
 8002ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 fb86 	bl	8003608 <I2C_RequestMemoryWrite>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d052      	beq.n	8002fa8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e081      	b.n	800300a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 fe14 	bl	8003b38 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00d      	beq.n	8002f32 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	d107      	bne.n	8002f2e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e06b      	b.n	800300a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f36:	781a      	ldrb	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	d11b      	bne.n	8002fa8 <HAL_I2C_Mem_Write+0x180>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d017      	beq.n	8002fa8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7c:	781a      	ldrb	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f88:	1c5a      	adds	r2, r3, #1
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1aa      	bne.n	8002f06 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 fe07 	bl	8003bc8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00d      	beq.n	8002fdc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	d107      	bne.n	8002fd8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fd6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e016      	b.n	800300a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003004:	2300      	movs	r3, #0
 8003006:	e000      	b.n	800300a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003008:	2302      	movs	r3, #2
  }
}
 800300a:	4618      	mov	r0, r3
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	00100002 	.word	0x00100002
 8003018:	ffff0000 	.word	0xffff0000

0800301c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08c      	sub	sp, #48	@ 0x30
 8003020:	af02      	add	r7, sp, #8
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	4608      	mov	r0, r1
 8003026:	4611      	mov	r1, r2
 8003028:	461a      	mov	r2, r3
 800302a:	4603      	mov	r3, r0
 800302c:	817b      	strh	r3, [r7, #10]
 800302e:	460b      	mov	r3, r1
 8003030:	813b      	strh	r3, [r7, #8]
 8003032:	4613      	mov	r3, r2
 8003034:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003036:	2300      	movs	r3, #0
 8003038:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800303a:	f7ff f911 	bl	8002260 <HAL_GetTick>
 800303e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b20      	cmp	r3, #32
 800304a:	f040 8250 	bne.w	80034ee <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800304e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	2319      	movs	r3, #25
 8003054:	2201      	movs	r2, #1
 8003056:	4982      	ldr	r1, [pc, #520]	@ (8003260 <HAL_I2C_Mem_Read+0x244>)
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 fc53 	bl	8003904 <I2C_WaitOnFlagUntilTimeout>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003064:	2302      	movs	r3, #2
 8003066:	e243      	b.n	80034f0 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800306e:	2b01      	cmp	r3, #1
 8003070:	d101      	bne.n	8003076 <HAL_I2C_Mem_Read+0x5a>
 8003072:	2302      	movs	r3, #2
 8003074:	e23c      	b.n	80034f0 <HAL_I2C_Mem_Read+0x4d4>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b01      	cmp	r3, #1
 800308a:	d007      	beq.n	800309c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 0201 	orr.w	r2, r2, #1
 800309a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2222      	movs	r2, #34	@ 0x22
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2240      	movs	r2, #64	@ 0x40
 80030b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80030cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4a62      	ldr	r2, [pc, #392]	@ (8003264 <HAL_I2C_Mem_Read+0x248>)
 80030dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030de:	88f8      	ldrh	r0, [r7, #6]
 80030e0:	893a      	ldrh	r2, [r7, #8]
 80030e2:	8979      	ldrh	r1, [r7, #10]
 80030e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e6:	9301      	str	r3, [sp, #4]
 80030e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	4603      	mov	r3, r0
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 fb20 	bl	8003734 <I2C_RequestMemoryRead>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e1f8      	b.n	80034f0 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003102:	2b00      	cmp	r3, #0
 8003104:	d113      	bne.n	800312e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	61fb      	str	r3, [r7, #28]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	61fb      	str	r3, [r7, #28]
 800311a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	e1cc      	b.n	80034c8 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003132:	2b01      	cmp	r3, #1
 8003134:	d11e      	bne.n	8003174 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003144:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003146:	b672      	cpsid	i
}
 8003148:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800314a:	2300      	movs	r3, #0
 800314c:	61bb      	str	r3, [r7, #24]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	61bb      	str	r3, [r7, #24]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	61bb      	str	r3, [r7, #24]
 800315e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800316e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003170:	b662      	cpsie	i
}
 8003172:	e035      	b.n	80031e0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003178:	2b02      	cmp	r3, #2
 800317a:	d11e      	bne.n	80031ba <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800318a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800318c:	b672      	cpsid	i
}
 800318e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	617b      	str	r3, [r7, #20]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80031b6:	b662      	cpsie	i
}
 80031b8:	e012      	b.n	80031e0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80031c8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ca:	2300      	movs	r3, #0
 80031cc:	613b      	str	r3, [r7, #16]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80031e0:	e172      	b.n	80034c8 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031e6:	2b03      	cmp	r3, #3
 80031e8:	f200 811f 	bhi.w	800342a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d123      	bne.n	800323c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f000 fd2d 	bl	8003c58 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e173      	b.n	80034f0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	691a      	ldr	r2, [r3, #16]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003224:	3b01      	subs	r3, #1
 8003226:	b29a      	uxth	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003230:	b29b      	uxth	r3, r3
 8003232:	3b01      	subs	r3, #1
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800323a:	e145      	b.n	80034c8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003240:	2b02      	cmp	r3, #2
 8003242:	d152      	bne.n	80032ea <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800324a:	2200      	movs	r2, #0
 800324c:	4906      	ldr	r1, [pc, #24]	@ (8003268 <HAL_I2C_Mem_Read+0x24c>)
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 fb58 	bl	8003904 <I2C_WaitOnFlagUntilTimeout>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d008      	beq.n	800326c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e148      	b.n	80034f0 <HAL_I2C_Mem_Read+0x4d4>
 800325e:	bf00      	nop
 8003260:	00100002 	.word	0x00100002
 8003264:	ffff0000 	.word	0xffff0000
 8003268:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800326c:	b672      	cpsid	i
}
 800326e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800327e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691a      	ldr	r2, [r3, #16]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800329c:	3b01      	subs	r3, #1
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	3b01      	subs	r3, #1
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80032b2:	b662      	cpsie	i
}
 80032b4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	691a      	ldr	r2, [r3, #16]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c0:	b2d2      	uxtb	r2, r2
 80032c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d2:	3b01      	subs	r3, #1
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80032e8:	e0ee      	b.n	80034c8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032f0:	2200      	movs	r2, #0
 80032f2:	4981      	ldr	r1, [pc, #516]	@ (80034f8 <HAL_I2C_Mem_Read+0x4dc>)
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 fb05 	bl	8003904 <I2C_WaitOnFlagUntilTimeout>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e0f5      	b.n	80034f0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003312:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003314:	b672      	cpsid	i
}
 8003316:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	691a      	ldr	r2, [r3, #16]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332a:	1c5a      	adds	r2, r3, #1
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003334:	3b01      	subs	r3, #1
 8003336:	b29a      	uxth	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003340:	b29b      	uxth	r3, r3
 8003342:	3b01      	subs	r3, #1
 8003344:	b29a      	uxth	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800334a:	4b6c      	ldr	r3, [pc, #432]	@ (80034fc <HAL_I2C_Mem_Read+0x4e0>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	08db      	lsrs	r3, r3, #3
 8003350:	4a6b      	ldr	r2, [pc, #428]	@ (8003500 <HAL_I2C_Mem_Read+0x4e4>)
 8003352:	fba2 2303 	umull	r2, r3, r2, r3
 8003356:	0a1a      	lsrs	r2, r3, #8
 8003358:	4613      	mov	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	00da      	lsls	r2, r3, #3
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	3b01      	subs	r3, #1
 8003368:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800336a:	6a3b      	ldr	r3, [r7, #32]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d118      	bne.n	80033a2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2220      	movs	r2, #32
 800337a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338a:	f043 0220 	orr.w	r2, r3, #32
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003392:	b662      	cpsie	i
}
 8003394:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e0a6      	b.n	80034f0 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b04      	cmp	r3, #4
 80033ae:	d1d9      	bne.n	8003364 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691a      	ldr	r2, [r3, #16]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d2:	1c5a      	adds	r2, r3, #1
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	3b01      	subs	r3, #1
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80033f2:	b662      	cpsie	i
}
 80033f4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003400:	b2d2      	uxtb	r2, r2
 8003402:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003412:	3b01      	subs	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800341e:	b29b      	uxth	r3, r3
 8003420:	3b01      	subs	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003428:	e04e      	b.n	80034c8 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800342a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800342c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 fc12 	bl	8003c58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e058      	b.n	80034f0 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003448:	b2d2      	uxtb	r2, r2
 800344a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800345a:	3b01      	subs	r3, #1
 800345c:	b29a      	uxth	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003466:	b29b      	uxth	r3, r3
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	f003 0304 	and.w	r3, r3, #4
 800347a:	2b04      	cmp	r3, #4
 800347c:	d124      	bne.n	80034c8 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003482:	2b03      	cmp	r3, #3
 8003484:	d107      	bne.n	8003496 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003494:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	691a      	ldr	r2, [r3, #16]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a0:	b2d2      	uxtb	r2, r2
 80034a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034b2:	3b01      	subs	r3, #1
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034be:	b29b      	uxth	r3, r3
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f47f ae88 	bne.w	80031e2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2220      	movs	r2, #32
 80034d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	e000      	b.n	80034f0 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80034ee:	2302      	movs	r3, #2
  }
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3728      	adds	r7, #40	@ 0x28
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	00010004 	.word	0x00010004
 80034fc:	20000028 	.word	0x20000028
 8003500:	14f8b589 	.word	0x14f8b589

08003504 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b088      	sub	sp, #32
 8003508:	af02      	add	r7, sp, #8
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	607a      	str	r2, [r7, #4]
 800350e:	603b      	str	r3, [r7, #0]
 8003510:	460b      	mov	r3, r1
 8003512:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003518:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	2b08      	cmp	r3, #8
 800351e:	d006      	beq.n	800352e <I2C_MasterRequestWrite+0x2a>
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d003      	beq.n	800352e <I2C_MasterRequestWrite+0x2a>
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800352c:	d108      	bne.n	8003540 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	e00b      	b.n	8003558 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003544:	2b12      	cmp	r3, #18
 8003546:	d107      	bne.n	8003558 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003556:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 f9cd 	bl	8003904 <I2C_WaitOnFlagUntilTimeout>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00d      	beq.n	800358c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800357a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800357e:	d103      	bne.n	8003588 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003586:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e035      	b.n	80035f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003594:	d108      	bne.n	80035a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003596:	897b      	ldrh	r3, [r7, #10]
 8003598:	b2db      	uxtb	r3, r3
 800359a:	461a      	mov	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80035a4:	611a      	str	r2, [r3, #16]
 80035a6:	e01b      	b.n	80035e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80035a8:	897b      	ldrh	r3, [r7, #10]
 80035aa:	11db      	asrs	r3, r3, #7
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	f003 0306 	and.w	r3, r3, #6
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	f063 030f 	orn	r3, r3, #15
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	490e      	ldr	r1, [pc, #56]	@ (8003600 <I2C_MasterRequestWrite+0xfc>)
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 fa16 	bl	80039f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e010      	b.n	80035f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035d6:	897b      	ldrh	r3, [r7, #10]
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	4907      	ldr	r1, [pc, #28]	@ (8003604 <I2C_MasterRequestWrite+0x100>)
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 fa06 	bl	80039f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e000      	b.n	80035f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	00010008 	.word	0x00010008
 8003604:	00010002 	.word	0x00010002

08003608 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b088      	sub	sp, #32
 800360c:	af02      	add	r7, sp, #8
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	4608      	mov	r0, r1
 8003612:	4611      	mov	r1, r2
 8003614:	461a      	mov	r2, r3
 8003616:	4603      	mov	r3, r0
 8003618:	817b      	strh	r3, [r7, #10]
 800361a:	460b      	mov	r3, r1
 800361c:	813b      	strh	r3, [r7, #8]
 800361e:	4613      	mov	r3, r2
 8003620:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003630:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	2200      	movs	r2, #0
 800363a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 f960 	bl	8003904 <I2C_WaitOnFlagUntilTimeout>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00d      	beq.n	8003666 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003654:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003658:	d103      	bne.n	8003662 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003660:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e05f      	b.n	8003726 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003666:	897b      	ldrh	r3, [r7, #10]
 8003668:	b2db      	uxtb	r3, r3
 800366a:	461a      	mov	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003674:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003678:	6a3a      	ldr	r2, [r7, #32]
 800367a:	492d      	ldr	r1, [pc, #180]	@ (8003730 <I2C_RequestMemoryWrite+0x128>)
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 f9bb 	bl	80039f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e04c      	b.n	8003726 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800368c:	2300      	movs	r3, #0
 800368e:	617b      	str	r3, [r7, #20]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036a4:	6a39      	ldr	r1, [r7, #32]
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 fa46 	bl	8003b38 <I2C_WaitOnTXEFlagUntilTimeout>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00d      	beq.n	80036ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d107      	bne.n	80036ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e02b      	b.n	8003726 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036ce:	88fb      	ldrh	r3, [r7, #6]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d105      	bne.n	80036e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036d4:	893b      	ldrh	r3, [r7, #8]
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	611a      	str	r2, [r3, #16]
 80036de:	e021      	b.n	8003724 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036e0:	893b      	ldrh	r3, [r7, #8]
 80036e2:	0a1b      	lsrs	r3, r3, #8
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036f0:	6a39      	ldr	r1, [r7, #32]
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 fa20 	bl	8003b38 <I2C_WaitOnTXEFlagUntilTimeout>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00d      	beq.n	800371a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003702:	2b04      	cmp	r3, #4
 8003704:	d107      	bne.n	8003716 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003714:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e005      	b.n	8003726 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800371a:	893b      	ldrh	r3, [r7, #8]
 800371c:	b2da      	uxtb	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	00010002 	.word	0x00010002

08003734 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b088      	sub	sp, #32
 8003738:	af02      	add	r7, sp, #8
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	4608      	mov	r0, r1
 800373e:	4611      	mov	r1, r2
 8003740:	461a      	mov	r2, r3
 8003742:	4603      	mov	r3, r0
 8003744:	817b      	strh	r3, [r7, #10]
 8003746:	460b      	mov	r3, r1
 8003748:	813b      	strh	r3, [r7, #8]
 800374a:	4613      	mov	r3, r2
 800374c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800375c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800376c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800376e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	2200      	movs	r2, #0
 8003776:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 f8c2 	bl	8003904 <I2C_WaitOnFlagUntilTimeout>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00d      	beq.n	80037a2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003790:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003794:	d103      	bne.n	800379e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800379c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e0aa      	b.n	80038f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037a2:	897b      	ldrh	r3, [r7, #10]
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	461a      	mov	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b4:	6a3a      	ldr	r2, [r7, #32]
 80037b6:	4952      	ldr	r1, [pc, #328]	@ (8003900 <I2C_RequestMemoryRead+0x1cc>)
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 f91d 	bl	80039f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e097      	b.n	80038f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037c8:	2300      	movs	r3, #0
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037e0:	6a39      	ldr	r1, [r7, #32]
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 f9a8 	bl	8003b38 <I2C_WaitOnTXEFlagUntilTimeout>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00d      	beq.n	800380a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d107      	bne.n	8003806 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003804:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e076      	b.n	80038f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800380a:	88fb      	ldrh	r3, [r7, #6]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d105      	bne.n	800381c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003810:	893b      	ldrh	r3, [r7, #8]
 8003812:	b2da      	uxtb	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	611a      	str	r2, [r3, #16]
 800381a:	e021      	b.n	8003860 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800381c:	893b      	ldrh	r3, [r7, #8]
 800381e:	0a1b      	lsrs	r3, r3, #8
 8003820:	b29b      	uxth	r3, r3
 8003822:	b2da      	uxtb	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800382a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800382c:	6a39      	ldr	r1, [r7, #32]
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 f982 	bl	8003b38 <I2C_WaitOnTXEFlagUntilTimeout>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00d      	beq.n	8003856 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383e:	2b04      	cmp	r3, #4
 8003840:	d107      	bne.n	8003852 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003850:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e050      	b.n	80038f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003856:	893b      	ldrh	r3, [r7, #8]
 8003858:	b2da      	uxtb	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003860:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003862:	6a39      	ldr	r1, [r7, #32]
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 f967 	bl	8003b38 <I2C_WaitOnTXEFlagUntilTimeout>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00d      	beq.n	800388c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003874:	2b04      	cmp	r3, #4
 8003876:	d107      	bne.n	8003888 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003886:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e035      	b.n	80038f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800389a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800389c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 f82b 	bl	8003904 <I2C_WaitOnFlagUntilTimeout>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00d      	beq.n	80038d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038c2:	d103      	bne.n	80038cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e013      	b.n	80038f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80038d0:	897b      	ldrh	r3, [r7, #10]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	f043 0301 	orr.w	r3, r3, #1
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e2:	6a3a      	ldr	r2, [r7, #32]
 80038e4:	4906      	ldr	r1, [pc, #24]	@ (8003900 <I2C_RequestMemoryRead+0x1cc>)
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 f886 	bl	80039f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e000      	b.n	80038f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3718      	adds	r7, #24
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	00010002 	.word	0x00010002

08003904 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	603b      	str	r3, [r7, #0]
 8003910:	4613      	mov	r3, r2
 8003912:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003914:	e048      	b.n	80039a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800391c:	d044      	beq.n	80039a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800391e:	f7fe fc9f 	bl	8002260 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d302      	bcc.n	8003934 <I2C_WaitOnFlagUntilTimeout+0x30>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d139      	bne.n	80039a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	0c1b      	lsrs	r3, r3, #16
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b01      	cmp	r3, #1
 800393c:	d10d      	bne.n	800395a <I2C_WaitOnFlagUntilTimeout+0x56>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	43da      	mvns	r2, r3
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	4013      	ands	r3, r2
 800394a:	b29b      	uxth	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	bf0c      	ite	eq
 8003950:	2301      	moveq	r3, #1
 8003952:	2300      	movne	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	461a      	mov	r2, r3
 8003958:	e00c      	b.n	8003974 <I2C_WaitOnFlagUntilTimeout+0x70>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	43da      	mvns	r2, r3
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	4013      	ands	r3, r2
 8003966:	b29b      	uxth	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	bf0c      	ite	eq
 800396c:	2301      	moveq	r3, #1
 800396e:	2300      	movne	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	461a      	mov	r2, r3
 8003974:	79fb      	ldrb	r3, [r7, #7]
 8003976:	429a      	cmp	r2, r3
 8003978:	d116      	bne.n	80039a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003994:	f043 0220 	orr.w	r2, r3, #32
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e023      	b.n	80039f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	0c1b      	lsrs	r3, r3, #16
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d10d      	bne.n	80039ce <I2C_WaitOnFlagUntilTimeout+0xca>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	43da      	mvns	r2, r3
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	4013      	ands	r3, r2
 80039be:	b29b      	uxth	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	bf0c      	ite	eq
 80039c4:	2301      	moveq	r3, #1
 80039c6:	2300      	movne	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	461a      	mov	r2, r3
 80039cc:	e00c      	b.n	80039e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	43da      	mvns	r2, r3
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	4013      	ands	r3, r2
 80039da:	b29b      	uxth	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	bf0c      	ite	eq
 80039e0:	2301      	moveq	r3, #1
 80039e2:	2300      	movne	r3, #0
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	461a      	mov	r2, r3
 80039e8:	79fb      	ldrb	r3, [r7, #7]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d093      	beq.n	8003916 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a06:	e071      	b.n	8003aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a16:	d123      	bne.n	8003a60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a26:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4c:	f043 0204 	orr.w	r2, r3, #4
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e067      	b.n	8003b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a66:	d041      	beq.n	8003aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a68:	f7fe fbfa 	bl	8002260 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d302      	bcc.n	8003a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d136      	bne.n	8003aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	0c1b      	lsrs	r3, r3, #16
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d10c      	bne.n	8003aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	43da      	mvns	r2, r3
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	4013      	ands	r3, r2
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	bf14      	ite	ne
 8003a9a:	2301      	movne	r3, #1
 8003a9c:	2300      	moveq	r3, #0
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	e00b      	b.n	8003aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	43da      	mvns	r2, r3
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	4013      	ands	r3, r2
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	bf14      	ite	ne
 8003ab4:	2301      	movne	r3, #1
 8003ab6:	2300      	moveq	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d016      	beq.n	8003aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad8:	f043 0220 	orr.w	r2, r3, #32
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e021      	b.n	8003b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	0c1b      	lsrs	r3, r3, #16
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d10c      	bne.n	8003b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	43da      	mvns	r2, r3
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	4013      	ands	r3, r2
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	bf14      	ite	ne
 8003b08:	2301      	movne	r3, #1
 8003b0a:	2300      	moveq	r3, #0
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	e00b      	b.n	8003b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	43da      	mvns	r2, r3
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	bf14      	ite	ne
 8003b22:	2301      	movne	r3, #1
 8003b24:	2300      	moveq	r3, #0
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f47f af6d 	bne.w	8003a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b44:	e034      	b.n	8003bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 f8e3 	bl	8003d12 <I2C_IsAcknowledgeFailed>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e034      	b.n	8003bc0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b5c:	d028      	beq.n	8003bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b5e:	f7fe fb7f 	bl	8002260 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d302      	bcc.n	8003b74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d11d      	bne.n	8003bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b7e:	2b80      	cmp	r3, #128	@ 0x80
 8003b80:	d016      	beq.n	8003bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9c:	f043 0220 	orr.w	r2, r3, #32
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e007      	b.n	8003bc0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bba:	2b80      	cmp	r3, #128	@ 0x80
 8003bbc:	d1c3      	bne.n	8003b46 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bd4:	e034      	b.n	8003c40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 f89b 	bl	8003d12 <I2C_IsAcknowledgeFailed>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e034      	b.n	8003c50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bec:	d028      	beq.n	8003c40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bee:	f7fe fb37 	bl	8002260 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d302      	bcc.n	8003c04 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d11d      	bne.n	8003c40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	f003 0304 	and.w	r3, r3, #4
 8003c0e:	2b04      	cmp	r3, #4
 8003c10:	d016      	beq.n	8003c40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2c:	f043 0220 	orr.w	r2, r3, #32
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e007      	b.n	8003c50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	f003 0304 	and.w	r3, r3, #4
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d1c3      	bne.n	8003bd6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c64:	e049      	b.n	8003cfa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	f003 0310 	and.w	r3, r3, #16
 8003c70:	2b10      	cmp	r3, #16
 8003c72:	d119      	bne.n	8003ca8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f06f 0210 	mvn.w	r2, #16
 8003c7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e030      	b.n	8003d0a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ca8:	f7fe fada 	bl	8002260 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d302      	bcc.n	8003cbe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d11d      	bne.n	8003cfa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cc8:	2b40      	cmp	r3, #64	@ 0x40
 8003cca:	d016      	beq.n	8003cfa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce6:	f043 0220 	orr.w	r2, r3, #32
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e007      	b.n	8003d0a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d04:	2b40      	cmp	r3, #64	@ 0x40
 8003d06:	d1ae      	bne.n	8003c66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d28:	d11b      	bne.n	8003d62 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003d32:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4e:	f043 0204 	orr.w	r2, r3, #4
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e000      	b.n	8003d64 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bc80      	pop	{r7}
 8003d6c:	4770      	bx	lr
	...

08003d70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e272      	b.n	8004268 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 8087 	beq.w	8003e9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d90:	4b92      	ldr	r3, [pc, #584]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f003 030c 	and.w	r3, r3, #12
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d00c      	beq.n	8003db6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d9c:	4b8f      	ldr	r3, [pc, #572]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f003 030c 	and.w	r3, r3, #12
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d112      	bne.n	8003dce <HAL_RCC_OscConfig+0x5e>
 8003da8:	4b8c      	ldr	r3, [pc, #560]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003db0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003db4:	d10b      	bne.n	8003dce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db6:	4b89      	ldr	r3, [pc, #548]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d06c      	beq.n	8003e9c <HAL_RCC_OscConfig+0x12c>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d168      	bne.n	8003e9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e24c      	b.n	8004268 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dd6:	d106      	bne.n	8003de6 <HAL_RCC_OscConfig+0x76>
 8003dd8:	4b80      	ldr	r3, [pc, #512]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a7f      	ldr	r2, [pc, #508]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003dde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003de2:	6013      	str	r3, [r2, #0]
 8003de4:	e02e      	b.n	8003e44 <HAL_RCC_OscConfig+0xd4>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10c      	bne.n	8003e08 <HAL_RCC_OscConfig+0x98>
 8003dee:	4b7b      	ldr	r3, [pc, #492]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a7a      	ldr	r2, [pc, #488]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003df4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	4b78      	ldr	r3, [pc, #480]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a77      	ldr	r2, [pc, #476]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003e00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	e01d      	b.n	8003e44 <HAL_RCC_OscConfig+0xd4>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e10:	d10c      	bne.n	8003e2c <HAL_RCC_OscConfig+0xbc>
 8003e12:	4b72      	ldr	r3, [pc, #456]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a71      	ldr	r2, [pc, #452]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003e18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	4b6f      	ldr	r3, [pc, #444]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a6e      	ldr	r2, [pc, #440]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003e24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	e00b      	b.n	8003e44 <HAL_RCC_OscConfig+0xd4>
 8003e2c:	4b6b      	ldr	r3, [pc, #428]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a6a      	ldr	r2, [pc, #424]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003e32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e36:	6013      	str	r3, [r2, #0]
 8003e38:	4b68      	ldr	r3, [pc, #416]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a67      	ldr	r2, [pc, #412]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003e3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d013      	beq.n	8003e74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4c:	f7fe fa08 	bl	8002260 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e54:	f7fe fa04 	bl	8002260 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b64      	cmp	r3, #100	@ 0x64
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e200      	b.n	8004268 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e66:	4b5d      	ldr	r3, [pc, #372]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0f0      	beq.n	8003e54 <HAL_RCC_OscConfig+0xe4>
 8003e72:	e014      	b.n	8003e9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e74:	f7fe f9f4 	bl	8002260 <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e7c:	f7fe f9f0 	bl	8002260 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b64      	cmp	r3, #100	@ 0x64
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e1ec      	b.n	8004268 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e8e:	4b53      	ldr	r3, [pc, #332]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1f0      	bne.n	8003e7c <HAL_RCC_OscConfig+0x10c>
 8003e9a:	e000      	b.n	8003e9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d063      	beq.n	8003f72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003eaa:	4b4c      	ldr	r3, [pc, #304]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f003 030c 	and.w	r3, r3, #12
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00b      	beq.n	8003ece <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003eb6:	4b49      	ldr	r3, [pc, #292]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f003 030c 	and.w	r3, r3, #12
 8003ebe:	2b08      	cmp	r3, #8
 8003ec0:	d11c      	bne.n	8003efc <HAL_RCC_OscConfig+0x18c>
 8003ec2:	4b46      	ldr	r3, [pc, #280]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d116      	bne.n	8003efc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ece:	4b43      	ldr	r3, [pc, #268]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d005      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x176>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d001      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e1c0      	b.n	8004268 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee6:	4b3d      	ldr	r3, [pc, #244]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	4939      	ldr	r1, [pc, #228]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003efa:	e03a      	b.n	8003f72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d020      	beq.n	8003f46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f04:	4b36      	ldr	r3, [pc, #216]	@ (8003fe0 <HAL_RCC_OscConfig+0x270>)
 8003f06:	2201      	movs	r2, #1
 8003f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0a:	f7fe f9a9 	bl	8002260 <HAL_GetTick>
 8003f0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f10:	e008      	b.n	8003f24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f12:	f7fe f9a5 	bl	8002260 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e1a1      	b.n	8004268 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f24:	4b2d      	ldr	r3, [pc, #180]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0f0      	beq.n	8003f12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f30:	4b2a      	ldr	r3, [pc, #168]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	4927      	ldr	r1, [pc, #156]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	600b      	str	r3, [r1, #0]
 8003f44:	e015      	b.n	8003f72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f46:	4b26      	ldr	r3, [pc, #152]	@ (8003fe0 <HAL_RCC_OscConfig+0x270>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4c:	f7fe f988 	bl	8002260 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f54:	f7fe f984 	bl	8002260 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e180      	b.n	8004268 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f66:	4b1d      	ldr	r3, [pc, #116]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1f0      	bne.n	8003f54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d03a      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d019      	beq.n	8003fba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f86:	4b17      	ldr	r3, [pc, #92]	@ (8003fe4 <HAL_RCC_OscConfig+0x274>)
 8003f88:	2201      	movs	r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f8c:	f7fe f968 	bl	8002260 <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f94:	f7fe f964 	bl	8002260 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e160      	b.n	8004268 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8003fdc <HAL_RCC_OscConfig+0x26c>)
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0f0      	beq.n	8003f94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003fb2:	2001      	movs	r0, #1
 8003fb4:	f000 face 	bl	8004554 <RCC_Delay>
 8003fb8:	e01c      	b.n	8003ff4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fba:	4b0a      	ldr	r3, [pc, #40]	@ (8003fe4 <HAL_RCC_OscConfig+0x274>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fc0:	f7fe f94e 	bl	8002260 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fc6:	e00f      	b.n	8003fe8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fc8:	f7fe f94a 	bl	8002260 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d908      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e146      	b.n	8004268 <HAL_RCC_OscConfig+0x4f8>
 8003fda:	bf00      	nop
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	42420000 	.word	0x42420000
 8003fe4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fe8:	4b92      	ldr	r3, [pc, #584]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 8003fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1e9      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 80a6 	beq.w	800414e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004002:	2300      	movs	r3, #0
 8004004:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004006:	4b8b      	ldr	r3, [pc, #556]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10d      	bne.n	800402e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004012:	4b88      	ldr	r3, [pc, #544]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	4a87      	ldr	r2, [pc, #540]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 8004018:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800401c:	61d3      	str	r3, [r2, #28]
 800401e:	4b85      	ldr	r3, [pc, #532]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004026:	60bb      	str	r3, [r7, #8]
 8004028:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800402a:	2301      	movs	r3, #1
 800402c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800402e:	4b82      	ldr	r3, [pc, #520]	@ (8004238 <HAL_RCC_OscConfig+0x4c8>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004036:	2b00      	cmp	r3, #0
 8004038:	d118      	bne.n	800406c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800403a:	4b7f      	ldr	r3, [pc, #508]	@ (8004238 <HAL_RCC_OscConfig+0x4c8>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a7e      	ldr	r2, [pc, #504]	@ (8004238 <HAL_RCC_OscConfig+0x4c8>)
 8004040:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004044:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004046:	f7fe f90b 	bl	8002260 <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800404c:	e008      	b.n	8004060 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800404e:	f7fe f907 	bl	8002260 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b64      	cmp	r3, #100	@ 0x64
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e103      	b.n	8004268 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004060:	4b75      	ldr	r3, [pc, #468]	@ (8004238 <HAL_RCC_OscConfig+0x4c8>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0f0      	beq.n	800404e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d106      	bne.n	8004082 <HAL_RCC_OscConfig+0x312>
 8004074:	4b6f      	ldr	r3, [pc, #444]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	4a6e      	ldr	r2, [pc, #440]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	6213      	str	r3, [r2, #32]
 8004080:	e02d      	b.n	80040de <HAL_RCC_OscConfig+0x36e>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10c      	bne.n	80040a4 <HAL_RCC_OscConfig+0x334>
 800408a:	4b6a      	ldr	r3, [pc, #424]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	4a69      	ldr	r2, [pc, #420]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 8004090:	f023 0301 	bic.w	r3, r3, #1
 8004094:	6213      	str	r3, [r2, #32]
 8004096:	4b67      	ldr	r3, [pc, #412]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	4a66      	ldr	r2, [pc, #408]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 800409c:	f023 0304 	bic.w	r3, r3, #4
 80040a0:	6213      	str	r3, [r2, #32]
 80040a2:	e01c      	b.n	80040de <HAL_RCC_OscConfig+0x36e>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	2b05      	cmp	r3, #5
 80040aa:	d10c      	bne.n	80040c6 <HAL_RCC_OscConfig+0x356>
 80040ac:	4b61      	ldr	r3, [pc, #388]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	4a60      	ldr	r2, [pc, #384]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 80040b2:	f043 0304 	orr.w	r3, r3, #4
 80040b6:	6213      	str	r3, [r2, #32]
 80040b8:	4b5e      	ldr	r3, [pc, #376]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	4a5d      	ldr	r2, [pc, #372]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 80040be:	f043 0301 	orr.w	r3, r3, #1
 80040c2:	6213      	str	r3, [r2, #32]
 80040c4:	e00b      	b.n	80040de <HAL_RCC_OscConfig+0x36e>
 80040c6:	4b5b      	ldr	r3, [pc, #364]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	4a5a      	ldr	r2, [pc, #360]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 80040cc:	f023 0301 	bic.w	r3, r3, #1
 80040d0:	6213      	str	r3, [r2, #32]
 80040d2:	4b58      	ldr	r3, [pc, #352]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	4a57      	ldr	r2, [pc, #348]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 80040d8:	f023 0304 	bic.w	r3, r3, #4
 80040dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d015      	beq.n	8004112 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040e6:	f7fe f8bb 	bl	8002260 <HAL_GetTick>
 80040ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ec:	e00a      	b.n	8004104 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ee:	f7fe f8b7 	bl	8002260 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e0b1      	b.n	8004268 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004104:	4b4b      	ldr	r3, [pc, #300]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0ee      	beq.n	80040ee <HAL_RCC_OscConfig+0x37e>
 8004110:	e014      	b.n	800413c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004112:	f7fe f8a5 	bl	8002260 <HAL_GetTick>
 8004116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004118:	e00a      	b.n	8004130 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800411a:	f7fe f8a1 	bl	8002260 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004128:	4293      	cmp	r3, r2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e09b      	b.n	8004268 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004130:	4b40      	ldr	r3, [pc, #256]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1ee      	bne.n	800411a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800413c:	7dfb      	ldrb	r3, [r7, #23]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d105      	bne.n	800414e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004142:	4b3c      	ldr	r3, [pc, #240]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	4a3b      	ldr	r2, [pc, #236]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 8004148:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800414c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	2b00      	cmp	r3, #0
 8004154:	f000 8087 	beq.w	8004266 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004158:	4b36      	ldr	r3, [pc, #216]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f003 030c 	and.w	r3, r3, #12
 8004160:	2b08      	cmp	r3, #8
 8004162:	d061      	beq.n	8004228 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	2b02      	cmp	r3, #2
 800416a:	d146      	bne.n	80041fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800416c:	4b33      	ldr	r3, [pc, #204]	@ (800423c <HAL_RCC_OscConfig+0x4cc>)
 800416e:	2200      	movs	r2, #0
 8004170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004172:	f7fe f875 	bl	8002260 <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004178:	e008      	b.n	800418c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800417a:	f7fe f871 	bl	8002260 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e06d      	b.n	8004268 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800418c:	4b29      	ldr	r3, [pc, #164]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1f0      	bne.n	800417a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041a0:	d108      	bne.n	80041b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80041a2:	4b24      	ldr	r3, [pc, #144]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	4921      	ldr	r1, [pc, #132]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041b4:	4b1f      	ldr	r3, [pc, #124]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a19      	ldr	r1, [r3, #32]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c4:	430b      	orrs	r3, r1
 80041c6:	491b      	ldr	r1, [pc, #108]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041cc:	4b1b      	ldr	r3, [pc, #108]	@ (800423c <HAL_RCC_OscConfig+0x4cc>)
 80041ce:	2201      	movs	r2, #1
 80041d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d2:	f7fe f845 	bl	8002260 <HAL_GetTick>
 80041d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041d8:	e008      	b.n	80041ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041da:	f7fe f841 	bl	8002260 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d901      	bls.n	80041ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e03d      	b.n	8004268 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041ec:	4b11      	ldr	r3, [pc, #68]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0f0      	beq.n	80041da <HAL_RCC_OscConfig+0x46a>
 80041f8:	e035      	b.n	8004266 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041fa:	4b10      	ldr	r3, [pc, #64]	@ (800423c <HAL_RCC_OscConfig+0x4cc>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004200:	f7fe f82e 	bl	8002260 <HAL_GetTick>
 8004204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004208:	f7fe f82a 	bl	8002260 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e026      	b.n	8004268 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800421a:	4b06      	ldr	r3, [pc, #24]	@ (8004234 <HAL_RCC_OscConfig+0x4c4>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1f0      	bne.n	8004208 <HAL_RCC_OscConfig+0x498>
 8004226:	e01e      	b.n	8004266 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	69db      	ldr	r3, [r3, #28]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d107      	bne.n	8004240 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e019      	b.n	8004268 <HAL_RCC_OscConfig+0x4f8>
 8004234:	40021000 	.word	0x40021000
 8004238:	40007000 	.word	0x40007000
 800423c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004240:	4b0b      	ldr	r3, [pc, #44]	@ (8004270 <HAL_RCC_OscConfig+0x500>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	429a      	cmp	r2, r3
 8004252:	d106      	bne.n	8004262 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800425e:	429a      	cmp	r2, r3
 8004260:	d001      	beq.n	8004266 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e000      	b.n	8004268 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3718      	adds	r7, #24
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	40021000 	.word	0x40021000

08004274 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e0d0      	b.n	800442a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004288:	4b6a      	ldr	r3, [pc, #424]	@ (8004434 <HAL_RCC_ClockConfig+0x1c0>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	429a      	cmp	r2, r3
 8004294:	d910      	bls.n	80042b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004296:	4b67      	ldr	r3, [pc, #412]	@ (8004434 <HAL_RCC_ClockConfig+0x1c0>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f023 0207 	bic.w	r2, r3, #7
 800429e:	4965      	ldr	r1, [pc, #404]	@ (8004434 <HAL_RCC_ClockConfig+0x1c0>)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042a6:	4b63      	ldr	r3, [pc, #396]	@ (8004434 <HAL_RCC_ClockConfig+0x1c0>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0307 	and.w	r3, r3, #7
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d001      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e0b8      	b.n	800442a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d020      	beq.n	8004306 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d005      	beq.n	80042dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042d0:	4b59      	ldr	r3, [pc, #356]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	4a58      	ldr	r2, [pc, #352]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 80042d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80042da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0308 	and.w	r3, r3, #8
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d005      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042e8:	4b53      	ldr	r3, [pc, #332]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	4a52      	ldr	r2, [pc, #328]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 80042ee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80042f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042f4:	4b50      	ldr	r3, [pc, #320]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	494d      	ldr	r1, [pc, #308]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 8004302:	4313      	orrs	r3, r2
 8004304:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d040      	beq.n	8004394 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d107      	bne.n	800432a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800431a:	4b47      	ldr	r3, [pc, #284]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d115      	bne.n	8004352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e07f      	b.n	800442a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2b02      	cmp	r3, #2
 8004330:	d107      	bne.n	8004342 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004332:	4b41      	ldr	r3, [pc, #260]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d109      	bne.n	8004352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e073      	b.n	800442a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004342:	4b3d      	ldr	r3, [pc, #244]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e06b      	b.n	800442a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004352:	4b39      	ldr	r3, [pc, #228]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f023 0203 	bic.w	r2, r3, #3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	4936      	ldr	r1, [pc, #216]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 8004360:	4313      	orrs	r3, r2
 8004362:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004364:	f7fd ff7c 	bl	8002260 <HAL_GetTick>
 8004368:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800436a:	e00a      	b.n	8004382 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800436c:	f7fd ff78 	bl	8002260 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800437a:	4293      	cmp	r3, r2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e053      	b.n	800442a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004382:	4b2d      	ldr	r3, [pc, #180]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f003 020c 	and.w	r2, r3, #12
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	429a      	cmp	r2, r3
 8004392:	d1eb      	bne.n	800436c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004394:	4b27      	ldr	r3, [pc, #156]	@ (8004434 <HAL_RCC_ClockConfig+0x1c0>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0307 	and.w	r3, r3, #7
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d210      	bcs.n	80043c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043a2:	4b24      	ldr	r3, [pc, #144]	@ (8004434 <HAL_RCC_ClockConfig+0x1c0>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f023 0207 	bic.w	r2, r3, #7
 80043aa:	4922      	ldr	r1, [pc, #136]	@ (8004434 <HAL_RCC_ClockConfig+0x1c0>)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043b2:	4b20      	ldr	r3, [pc, #128]	@ (8004434 <HAL_RCC_ClockConfig+0x1c0>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d001      	beq.n	80043c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e032      	b.n	800442a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d008      	beq.n	80043e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043d0:	4b19      	ldr	r3, [pc, #100]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	4916      	ldr	r1, [pc, #88]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d009      	beq.n	8004402 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043ee:	4b12      	ldr	r3, [pc, #72]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	490e      	ldr	r1, [pc, #56]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004402:	f000 f821 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 8004406:	4602      	mov	r2, r0
 8004408:	4b0b      	ldr	r3, [pc, #44]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	091b      	lsrs	r3, r3, #4
 800440e:	f003 030f 	and.w	r3, r3, #15
 8004412:	490a      	ldr	r1, [pc, #40]	@ (800443c <HAL_RCC_ClockConfig+0x1c8>)
 8004414:	5ccb      	ldrb	r3, [r1, r3]
 8004416:	fa22 f303 	lsr.w	r3, r2, r3
 800441a:	4a09      	ldr	r2, [pc, #36]	@ (8004440 <HAL_RCC_ClockConfig+0x1cc>)
 800441c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800441e:	4b09      	ldr	r3, [pc, #36]	@ (8004444 <HAL_RCC_ClockConfig+0x1d0>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f7fd feda 	bl	80021dc <HAL_InitTick>

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	40022000 	.word	0x40022000
 8004438:	40021000 	.word	0x40021000
 800443c:	08006f98 	.word	0x08006f98
 8004440:	20000028 	.word	0x20000028
 8004444:	2000002c 	.word	0x2000002c

08004448 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800444e:	2300      	movs	r3, #0
 8004450:	60fb      	str	r3, [r7, #12]
 8004452:	2300      	movs	r3, #0
 8004454:	60bb      	str	r3, [r7, #8]
 8004456:	2300      	movs	r3, #0
 8004458:	617b      	str	r3, [r7, #20]
 800445a:	2300      	movs	r3, #0
 800445c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800445e:	2300      	movs	r3, #0
 8004460:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004462:	4b1e      	ldr	r3, [pc, #120]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x94>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f003 030c 	and.w	r3, r3, #12
 800446e:	2b04      	cmp	r3, #4
 8004470:	d002      	beq.n	8004478 <HAL_RCC_GetSysClockFreq+0x30>
 8004472:	2b08      	cmp	r3, #8
 8004474:	d003      	beq.n	800447e <HAL_RCC_GetSysClockFreq+0x36>
 8004476:	e027      	b.n	80044c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004478:	4b19      	ldr	r3, [pc, #100]	@ (80044e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800447a:	613b      	str	r3, [r7, #16]
      break;
 800447c:	e027      	b.n	80044ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	0c9b      	lsrs	r3, r3, #18
 8004482:	f003 030f 	and.w	r3, r3, #15
 8004486:	4a17      	ldr	r2, [pc, #92]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004488:	5cd3      	ldrb	r3, [r2, r3]
 800448a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d010      	beq.n	80044b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004496:	4b11      	ldr	r3, [pc, #68]	@ (80044dc <HAL_RCC_GetSysClockFreq+0x94>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	0c5b      	lsrs	r3, r3, #17
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	4a11      	ldr	r2, [pc, #68]	@ (80044e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80044a2:	5cd3      	ldrb	r3, [r2, r3]
 80044a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a0d      	ldr	r2, [pc, #52]	@ (80044e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80044aa:	fb03 f202 	mul.w	r2, r3, r2
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b4:	617b      	str	r3, [r7, #20]
 80044b6:	e004      	b.n	80044c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a0c      	ldr	r2, [pc, #48]	@ (80044ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80044bc:	fb02 f303 	mul.w	r3, r2, r3
 80044c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	613b      	str	r3, [r7, #16]
      break;
 80044c6:	e002      	b.n	80044ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044c8:	4b05      	ldr	r3, [pc, #20]	@ (80044e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80044ca:	613b      	str	r3, [r7, #16]
      break;
 80044cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044ce:	693b      	ldr	r3, [r7, #16]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	371c      	adds	r7, #28
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bc80      	pop	{r7}
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	40021000 	.word	0x40021000
 80044e0:	007a1200 	.word	0x007a1200
 80044e4:	08006fb0 	.word	0x08006fb0
 80044e8:	08006fc0 	.word	0x08006fc0
 80044ec:	003d0900 	.word	0x003d0900

080044f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044f4:	4b02      	ldr	r3, [pc, #8]	@ (8004500 <HAL_RCC_GetHCLKFreq+0x10>)
 80044f6:	681b      	ldr	r3, [r3, #0]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bc80      	pop	{r7}
 80044fe:	4770      	bx	lr
 8004500:	20000028 	.word	0x20000028

08004504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004508:	f7ff fff2 	bl	80044f0 <HAL_RCC_GetHCLKFreq>
 800450c:	4602      	mov	r2, r0
 800450e:	4b05      	ldr	r3, [pc, #20]	@ (8004524 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	0a1b      	lsrs	r3, r3, #8
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	4903      	ldr	r1, [pc, #12]	@ (8004528 <HAL_RCC_GetPCLK1Freq+0x24>)
 800451a:	5ccb      	ldrb	r3, [r1, r3]
 800451c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004520:	4618      	mov	r0, r3
 8004522:	bd80      	pop	{r7, pc}
 8004524:	40021000 	.word	0x40021000
 8004528:	08006fa8 	.word	0x08006fa8

0800452c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004530:	f7ff ffde 	bl	80044f0 <HAL_RCC_GetHCLKFreq>
 8004534:	4602      	mov	r2, r0
 8004536:	4b05      	ldr	r3, [pc, #20]	@ (800454c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	0adb      	lsrs	r3, r3, #11
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	4903      	ldr	r1, [pc, #12]	@ (8004550 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004542:	5ccb      	ldrb	r3, [r1, r3]
 8004544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004548:	4618      	mov	r0, r3
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40021000 	.word	0x40021000
 8004550:	08006fa8 	.word	0x08006fa8

08004554 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800455c:	4b0a      	ldr	r3, [pc, #40]	@ (8004588 <RCC_Delay+0x34>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a0a      	ldr	r2, [pc, #40]	@ (800458c <RCC_Delay+0x38>)
 8004562:	fba2 2303 	umull	r2, r3, r2, r3
 8004566:	0a5b      	lsrs	r3, r3, #9
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	fb02 f303 	mul.w	r3, r2, r3
 800456e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004570:	bf00      	nop
  }
  while (Delay --);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	1e5a      	subs	r2, r3, #1
 8004576:	60fa      	str	r2, [r7, #12]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1f9      	bne.n	8004570 <RCC_Delay+0x1c>
}
 800457c:	bf00      	nop
 800457e:	bf00      	nop
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr
 8004588:	20000028 	.word	0x20000028
 800458c:	10624dd3 	.word	0x10624dd3

08004590 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e041      	b.n	8004626 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d106      	bne.n	80045bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7fd fca6 	bl	8001f08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2202      	movs	r2, #2
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3304      	adds	r3, #4
 80045cc:	4619      	mov	r1, r3
 80045ce:	4610      	mov	r0, r2
 80045d0:	f000 fab2 	bl	8004b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b082      	sub	sp, #8
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e041      	b.n	80046c4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	d106      	bne.n	800465a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f839 	bl	80046cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2202      	movs	r2, #2
 800465e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	3304      	adds	r3, #4
 800466a:	4619      	mov	r1, r3
 800466c:	4610      	mov	r0, r2
 800466e:	f000 fa63 	bl	8004b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3708      	adds	r7, #8
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	bc80      	pop	{r7}
 80046dc:	4770      	bx	lr
	...

080046e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d109      	bne.n	8004704 <HAL_TIM_PWM_Start+0x24>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	bf14      	ite	ne
 80046fc:	2301      	movne	r3, #1
 80046fe:	2300      	moveq	r3, #0
 8004700:	b2db      	uxtb	r3, r3
 8004702:	e022      	b.n	800474a <HAL_TIM_PWM_Start+0x6a>
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	2b04      	cmp	r3, #4
 8004708:	d109      	bne.n	800471e <HAL_TIM_PWM_Start+0x3e>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b01      	cmp	r3, #1
 8004714:	bf14      	ite	ne
 8004716:	2301      	movne	r3, #1
 8004718:	2300      	moveq	r3, #0
 800471a:	b2db      	uxtb	r3, r3
 800471c:	e015      	b.n	800474a <HAL_TIM_PWM_Start+0x6a>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b08      	cmp	r3, #8
 8004722:	d109      	bne.n	8004738 <HAL_TIM_PWM_Start+0x58>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b01      	cmp	r3, #1
 800472e:	bf14      	ite	ne
 8004730:	2301      	movne	r3, #1
 8004732:	2300      	moveq	r3, #0
 8004734:	b2db      	uxtb	r3, r3
 8004736:	e008      	b.n	800474a <HAL_TIM_PWM_Start+0x6a>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b01      	cmp	r3, #1
 8004742:	bf14      	ite	ne
 8004744:	2301      	movne	r3, #1
 8004746:	2300      	moveq	r3, #0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e05e      	b.n	8004810 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d104      	bne.n	8004762 <HAL_TIM_PWM_Start+0x82>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2202      	movs	r2, #2
 800475c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004760:	e013      	b.n	800478a <HAL_TIM_PWM_Start+0xaa>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2b04      	cmp	r3, #4
 8004766:	d104      	bne.n	8004772 <HAL_TIM_PWM_Start+0x92>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2202      	movs	r2, #2
 800476c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004770:	e00b      	b.n	800478a <HAL_TIM_PWM_Start+0xaa>
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	2b08      	cmp	r3, #8
 8004776:	d104      	bne.n	8004782 <HAL_TIM_PWM_Start+0xa2>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004780:	e003      	b.n	800478a <HAL_TIM_PWM_Start+0xaa>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2202      	movs	r2, #2
 8004786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2201      	movs	r2, #1
 8004790:	6839      	ldr	r1, [r7, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f000 fc5c 	bl	8005050 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a1e      	ldr	r2, [pc, #120]	@ (8004818 <HAL_TIM_PWM_Start+0x138>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d107      	bne.n	80047b2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047b0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a18      	ldr	r2, [pc, #96]	@ (8004818 <HAL_TIM_PWM_Start+0x138>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d00e      	beq.n	80047da <HAL_TIM_PWM_Start+0xfa>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047c4:	d009      	beq.n	80047da <HAL_TIM_PWM_Start+0xfa>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a14      	ldr	r2, [pc, #80]	@ (800481c <HAL_TIM_PWM_Start+0x13c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d004      	beq.n	80047da <HAL_TIM_PWM_Start+0xfa>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a12      	ldr	r2, [pc, #72]	@ (8004820 <HAL_TIM_PWM_Start+0x140>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d111      	bne.n	80047fe <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2b06      	cmp	r3, #6
 80047ea:	d010      	beq.n	800480e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0201 	orr.w	r2, r2, #1
 80047fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047fc:	e007      	b.n	800480e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f042 0201 	orr.w	r2, r2, #1
 800480c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40012c00 	.word	0x40012c00
 800481c:	40000400 	.word	0x40000400
 8004820:	40000800 	.word	0x40000800

08004824 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004830:	2300      	movs	r3, #0
 8004832:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800483a:	2b01      	cmp	r3, #1
 800483c:	d101      	bne.n	8004842 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800483e:	2302      	movs	r3, #2
 8004840:	e0ae      	b.n	80049a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b0c      	cmp	r3, #12
 800484e:	f200 809f 	bhi.w	8004990 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004852:	a201      	add	r2, pc, #4	@ (adr r2, 8004858 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004858:	0800488d 	.word	0x0800488d
 800485c:	08004991 	.word	0x08004991
 8004860:	08004991 	.word	0x08004991
 8004864:	08004991 	.word	0x08004991
 8004868:	080048cd 	.word	0x080048cd
 800486c:	08004991 	.word	0x08004991
 8004870:	08004991 	.word	0x08004991
 8004874:	08004991 	.word	0x08004991
 8004878:	0800490f 	.word	0x0800490f
 800487c:	08004991 	.word	0x08004991
 8004880:	08004991 	.word	0x08004991
 8004884:	08004991 	.word	0x08004991
 8004888:	0800494f 	.word	0x0800494f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68b9      	ldr	r1, [r7, #8]
 8004892:	4618      	mov	r0, r3
 8004894:	f000 f9be 	bl	8004c14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	699a      	ldr	r2, [r3, #24]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0208 	orr.w	r2, r2, #8
 80048a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	699a      	ldr	r2, [r3, #24]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 0204 	bic.w	r2, r2, #4
 80048b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6999      	ldr	r1, [r3, #24]
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	691a      	ldr	r2, [r3, #16]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	619a      	str	r2, [r3, #24]
      break;
 80048ca:	e064      	b.n	8004996 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68b9      	ldr	r1, [r7, #8]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 fa04 	bl	8004ce0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	699a      	ldr	r2, [r3, #24]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699a      	ldr	r2, [r3, #24]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6999      	ldr	r1, [r3, #24]
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	021a      	lsls	r2, r3, #8
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	619a      	str	r2, [r3, #24]
      break;
 800490c:	e043      	b.n	8004996 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68b9      	ldr	r1, [r7, #8]
 8004914:	4618      	mov	r0, r3
 8004916:	f000 fa4d 	bl	8004db4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	69da      	ldr	r2, [r3, #28]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f042 0208 	orr.w	r2, r2, #8
 8004928:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	69da      	ldr	r2, [r3, #28]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 0204 	bic.w	r2, r2, #4
 8004938:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	69d9      	ldr	r1, [r3, #28]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	691a      	ldr	r2, [r3, #16]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	430a      	orrs	r2, r1
 800494a:	61da      	str	r2, [r3, #28]
      break;
 800494c:	e023      	b.n	8004996 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68b9      	ldr	r1, [r7, #8]
 8004954:	4618      	mov	r0, r3
 8004956:	f000 fa97 	bl	8004e88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	69da      	ldr	r2, [r3, #28]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004968:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	69da      	ldr	r2, [r3, #28]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004978:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	69d9      	ldr	r1, [r3, #28]
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	021a      	lsls	r2, r3, #8
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	61da      	str	r2, [r3, #28]
      break;
 800498e:	e002      	b.n	8004996 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	75fb      	strb	r3, [r7, #23]
      break;
 8004994:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800499e:	7dfb      	ldrb	r3, [r7, #23]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3718      	adds	r7, #24
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d101      	bne.n	80049c4 <HAL_TIM_ConfigClockSource+0x1c>
 80049c0:	2302      	movs	r3, #2
 80049c2:	e0b4      	b.n	8004b2e <HAL_TIM_ConfigClockSource+0x186>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80049e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049fc:	d03e      	beq.n	8004a7c <HAL_TIM_ConfigClockSource+0xd4>
 80049fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a02:	f200 8087 	bhi.w	8004b14 <HAL_TIM_ConfigClockSource+0x16c>
 8004a06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a0a:	f000 8086 	beq.w	8004b1a <HAL_TIM_ConfigClockSource+0x172>
 8004a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a12:	d87f      	bhi.n	8004b14 <HAL_TIM_ConfigClockSource+0x16c>
 8004a14:	2b70      	cmp	r3, #112	@ 0x70
 8004a16:	d01a      	beq.n	8004a4e <HAL_TIM_ConfigClockSource+0xa6>
 8004a18:	2b70      	cmp	r3, #112	@ 0x70
 8004a1a:	d87b      	bhi.n	8004b14 <HAL_TIM_ConfigClockSource+0x16c>
 8004a1c:	2b60      	cmp	r3, #96	@ 0x60
 8004a1e:	d050      	beq.n	8004ac2 <HAL_TIM_ConfigClockSource+0x11a>
 8004a20:	2b60      	cmp	r3, #96	@ 0x60
 8004a22:	d877      	bhi.n	8004b14 <HAL_TIM_ConfigClockSource+0x16c>
 8004a24:	2b50      	cmp	r3, #80	@ 0x50
 8004a26:	d03c      	beq.n	8004aa2 <HAL_TIM_ConfigClockSource+0xfa>
 8004a28:	2b50      	cmp	r3, #80	@ 0x50
 8004a2a:	d873      	bhi.n	8004b14 <HAL_TIM_ConfigClockSource+0x16c>
 8004a2c:	2b40      	cmp	r3, #64	@ 0x40
 8004a2e:	d058      	beq.n	8004ae2 <HAL_TIM_ConfigClockSource+0x13a>
 8004a30:	2b40      	cmp	r3, #64	@ 0x40
 8004a32:	d86f      	bhi.n	8004b14 <HAL_TIM_ConfigClockSource+0x16c>
 8004a34:	2b30      	cmp	r3, #48	@ 0x30
 8004a36:	d064      	beq.n	8004b02 <HAL_TIM_ConfigClockSource+0x15a>
 8004a38:	2b30      	cmp	r3, #48	@ 0x30
 8004a3a:	d86b      	bhi.n	8004b14 <HAL_TIM_ConfigClockSource+0x16c>
 8004a3c:	2b20      	cmp	r3, #32
 8004a3e:	d060      	beq.n	8004b02 <HAL_TIM_ConfigClockSource+0x15a>
 8004a40:	2b20      	cmp	r3, #32
 8004a42:	d867      	bhi.n	8004b14 <HAL_TIM_ConfigClockSource+0x16c>
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d05c      	beq.n	8004b02 <HAL_TIM_ConfigClockSource+0x15a>
 8004a48:	2b10      	cmp	r3, #16
 8004a4a:	d05a      	beq.n	8004b02 <HAL_TIM_ConfigClockSource+0x15a>
 8004a4c:	e062      	b.n	8004b14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a5e:	f000 fad8 	bl	8005012 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	609a      	str	r2, [r3, #8]
      break;
 8004a7a:	e04f      	b.n	8004b1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a8c:	f000 fac1 	bl	8005012 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a9e:	609a      	str	r2, [r3, #8]
      break;
 8004aa0:	e03c      	b.n	8004b1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aae:	461a      	mov	r2, r3
 8004ab0:	f000 fa38 	bl	8004f24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2150      	movs	r1, #80	@ 0x50
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 fa8f 	bl	8004fde <TIM_ITRx_SetConfig>
      break;
 8004ac0:	e02c      	b.n	8004b1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ace:	461a      	mov	r2, r3
 8004ad0:	f000 fa56 	bl	8004f80 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2160      	movs	r1, #96	@ 0x60
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 fa7f 	bl	8004fde <TIM_ITRx_SetConfig>
      break;
 8004ae0:	e01c      	b.n	8004b1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aee:	461a      	mov	r2, r3
 8004af0:	f000 fa18 	bl	8004f24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2140      	movs	r1, #64	@ 0x40
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fa6f 	bl	8004fde <TIM_ITRx_SetConfig>
      break;
 8004b00:	e00c      	b.n	8004b1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	f000 fa66 	bl	8004fde <TIM_ITRx_SetConfig>
      break;
 8004b12:	e003      	b.n	8004b1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	73fb      	strb	r3, [r7, #15]
      break;
 8004b18:	e000      	b.n	8004b1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
	...

08004b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a2f      	ldr	r2, [pc, #188]	@ (8004c08 <TIM_Base_SetConfig+0xd0>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d00b      	beq.n	8004b68 <TIM_Base_SetConfig+0x30>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b56:	d007      	beq.n	8004b68 <TIM_Base_SetConfig+0x30>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a2c      	ldr	r2, [pc, #176]	@ (8004c0c <TIM_Base_SetConfig+0xd4>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d003      	beq.n	8004b68 <TIM_Base_SetConfig+0x30>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a2b      	ldr	r2, [pc, #172]	@ (8004c10 <TIM_Base_SetConfig+0xd8>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d108      	bne.n	8004b7a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a22      	ldr	r2, [pc, #136]	@ (8004c08 <TIM_Base_SetConfig+0xd0>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d00b      	beq.n	8004b9a <TIM_Base_SetConfig+0x62>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b88:	d007      	beq.n	8004b9a <TIM_Base_SetConfig+0x62>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a1f      	ldr	r2, [pc, #124]	@ (8004c0c <TIM_Base_SetConfig+0xd4>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d003      	beq.n	8004b9a <TIM_Base_SetConfig+0x62>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a1e      	ldr	r2, [pc, #120]	@ (8004c10 <TIM_Base_SetConfig+0xd8>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d108      	bne.n	8004bac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a0d      	ldr	r2, [pc, #52]	@ (8004c08 <TIM_Base_SetConfig+0xd0>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d103      	bne.n	8004be0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	691a      	ldr	r2, [r3, #16]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d005      	beq.n	8004bfe <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	f023 0201 	bic.w	r2, r3, #1
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	611a      	str	r2, [r3, #16]
  }
}
 8004bfe:	bf00      	nop
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bc80      	pop	{r7}
 8004c06:	4770      	bx	lr
 8004c08:	40012c00 	.word	0x40012c00
 8004c0c:	40000400 	.word	0x40000400
 8004c10:	40000800 	.word	0x40000800

08004c14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b087      	sub	sp, #28
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	f023 0201 	bic.w	r2, r3, #1
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f023 0303 	bic.w	r3, r3, #3
 8004c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f023 0302 	bic.w	r3, r3, #2
 8004c5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a1c      	ldr	r2, [pc, #112]	@ (8004cdc <TIM_OC1_SetConfig+0xc8>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d10c      	bne.n	8004c8a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f023 0308 	bic.w	r3, r3, #8
 8004c76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f023 0304 	bic.w	r3, r3, #4
 8004c88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a13      	ldr	r2, [pc, #76]	@ (8004cdc <TIM_OC1_SetConfig+0xc8>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d111      	bne.n	8004cb6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	621a      	str	r2, [r3, #32]
}
 8004cd0:	bf00      	nop
 8004cd2:	371c      	adds	r7, #28
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bc80      	pop	{r7}
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	40012c00 	.word	0x40012c00

08004ce0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	f023 0210 	bic.w	r2, r3, #16
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	021b      	lsls	r3, r3, #8
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	f023 0320 	bic.w	r3, r3, #32
 8004d2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	011b      	lsls	r3, r3, #4
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a1d      	ldr	r2, [pc, #116]	@ (8004db0 <TIM_OC2_SetConfig+0xd0>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d10d      	bne.n	8004d5c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	011b      	lsls	r3, r3, #4
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a14      	ldr	r2, [pc, #80]	@ (8004db0 <TIM_OC2_SetConfig+0xd0>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d113      	bne.n	8004d8c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	621a      	str	r2, [r3, #32]
}
 8004da6:	bf00      	nop
 8004da8:	371c      	adds	r7, #28
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bc80      	pop	{r7}
 8004dae:	4770      	bx	lr
 8004db0:	40012c00 	.word	0x40012c00

08004db4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b087      	sub	sp, #28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f023 0303 	bic.w	r3, r3, #3
 8004dea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004dfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	021b      	lsls	r3, r3, #8
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a1d      	ldr	r2, [pc, #116]	@ (8004e84 <TIM_OC3_SetConfig+0xd0>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d10d      	bne.n	8004e2e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	021b      	lsls	r3, r3, #8
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a14      	ldr	r2, [pc, #80]	@ (8004e84 <TIM_OC3_SetConfig+0xd0>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d113      	bne.n	8004e5e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	011b      	lsls	r3, r3, #4
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	011b      	lsls	r3, r3, #4
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	621a      	str	r2, [r3, #32]
}
 8004e78:	bf00      	nop
 8004e7a:	371c      	adds	r7, #28
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bc80      	pop	{r7}
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	40012c00 	.word	0x40012c00

08004e88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b087      	sub	sp, #28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a1b      	ldr	r3, [r3, #32]
 8004e9c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	69db      	ldr	r3, [r3, #28]
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	021b      	lsls	r3, r3, #8
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ed2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	031b      	lsls	r3, r3, #12
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a0f      	ldr	r2, [pc, #60]	@ (8004f20 <TIM_OC4_SetConfig+0x98>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d109      	bne.n	8004efc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004eee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	019b      	lsls	r3, r3, #6
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	621a      	str	r2, [r3, #32]
}
 8004f16:	bf00      	nop
 8004f18:	371c      	adds	r7, #28
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bc80      	pop	{r7}
 8004f1e:	4770      	bx	lr
 8004f20:	40012c00 	.word	0x40012c00

08004f24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b087      	sub	sp, #28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	f023 0201 	bic.w	r2, r3, #1
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	011b      	lsls	r3, r3, #4
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f023 030a 	bic.w	r3, r3, #10
 8004f60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	621a      	str	r2, [r3, #32]
}
 8004f76:	bf00      	nop
 8004f78:	371c      	adds	r7, #28
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bc80      	pop	{r7}
 8004f7e:	4770      	bx	lr

08004f80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b087      	sub	sp, #28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6a1b      	ldr	r3, [r3, #32]
 8004f90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	f023 0210 	bic.w	r2, r3, #16
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004faa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	031b      	lsls	r3, r3, #12
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004fbc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	011b      	lsls	r3, r3, #4
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	621a      	str	r2, [r3, #32]
}
 8004fd4:	bf00      	nop
 8004fd6:	371c      	adds	r7, #28
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bc80      	pop	{r7}
 8004fdc:	4770      	bx	lr

08004fde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b085      	sub	sp, #20
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
 8004fe6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ff4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	f043 0307 	orr.w	r3, r3, #7
 8005000:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	609a      	str	r2, [r3, #8]
}
 8005008:	bf00      	nop
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	bc80      	pop	{r7}
 8005010:	4770      	bx	lr

08005012 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005012:	b480      	push	{r7}
 8005014:	b087      	sub	sp, #28
 8005016:	af00      	add	r7, sp, #0
 8005018:	60f8      	str	r0, [r7, #12]
 800501a:	60b9      	str	r1, [r7, #8]
 800501c:	607a      	str	r2, [r7, #4]
 800501e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800502c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	021a      	lsls	r2, r3, #8
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	431a      	orrs	r2, r3
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	4313      	orrs	r3, r2
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	4313      	orrs	r3, r2
 800503e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	609a      	str	r2, [r3, #8]
}
 8005046:	bf00      	nop
 8005048:	371c      	adds	r7, #28
 800504a:	46bd      	mov	sp, r7
 800504c:	bc80      	pop	{r7}
 800504e:	4770      	bx	lr

08005050 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005050:	b480      	push	{r7}
 8005052:	b087      	sub	sp, #28
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	f003 031f 	and.w	r3, r3, #31
 8005062:	2201      	movs	r2, #1
 8005064:	fa02 f303 	lsl.w	r3, r2, r3
 8005068:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6a1a      	ldr	r2, [r3, #32]
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	43db      	mvns	r3, r3
 8005072:	401a      	ands	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6a1a      	ldr	r2, [r3, #32]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	f003 031f 	and.w	r3, r3, #31
 8005082:	6879      	ldr	r1, [r7, #4]
 8005084:	fa01 f303 	lsl.w	r3, r1, r3
 8005088:	431a      	orrs	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	621a      	str	r2, [r3, #32]
}
 800508e:	bf00      	nop
 8005090:	371c      	adds	r7, #28
 8005092:	46bd      	mov	sp, r7
 8005094:	bc80      	pop	{r7}
 8005096:	4770      	bx	lr

08005098 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d101      	bne.n	80050b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050ac:	2302      	movs	r3, #2
 80050ae:	e046      	b.n	800513e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	4313      	orrs	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a16      	ldr	r2, [pc, #88]	@ (8005148 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d00e      	beq.n	8005112 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050fc:	d009      	beq.n	8005112 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a12      	ldr	r2, [pc, #72]	@ (800514c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d004      	beq.n	8005112 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a10      	ldr	r2, [pc, #64]	@ (8005150 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d10c      	bne.n	800512c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005118:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	4313      	orrs	r3, r2
 8005122:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3714      	adds	r7, #20
 8005142:	46bd      	mov	sp, r7
 8005144:	bc80      	pop	{r7}
 8005146:	4770      	bx	lr
 8005148:	40012c00 	.word	0x40012c00
 800514c:	40000400 	.word	0x40000400
 8005150:	40000800 	.word	0x40000800

08005154 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e042      	b.n	80051ec <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d106      	bne.n	8005180 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7fc ff24 	bl	8001fc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2224      	movs	r2, #36	@ 0x24
 8005184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68da      	ldr	r2, [r3, #12]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005196:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 fcd5 	bl	8005b48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	691a      	ldr	r2, [r3, #16]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	695a      	ldr	r2, [r3, #20]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68da      	ldr	r2, [r3, #12]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2220      	movs	r2, #32
 80051d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2220      	movs	r2, #32
 80051e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3708      	adds	r7, #8
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	4613      	mov	r3, r2
 8005200:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b20      	cmp	r3, #32
 800520c:	d112      	bne.n	8005234 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d002      	beq.n	800521a <HAL_UART_Receive_IT+0x26>
 8005214:	88fb      	ldrh	r3, [r7, #6]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e00b      	b.n	8005236 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005224:	88fb      	ldrh	r3, [r7, #6]
 8005226:	461a      	mov	r2, r3
 8005228:	68b9      	ldr	r1, [r7, #8]
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f000 fab7 	bl	800579e <UART_Start_Receive_IT>
 8005230:	4603      	mov	r3, r0
 8005232:	e000      	b.n	8005236 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005234:	2302      	movs	r3, #2
  }
}
 8005236:	4618      	mov	r0, r3
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
	...

08005240 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b0ba      	sub	sp, #232	@ 0xe8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005266:	2300      	movs	r3, #0
 8005268:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800526c:	2300      	movs	r3, #0
 800526e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005276:	f003 030f 	and.w	r3, r3, #15
 800527a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800527e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10f      	bne.n	80052a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800528a:	f003 0320 	and.w	r3, r3, #32
 800528e:	2b00      	cmp	r3, #0
 8005290:	d009      	beq.n	80052a6 <HAL_UART_IRQHandler+0x66>
 8005292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005296:	f003 0320 	and.w	r3, r3, #32
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 fb93 	bl	80059ca <UART_Receive_IT>
      return;
 80052a4:	e25b      	b.n	800575e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80052a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f000 80de 	beq.w	800546c <HAL_UART_IRQHandler+0x22c>
 80052b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d106      	bne.n	80052ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80052bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052c0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 80d1 	beq.w	800546c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00b      	beq.n	80052ee <HAL_UART_IRQHandler+0xae>
 80052d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d005      	beq.n	80052ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052e6:	f043 0201 	orr.w	r2, r3, #1
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052f2:	f003 0304 	and.w	r3, r3, #4
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00b      	beq.n	8005312 <HAL_UART_IRQHandler+0xd2>
 80052fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b00      	cmp	r3, #0
 8005304:	d005      	beq.n	8005312 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800530a:	f043 0202 	orr.w	r2, r3, #2
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005316:	f003 0302 	and.w	r3, r3, #2
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00b      	beq.n	8005336 <HAL_UART_IRQHandler+0xf6>
 800531e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b00      	cmp	r3, #0
 8005328:	d005      	beq.n	8005336 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800532e:	f043 0204 	orr.w	r2, r3, #4
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800533a:	f003 0308 	and.w	r3, r3, #8
 800533e:	2b00      	cmp	r3, #0
 8005340:	d011      	beq.n	8005366 <HAL_UART_IRQHandler+0x126>
 8005342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005346:	f003 0320 	and.w	r3, r3, #32
 800534a:	2b00      	cmp	r3, #0
 800534c:	d105      	bne.n	800535a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800534e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b00      	cmp	r3, #0
 8005358:	d005      	beq.n	8005366 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800535e:	f043 0208 	orr.w	r2, r3, #8
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800536a:	2b00      	cmp	r3, #0
 800536c:	f000 81f2 	beq.w	8005754 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005374:	f003 0320 	and.w	r3, r3, #32
 8005378:	2b00      	cmp	r3, #0
 800537a:	d008      	beq.n	800538e <HAL_UART_IRQHandler+0x14e>
 800537c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005380:	f003 0320 	and.w	r3, r3, #32
 8005384:	2b00      	cmp	r3, #0
 8005386:	d002      	beq.n	800538e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 fb1e 	bl	80059ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	695b      	ldr	r3, [r3, #20]
 8005394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005398:	2b00      	cmp	r3, #0
 800539a:	bf14      	ite	ne
 800539c:	2301      	movne	r3, #1
 800539e:	2300      	moveq	r3, #0
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053aa:	f003 0308 	and.w	r3, r3, #8
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d103      	bne.n	80053ba <HAL_UART_IRQHandler+0x17a>
 80053b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d04f      	beq.n	800545a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 fa28 	bl	8005810 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d041      	beq.n	8005452 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	3314      	adds	r3, #20
 80053d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80053dc:	e853 3f00 	ldrex	r3, [r3]
 80053e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80053e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80053e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	3314      	adds	r3, #20
 80053f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80053fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80053fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005402:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005406:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800540a:	e841 2300 	strex	r3, r2, [r1]
 800540e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005412:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1d9      	bne.n	80053ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800541e:	2b00      	cmp	r3, #0
 8005420:	d013      	beq.n	800544a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005426:	4a7e      	ldr	r2, [pc, #504]	@ (8005620 <HAL_UART_IRQHandler+0x3e0>)
 8005428:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800542e:	4618      	mov	r0, r3
 8005430:	f7fd f88c 	bl	800254c <HAL_DMA_Abort_IT>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d016      	beq.n	8005468 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800543e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005444:	4610      	mov	r0, r2
 8005446:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005448:	e00e      	b.n	8005468 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f993 	bl	8005776 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005450:	e00a      	b.n	8005468 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f98f 	bl	8005776 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005458:	e006      	b.n	8005468 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f98b 	bl	8005776 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005466:	e175      	b.n	8005754 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005468:	bf00      	nop
    return;
 800546a:	e173      	b.n	8005754 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005470:	2b01      	cmp	r3, #1
 8005472:	f040 814f 	bne.w	8005714 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800547a:	f003 0310 	and.w	r3, r3, #16
 800547e:	2b00      	cmp	r3, #0
 8005480:	f000 8148 	beq.w	8005714 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005488:	f003 0310 	and.w	r3, r3, #16
 800548c:	2b00      	cmp	r3, #0
 800548e:	f000 8141 	beq.w	8005714 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005492:	2300      	movs	r3, #0
 8005494:	60bb      	str	r3, [r7, #8]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	60bb      	str	r3, [r7, #8]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	60bb      	str	r3, [r7, #8]
 80054a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 80b6 	beq.w	8005624 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 8145 	beq.w	8005758 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80054d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054d6:	429a      	cmp	r2, r3
 80054d8:	f080 813e 	bcs.w	8005758 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	2b20      	cmp	r3, #32
 80054ec:	f000 8088 	beq.w	8005600 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	330c      	adds	r3, #12
 80054f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80054fe:	e853 3f00 	ldrex	r3, [r3]
 8005502:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005506:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800550a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800550e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	330c      	adds	r3, #12
 8005518:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800551c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005520:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005524:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005528:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800552c:	e841 2300 	strex	r3, r2, [r1]
 8005530:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005534:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1d9      	bne.n	80054f0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	3314      	adds	r3, #20
 8005542:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005544:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005546:	e853 3f00 	ldrex	r3, [r3]
 800554a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800554c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800554e:	f023 0301 	bic.w	r3, r3, #1
 8005552:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3314      	adds	r3, #20
 800555c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005560:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005564:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005566:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005568:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800556c:	e841 2300 	strex	r3, r2, [r1]
 8005570:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005572:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1e1      	bne.n	800553c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	3314      	adds	r3, #20
 800557e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005580:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005582:	e853 3f00 	ldrex	r3, [r3]
 8005586:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005588:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800558a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800558e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	3314      	adds	r3, #20
 8005598:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800559c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800559e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80055a2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80055a4:	e841 2300 	strex	r3, r2, [r1]
 80055a8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80055aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1e3      	bne.n	8005578 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2220      	movs	r2, #32
 80055b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	330c      	adds	r3, #12
 80055c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055c8:	e853 3f00 	ldrex	r3, [r3]
 80055cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80055ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055d0:	f023 0310 	bic.w	r3, r3, #16
 80055d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	330c      	adds	r3, #12
 80055de:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80055e2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80055e4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80055e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80055ea:	e841 2300 	strex	r3, r2, [r1]
 80055ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80055f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1e3      	bne.n	80055be <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7fc ff6b 	bl	80024d6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2202      	movs	r2, #2
 8005604:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800560e:	b29b      	uxth	r3, r3
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	b29b      	uxth	r3, r3
 8005614:	4619      	mov	r1, r3
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f8b6 	bl	8005788 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800561c:	e09c      	b.n	8005758 <HAL_UART_IRQHandler+0x518>
 800561e:	bf00      	nop
 8005620:	080058d5 	.word	0x080058d5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800562c:	b29b      	uxth	r3, r3
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	f000 808e 	beq.w	800575c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005640:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 8089 	beq.w	800575c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	330c      	adds	r3, #12
 8005650:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005654:	e853 3f00 	ldrex	r3, [r3]
 8005658:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800565a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800565c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005660:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	330c      	adds	r3, #12
 800566a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800566e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005670:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005672:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005674:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005676:	e841 2300 	strex	r3, r2, [r1]
 800567a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800567c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1e3      	bne.n	800564a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	3314      	adds	r3, #20
 8005688:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568c:	e853 3f00 	ldrex	r3, [r3]
 8005690:	623b      	str	r3, [r7, #32]
   return(result);
 8005692:	6a3b      	ldr	r3, [r7, #32]
 8005694:	f023 0301 	bic.w	r3, r3, #1
 8005698:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3314      	adds	r3, #20
 80056a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80056a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80056a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056ae:	e841 2300 	strex	r3, r2, [r1]
 80056b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1e3      	bne.n	8005682 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2220      	movs	r2, #32
 80056be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	330c      	adds	r3, #12
 80056ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	e853 3f00 	ldrex	r3, [r3]
 80056d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 0310 	bic.w	r3, r3, #16
 80056de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	330c      	adds	r3, #12
 80056e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80056ec:	61fa      	str	r2, [r7, #28]
 80056ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f0:	69b9      	ldr	r1, [r7, #24]
 80056f2:	69fa      	ldr	r2, [r7, #28]
 80056f4:	e841 2300 	strex	r3, r2, [r1]
 80056f8:	617b      	str	r3, [r7, #20]
   return(result);
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1e3      	bne.n	80056c8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2202      	movs	r2, #2
 8005704:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005706:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800570a:	4619      	mov	r1, r3
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f83b 	bl	8005788 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005712:	e023      	b.n	800575c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005718:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800571c:	2b00      	cmp	r3, #0
 800571e:	d009      	beq.n	8005734 <HAL_UART_IRQHandler+0x4f4>
 8005720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005728:	2b00      	cmp	r3, #0
 800572a:	d003      	beq.n	8005734 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f8e5 	bl	80058fc <UART_Transmit_IT>
    return;
 8005732:	e014      	b.n	800575e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00e      	beq.n	800575e <HAL_UART_IRQHandler+0x51e>
 8005740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005748:	2b00      	cmp	r3, #0
 800574a:	d008      	beq.n	800575e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f924 	bl	800599a <UART_EndTransmit_IT>
    return;
 8005752:	e004      	b.n	800575e <HAL_UART_IRQHandler+0x51e>
    return;
 8005754:	bf00      	nop
 8005756:	e002      	b.n	800575e <HAL_UART_IRQHandler+0x51e>
      return;
 8005758:	bf00      	nop
 800575a:	e000      	b.n	800575e <HAL_UART_IRQHandler+0x51e>
      return;
 800575c:	bf00      	nop
  }
}
 800575e:	37e8      	adds	r7, #232	@ 0xe8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	bc80      	pop	{r7}
 8005774:	4770      	bx	lr

08005776 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005776:	b480      	push	{r7}
 8005778:	b083      	sub	sp, #12
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800577e:	bf00      	nop
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	bc80      	pop	{r7}
 8005786:	4770      	bx	lr

08005788 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	460b      	mov	r3, r1
 8005792:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	bc80      	pop	{r7}
 800579c:	4770      	bx	lr

0800579e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800579e:	b480      	push	{r7}
 80057a0:	b085      	sub	sp, #20
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	60f8      	str	r0, [r7, #12]
 80057a6:	60b9      	str	r1, [r7, #8]
 80057a8:	4613      	mov	r3, r2
 80057aa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	88fa      	ldrh	r2, [r7, #6]
 80057b6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	88fa      	ldrh	r2, [r7, #6]
 80057bc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2222      	movs	r2, #34	@ 0x22
 80057c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d007      	beq.n	80057e4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68da      	ldr	r2, [r3, #12]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057e2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	695a      	ldr	r2, [r3, #20]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f042 0201 	orr.w	r2, r2, #1
 80057f2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68da      	ldr	r2, [r3, #12]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f042 0220 	orr.w	r2, r2, #32
 8005802:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	bc80      	pop	{r7}
 800580e:	4770      	bx	lr

08005810 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005810:	b480      	push	{r7}
 8005812:	b095      	sub	sp, #84	@ 0x54
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	330c      	adds	r3, #12
 800581e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005822:	e853 3f00 	ldrex	r3, [r3]
 8005826:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800582e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	330c      	adds	r3, #12
 8005836:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005838:	643a      	str	r2, [r7, #64]	@ 0x40
 800583a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800583e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005840:	e841 2300 	strex	r3, r2, [r1]
 8005844:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1e5      	bne.n	8005818 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	3314      	adds	r3, #20
 8005852:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	e853 3f00 	ldrex	r3, [r3]
 800585a:	61fb      	str	r3, [r7, #28]
   return(result);
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	f023 0301 	bic.w	r3, r3, #1
 8005862:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3314      	adds	r3, #20
 800586a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800586c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800586e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005870:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005872:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005874:	e841 2300 	strex	r3, r2, [r1]
 8005878:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800587a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1e5      	bne.n	800584c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005884:	2b01      	cmp	r3, #1
 8005886:	d119      	bne.n	80058bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	330c      	adds	r3, #12
 800588e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	e853 3f00 	ldrex	r3, [r3]
 8005896:	60bb      	str	r3, [r7, #8]
   return(result);
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	f023 0310 	bic.w	r3, r3, #16
 800589e:	647b      	str	r3, [r7, #68]	@ 0x44
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	330c      	adds	r3, #12
 80058a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058a8:	61ba      	str	r2, [r7, #24]
 80058aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ac:	6979      	ldr	r1, [r7, #20]
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	e841 2300 	strex	r3, r2, [r1]
 80058b4:	613b      	str	r3, [r7, #16]
   return(result);
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1e5      	bne.n	8005888 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2220      	movs	r2, #32
 80058c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80058ca:	bf00      	nop
 80058cc:	3754      	adds	r7, #84	@ 0x54
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bc80      	pop	{r7}
 80058d2:	4770      	bx	lr

080058d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f7ff ff41 	bl	8005776 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058f4:	bf00      	nop
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b21      	cmp	r3, #33	@ 0x21
 800590e:	d13e      	bne.n	800598e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005918:	d114      	bne.n	8005944 <UART_Transmit_IT+0x48>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d110      	bne.n	8005944 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	881b      	ldrh	r3, [r3, #0]
 800592c:	461a      	mov	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005936:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	1c9a      	adds	r2, r3, #2
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	621a      	str	r2, [r3, #32]
 8005942:	e008      	b.n	8005956 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a1b      	ldr	r3, [r3, #32]
 8005948:	1c59      	adds	r1, r3, #1
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	6211      	str	r1, [r2, #32]
 800594e:	781a      	ldrb	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800595a:	b29b      	uxth	r3, r3
 800595c:	3b01      	subs	r3, #1
 800595e:	b29b      	uxth	r3, r3
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	4619      	mov	r1, r3
 8005964:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005966:	2b00      	cmp	r3, #0
 8005968:	d10f      	bne.n	800598a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68da      	ldr	r2, [r3, #12]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005978:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68da      	ldr	r2, [r3, #12]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005988:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800598a:	2300      	movs	r3, #0
 800598c:	e000      	b.n	8005990 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800598e:	2302      	movs	r3, #2
  }
}
 8005990:	4618      	mov	r0, r3
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	bc80      	pop	{r7}
 8005998:	4770      	bx	lr

0800599a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b082      	sub	sp, #8
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68da      	ldr	r2, [r3, #12]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2220      	movs	r2, #32
 80059b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7ff fed2 	bl	8005764 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b08c      	sub	sp, #48	@ 0x30
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b22      	cmp	r3, #34	@ 0x22
 80059dc:	f040 80ae 	bne.w	8005b3c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059e8:	d117      	bne.n	8005a1a <UART_Receive_IT+0x50>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d113      	bne.n	8005a1a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80059f2:	2300      	movs	r3, #0
 80059f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059fa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a12:	1c9a      	adds	r2, r3, #2
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a18:	e026      	b.n	8005a68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005a20:	2300      	movs	r3, #0
 8005a22:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a2c:	d007      	beq.n	8005a3e <UART_Receive_IT+0x74>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d10a      	bne.n	8005a4c <UART_Receive_IT+0x82>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d106      	bne.n	8005a4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a48:	701a      	strb	r2, [r3, #0]
 8005a4a:	e008      	b.n	8005a5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a62:	1c5a      	adds	r2, r3, #1
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	4619      	mov	r1, r3
 8005a76:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d15d      	bne.n	8005b38 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68da      	ldr	r2, [r3, #12]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f022 0220 	bic.w	r2, r2, #32
 8005a8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68da      	ldr	r2, [r3, #12]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	695a      	ldr	r2, [r3, #20]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0201 	bic.w	r2, r2, #1
 8005aaa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d135      	bne.n	8005b2e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	330c      	adds	r3, #12
 8005ace:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	e853 3f00 	ldrex	r3, [r3]
 8005ad6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	f023 0310 	bic.w	r3, r3, #16
 8005ade:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	330c      	adds	r3, #12
 8005ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ae8:	623a      	str	r2, [r7, #32]
 8005aea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aec:	69f9      	ldr	r1, [r7, #28]
 8005aee:	6a3a      	ldr	r2, [r7, #32]
 8005af0:	e841 2300 	strex	r3, r2, [r1]
 8005af4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1e5      	bne.n	8005ac8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0310 	and.w	r3, r3, #16
 8005b06:	2b10      	cmp	r3, #16
 8005b08:	d10a      	bne.n	8005b20 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	60fb      	str	r3, [r7, #12]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b24:	4619      	mov	r1, r3
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7ff fe2e 	bl	8005788 <HAL_UARTEx_RxEventCallback>
 8005b2c:	e002      	b.n	8005b34 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7fa fd22 	bl	8000578 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b34:	2300      	movs	r3, #0
 8005b36:	e002      	b.n	8005b3e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	e000      	b.n	8005b3e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005b3c:	2302      	movs	r3, #2
  }
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3730      	adds	r7, #48	@ 0x30
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
	...

08005b48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68da      	ldr	r2, [r3, #12]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689a      	ldr	r2, [r3, #8]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	695b      	ldr	r3, [r3, #20]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005b82:	f023 030c 	bic.w	r3, r3, #12
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	6812      	ldr	r2, [r2, #0]
 8005b8a:	68b9      	ldr	r1, [r7, #8]
 8005b8c:	430b      	orrs	r3, r1
 8005b8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	699a      	ldr	r2, [r3, #24]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a2c      	ldr	r2, [pc, #176]	@ (8005c5c <UART_SetConfig+0x114>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d103      	bne.n	8005bb8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005bb0:	f7fe fcbc 	bl	800452c <HAL_RCC_GetPCLK2Freq>
 8005bb4:	60f8      	str	r0, [r7, #12]
 8005bb6:	e002      	b.n	8005bbe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005bb8:	f7fe fca4 	bl	8004504 <HAL_RCC_GetPCLK1Freq>
 8005bbc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	009a      	lsls	r2, r3, #2
 8005bc8:	441a      	add	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd4:	4a22      	ldr	r2, [pc, #136]	@ (8005c60 <UART_SetConfig+0x118>)
 8005bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bda:	095b      	lsrs	r3, r3, #5
 8005bdc:	0119      	lsls	r1, r3, #4
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	4613      	mov	r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4413      	add	r3, r2
 8005be6:	009a      	lsls	r2, r3, #2
 8005be8:	441a      	add	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8005c60 <UART_SetConfig+0x118>)
 8005bf6:	fba3 0302 	umull	r0, r3, r3, r2
 8005bfa:	095b      	lsrs	r3, r3, #5
 8005bfc:	2064      	movs	r0, #100	@ 0x64
 8005bfe:	fb00 f303 	mul.w	r3, r0, r3
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	011b      	lsls	r3, r3, #4
 8005c06:	3332      	adds	r3, #50	@ 0x32
 8005c08:	4a15      	ldr	r2, [pc, #84]	@ (8005c60 <UART_SetConfig+0x118>)
 8005c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c0e:	095b      	lsrs	r3, r3, #5
 8005c10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c14:	4419      	add	r1, r3
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	009a      	lsls	r2, r3, #2
 8005c20:	441a      	add	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8005c60 <UART_SetConfig+0x118>)
 8005c2e:	fba3 0302 	umull	r0, r3, r3, r2
 8005c32:	095b      	lsrs	r3, r3, #5
 8005c34:	2064      	movs	r0, #100	@ 0x64
 8005c36:	fb00 f303 	mul.w	r3, r0, r3
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	011b      	lsls	r3, r3, #4
 8005c3e:	3332      	adds	r3, #50	@ 0x32
 8005c40:	4a07      	ldr	r2, [pc, #28]	@ (8005c60 <UART_SetConfig+0x118>)
 8005c42:	fba2 2303 	umull	r2, r3, r2, r3
 8005c46:	095b      	lsrs	r3, r3, #5
 8005c48:	f003 020f 	and.w	r2, r3, #15
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	440a      	add	r2, r1
 8005c52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005c54:	bf00      	nop
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	40013800 	.word	0x40013800
 8005c60:	51eb851f 	.word	0x51eb851f

08005c64 <getLengStr>:
 */

#include "Custom_String.h"

uint16_t getLengStr(char *str)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
    uint16_t leng = 0;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	81fb      	strh	r3, [r7, #14]
    while (str[leng] != '\0')
 8005c70:	e002      	b.n	8005c78 <getLengStr+0x14>
    {
        leng++;
 8005c72:	89fb      	ldrh	r3, [r7, #14]
 8005c74:	3301      	adds	r3, #1
 8005c76:	81fb      	strh	r3, [r7, #14]
    while (str[leng] != '\0')
 8005c78:	89fb      	ldrh	r3, [r7, #14]
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1f6      	bne.n	8005c72 <getLengStr+0xe>
    }
    return leng;
 8005c84:	89fb      	ldrh	r3, [r7, #14]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bc80      	pop	{r7}
 8005c8e:	4770      	bx	lr

08005c90 <strCompare>:
//
//    return result;
//}

uint8_t strCompare(char *originalStr, char *str)
{
 8005c90:	b590      	push	{r4, r7, lr}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
    if (getLengStr(originalStr) != getLengStr(str)) return 0;
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f7ff ffe2 	bl	8005c64 <getLengStr>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	461c      	mov	r4, r3
 8005ca4:	6838      	ldr	r0, [r7, #0]
 8005ca6:	f7ff ffdd 	bl	8005c64 <getLengStr>
 8005caa:	4603      	mov	r3, r0
 8005cac:	429c      	cmp	r4, r3
 8005cae:	d001      	beq.n	8005cb4 <strCompare+0x24>
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	e01a      	b.n	8005cea <strCompare+0x5a>

    uint8_t index = 0;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	73fb      	strb	r3, [r7, #15]

    while (index != getLengStr(originalStr))
 8005cb8:	e00e      	b.n	8005cd8 <strCompare+0x48>
    {
        if (originalStr[index] != str[index])
 8005cba:	7bfb      	ldrb	r3, [r7, #15]
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	781a      	ldrb	r2, [r3, #0]
 8005cc2:	7bfb      	ldrb	r3, [r7, #15]
 8005cc4:	6839      	ldr	r1, [r7, #0]
 8005cc6:	440b      	add	r3, r1
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d001      	beq.n	8005cd2 <strCompare+0x42>
        {
            return 0;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	e00b      	b.n	8005cea <strCompare+0x5a>
        }
        index++;
 8005cd2:	7bfb      	ldrb	r3, [r7, #15]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	73fb      	strb	r3, [r7, #15]
    while (index != getLengStr(originalStr))
 8005cd8:	7bfb      	ldrb	r3, [r7, #15]
 8005cda:	b29c      	uxth	r4, r3
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f7ff ffc1 	bl	8005c64 <getLengStr>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	429c      	cmp	r4, r3
 8005ce6:	d1e8      	bne.n	8005cba <strCompare+0x2a>
    }

    return 1;
 8005ce8:	2301      	movs	r3, #1
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd90      	pop	{r4, r7, pc}

08005cf2 <Handle_I2C_Error>:
#define DS3231_FLAG_A2F_OFF 0
#define DS3231_FLAG_A2F_ON 1


static void Handle_I2C_Error(void)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	af00      	add	r7, sp, #0
	// I2C Error
}
 8005cf6:	bf00      	nop
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bc80      	pop	{r7}
 8005cfc:	4770      	bx	lr

08005cfe <DS3231_BCDtoDec>:

static uint8_t DS3231_BCDtoDec(uint8_t valueBCD)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b083      	sub	sp, #12
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	4603      	mov	r3, r0
 8005d06:	71fb      	strb	r3, [r7, #7]
	return (valueBCD >> 4) * 10 + (valueBCD & 0x0F);
 8005d08:	79fb      	ldrb	r3, [r7, #7]
 8005d0a:	091b      	lsrs	r3, r3, #4
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	461a      	mov	r2, r3
 8005d10:	0092      	lsls	r2, r2, #2
 8005d12:	4413      	add	r3, r2
 8005d14:	005b      	lsls	r3, r3, #1
 8005d16:	b2da      	uxtb	r2, r3
 8005d18:	79fb      	ldrb	r3, [r7, #7]
 8005d1a:	f003 030f 	and.w	r3, r3, #15
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	4413      	add	r3, r2
 8005d22:	b2db      	uxtb	r3, r3
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bc80      	pop	{r7}
 8005d2c:	4770      	bx	lr
	...

08005d30 <DS3231_DectoBCD>:

static uint8_t DS3231_DectoBCD(uint8_t valueDec)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	4603      	mov	r3, r0
 8005d38:	71fb      	strb	r3, [r7, #7]
	return ((valueDec / 10) << 4) | (valueDec % 10);
 8005d3a:	79fb      	ldrb	r3, [r7, #7]
 8005d3c:	4a0d      	ldr	r2, [pc, #52]	@ (8005d74 <DS3231_DectoBCD+0x44>)
 8005d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d42:	08db      	lsrs	r3, r3, #3
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	b25b      	sxtb	r3, r3
 8005d48:	011b      	lsls	r3, r3, #4
 8005d4a:	b258      	sxtb	r0, r3
 8005d4c:	79fa      	ldrb	r2, [r7, #7]
 8005d4e:	4b09      	ldr	r3, [pc, #36]	@ (8005d74 <DS3231_DectoBCD+0x44>)
 8005d50:	fba3 1302 	umull	r1, r3, r3, r2
 8005d54:	08d9      	lsrs	r1, r3, #3
 8005d56:	460b      	mov	r3, r1
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	440b      	add	r3, r1
 8005d5c:	005b      	lsls	r3, r3, #1
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	b25b      	sxtb	r3, r3
 8005d64:	4303      	orrs	r3, r0
 8005d66:	b25b      	sxtb	r3, r3
 8005d68:	b2db      	uxtb	r3, r3
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	370c      	adds	r7, #12
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bc80      	pop	{r7}
 8005d72:	4770      	bx	lr
 8005d74:	cccccccd 	.word	0xcccccccd

08005d78 <I2C_WriteTime>:

static HAL_StatusTypeDef I2C_WriteTime(DS3231_DateTime_t *DS3231_Time)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af04      	add	r7, sp, #16
 8005d7e:	6078      	str	r0, [r7, #4]
	return HAL_I2C_Mem_Write(DS3231_Time->I2C,
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6818      	ldr	r0, [r3, #0]
					  	  	 SLAVE_DS3231_ADDRESS,
							 DS3231_TIME_REGISTER_ADDRESS,
							 I2C_MEMADD_SIZE_8BIT,
							 DS3231_Time->TxTimeBuff,
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	330b      	adds	r3, #11
	return HAL_I2C_Mem_Write(DS3231_Time->I2C,
 8005d88:	2264      	movs	r2, #100	@ 0x64
 8005d8a:	9202      	str	r2, [sp, #8]
 8005d8c:	2203      	movs	r2, #3
 8005d8e:	9201      	str	r2, [sp, #4]
 8005d90:	9300      	str	r3, [sp, #0]
 8005d92:	2301      	movs	r3, #1
 8005d94:	2200      	movs	r2, #0
 8005d96:	21d0      	movs	r1, #208	@ 0xd0
 8005d98:	f7fd f846 	bl	8002e28 <HAL_I2C_Mem_Write>
 8005d9c:	4603      	mov	r3, r0
							 sizeof(DS3231_Time->TxTimeBuff),
							 100);
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <I2C_ReadTime>:

static HAL_StatusTypeDef I2C_ReadTime(DS3231_DateTime_t *DS3231_Time)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b086      	sub	sp, #24
 8005daa:	af04      	add	r7, sp, #16
 8005dac:	6078      	str	r0, [r7, #4]
	return HAL_I2C_Mem_Read(DS3231_Time->I2C,
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6818      	ldr	r0, [r3, #0]
					 	 	SLAVE_DS3231_ADDRESS,
							DS3231_TIME_REGISTER_ADDRESS,
							I2C_MEMADD_SIZE_8BIT,
							DS3231_Time->RxTimeBuff,
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	330e      	adds	r3, #14
	return HAL_I2C_Mem_Read(DS3231_Time->I2C,
 8005db6:	2264      	movs	r2, #100	@ 0x64
 8005db8:	9202      	str	r2, [sp, #8]
 8005dba:	2203      	movs	r2, #3
 8005dbc:	9201      	str	r2, [sp, #4]
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	21d0      	movs	r1, #208	@ 0xd0
 8005dc6:	f7fd f929 	bl	800301c <HAL_I2C_Mem_Read>
 8005dca:	4603      	mov	r3, r0
							sizeof(DS3231_Time->RxTimeBuff),
							100);
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3708      	adds	r7, #8
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <I2C_WriteDate>:

static HAL_StatusTypeDef I2C_WriteDate(DS3231_DateTime_t *DS3231_Date)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af04      	add	r7, sp, #16
 8005dda:	6078      	str	r0, [r7, #4]
	return HAL_I2C_Mem_Write(DS3231_Date->I2C,
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6818      	ldr	r0, [r3, #0]
					  	  	 SLAVE_DS3231_ADDRESS,
							 DS3231_DATE_REGISTER_ADDRESS,
							 I2C_MEMADD_SIZE_8BIT,
							 DS3231_Date->TxDateBuff,
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	3311      	adds	r3, #17
	return HAL_I2C_Mem_Write(DS3231_Date->I2C,
 8005de4:	2264      	movs	r2, #100	@ 0x64
 8005de6:	9202      	str	r2, [sp, #8]
 8005de8:	2204      	movs	r2, #4
 8005dea:	9201      	str	r2, [sp, #4]
 8005dec:	9300      	str	r3, [sp, #0]
 8005dee:	2301      	movs	r3, #1
 8005df0:	2203      	movs	r2, #3
 8005df2:	21d0      	movs	r1, #208	@ 0xd0
 8005df4:	f7fd f818 	bl	8002e28 <HAL_I2C_Mem_Write>
 8005df8:	4603      	mov	r3, r0
							 sizeof(DS3231_Date->TxDateBuff),
							 100);
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <I2C_ReadDate>:

static HAL_StatusTypeDef I2C_ReadDate(DS3231_DateTime_t *DS3231_Date)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b086      	sub	sp, #24
 8005e06:	af04      	add	r7, sp, #16
 8005e08:	6078      	str	r0, [r7, #4]
	return HAL_I2C_Mem_Read(DS3231_Date->I2C,
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6818      	ldr	r0, [r3, #0]
					 	 	SLAVE_DS3231_ADDRESS,
							DS3231_DATE_REGISTER_ADDRESS,
							I2C_MEMADD_SIZE_8BIT,
							DS3231_Date->RxDateBuff,
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	3315      	adds	r3, #21
	return HAL_I2C_Mem_Read(DS3231_Date->I2C,
 8005e12:	2264      	movs	r2, #100	@ 0x64
 8005e14:	9202      	str	r2, [sp, #8]
 8005e16:	2204      	movs	r2, #4
 8005e18:	9201      	str	r2, [sp, #4]
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	2203      	movs	r2, #3
 8005e20:	21d0      	movs	r1, #208	@ 0xd0
 8005e22:	f7fd f8fb 	bl	800301c <HAL_I2C_Mem_Read>
 8005e26:	4603      	mov	r3, r0
							sizeof(DS3231_Date->RxDateBuff),
							100);
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <I2C_WriteAlarm2>:

static HAL_StatusTypeDef I2C_WriteAlarm2(DS3231_Alarm2_t *DS3231_Alarm2)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af04      	add	r7, sp, #16
 8005e36:	6078      	str	r0, [r7, #4]
	return HAL_I2C_Mem_Write(DS3231_Alarm2->I2C,
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6818      	ldr	r0, [r3, #0]
					 	 	 SLAVE_DS3231_ADDRESS,
							 DS3231_ALARM2_REGISTER_ADDRESS,
							 I2C_MEMADD_SIZE_8BIT,
							 DS3231_Alarm2->TxAlarm2Buff,
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	3306      	adds	r3, #6
	return HAL_I2C_Mem_Write(DS3231_Alarm2->I2C,
 8005e40:	2264      	movs	r2, #100	@ 0x64
 8005e42:	9202      	str	r2, [sp, #8]
 8005e44:	2203      	movs	r2, #3
 8005e46:	9201      	str	r2, [sp, #4]
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	220b      	movs	r2, #11
 8005e4e:	21d0      	movs	r1, #208	@ 0xd0
 8005e50:	f7fc ffea 	bl	8002e28 <HAL_I2C_Mem_Write>
 8005e54:	4603      	mov	r3, r0
							 sizeof(DS3231_Alarm2->TxAlarm2Buff),
							 100);
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <I2C_ReadAlarm2>:

static HAL_StatusTypeDef I2C_ReadAlarm2(DS3231_Alarm2_t *DS3231_Alarm2)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b086      	sub	sp, #24
 8005e62:	af04      	add	r7, sp, #16
 8005e64:	6078      	str	r0, [r7, #4]
	return HAL_I2C_Mem_Read(DS3231_Alarm2->I2C,
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6818      	ldr	r0, [r3, #0]
						 	SLAVE_DS3231_ADDRESS,
							DS3231_ALARM2_REGISTER_ADDRESS,
							I2C_MEMADD_SIZE_8BIT,
							DS3231_Alarm2->RxAlarm2Buff,
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	3309      	adds	r3, #9
	return HAL_I2C_Mem_Read(DS3231_Alarm2->I2C,
 8005e6e:	2264      	movs	r2, #100	@ 0x64
 8005e70:	9202      	str	r2, [sp, #8]
 8005e72:	2203      	movs	r2, #3
 8005e74:	9201      	str	r2, [sp, #4]
 8005e76:	9300      	str	r3, [sp, #0]
 8005e78:	2301      	movs	r3, #1
 8005e7a:	220b      	movs	r2, #11
 8005e7c:	21d0      	movs	r1, #208	@ 0xd0
 8005e7e:	f7fd f8cd 	bl	800301c <HAL_I2C_Mem_Read>
 8005e82:	4603      	mov	r3, r0
							sizeof(DS3231_Alarm2->RxAlarm2Buff),
							100);
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3708      	adds	r7, #8
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <DS3231_DateTime_Init>:


void DS3231_DateTime_Init(I2C_HandleTypeDef* hi2c, DS3231_DateTime_t *DateTime)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
	DateTime->I2C = hi2c;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	601a      	str	r2, [r3, #0]
}
 8005e9c:	bf00      	nop
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bc80      	pop	{r7}
 8005ea4:	4770      	bx	lr

08005ea6 <DS3231_SetTime>:

void DS3231_SetTime(DS3231_DateTime_t *DS3231_Time, uint8_t Hour, uint8_t Minutes, uint8_t Seconds)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b082      	sub	sp, #8
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
 8005eae:	4608      	mov	r0, r1
 8005eb0:	4611      	mov	r1, r2
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	70fb      	strb	r3, [r7, #3]
 8005eb8:	460b      	mov	r3, r1
 8005eba:	70bb      	strb	r3, [r7, #2]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	707b      	strb	r3, [r7, #1]
	DS3231_Time->TxTimeBuff[0] = DS3231_DectoBCD(Seconds);
 8005ec0:	787b      	ldrb	r3, [r7, #1]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7ff ff34 	bl	8005d30 <DS3231_DectoBCD>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	461a      	mov	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	72da      	strb	r2, [r3, #11]
	DS3231_Time->TxTimeBuff[1] = DS3231_DectoBCD(Minutes);
 8005ed0:	78bb      	ldrb	r3, [r7, #2]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7ff ff2c 	bl	8005d30 <DS3231_DectoBCD>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	461a      	mov	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	731a      	strb	r2, [r3, #12]
	DS3231_Time->TxTimeBuff[2] = DS3231_DectoBCD(Hour);
 8005ee0:	78fb      	ldrb	r3, [r7, #3]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7ff ff24 	bl	8005d30 <DS3231_DectoBCD>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	461a      	mov	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	735a      	strb	r2, [r3, #13]

	if (I2C_WriteTime(DS3231_Time) != HAL_OK)
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f7ff ff41 	bl	8005d78 <I2C_WriteTime>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d001      	beq.n	8005f00 <DS3231_SetTime+0x5a>
	{
		// I2C ERROR
		Handle_I2C_Error();
 8005efc:	f7ff fef9 	bl	8005cf2 <Handle_I2C_Error>
	}
}
 8005f00:	bf00      	nop
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <DS3231_GetTime>:

void DS3231_GetTime(DS3231_DateTime_t *DS3231_Time)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
	if (I2C_ReadTime(DS3231_Time) == HAL_OK)
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f7ff ff48 	bl	8005da6 <I2C_ReadTime>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d11b      	bne.n	8005f54 <DS3231_GetTime+0x4c>
	{
		DS3231_Time->Seconds = DS3231_BCDtoDec(DS3231_Time->RxTimeBuff[0]);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	7b9b      	ldrb	r3, [r3, #14]
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7ff feec 	bl	8005cfe <DS3231_BCDtoDec>
 8005f26:	4603      	mov	r3, r0
 8005f28:	461a      	mov	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	711a      	strb	r2, [r3, #4]
		DS3231_Time->Minutes = DS3231_BCDtoDec(DS3231_Time->RxTimeBuff[1]);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	7bdb      	ldrb	r3, [r3, #15]
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7ff fee3 	bl	8005cfe <DS3231_BCDtoDec>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	715a      	strb	r2, [r3, #5]
		DS3231_Time->Hour = DS3231_BCDtoDec(DS3231_Time->RxTimeBuff[2]);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	7c1b      	ldrb	r3, [r3, #16]
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7ff feda 	bl	8005cfe <DS3231_BCDtoDec>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	719a      	strb	r2, [r3, #6]
	else
	{
		// I2C ERROR
		Handle_I2C_Error();
	}
}
 8005f52:	e001      	b.n	8005f58 <DS3231_GetTime+0x50>
		Handle_I2C_Error();
 8005f54:	f7ff fecd 	bl	8005cf2 <Handle_I2C_Error>
}
 8005f58:	bf00      	nop
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <DS3231_SetDate>:

void DS3231_SetDate(DS3231_DateTime_t *DS3231_Date, uint8_t Day, uint8_t Date, uint8_t Month, uint8_t Year)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	4608      	mov	r0, r1
 8005f6a:	4611      	mov	r1, r2
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	4603      	mov	r3, r0
 8005f70:	70fb      	strb	r3, [r7, #3]
 8005f72:	460b      	mov	r3, r1
 8005f74:	70bb      	strb	r3, [r7, #2]
 8005f76:	4613      	mov	r3, r2
 8005f78:	707b      	strb	r3, [r7, #1]
	DS3231_Date->TxDateBuff[0] = DS3231_DectoBCD(Day);
 8005f7a:	78fb      	ldrb	r3, [r7, #3]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7ff fed7 	bl	8005d30 <DS3231_DectoBCD>
 8005f82:	4603      	mov	r3, r0
 8005f84:	461a      	mov	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	745a      	strb	r2, [r3, #17]
	DS3231_Date->TxDateBuff[1] = DS3231_DectoBCD(Date);
 8005f8a:	78bb      	ldrb	r3, [r7, #2]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7ff fecf 	bl	8005d30 <DS3231_DectoBCD>
 8005f92:	4603      	mov	r3, r0
 8005f94:	461a      	mov	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	749a      	strb	r2, [r3, #18]
	DS3231_Date->TxDateBuff[2] = DS3231_DectoBCD(Month);
 8005f9a:	787b      	ldrb	r3, [r7, #1]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7ff fec7 	bl	8005d30 <DS3231_DectoBCD>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	74da      	strb	r2, [r3, #19]
	DS3231_Date->TxDateBuff[3] = DS3231_DectoBCD(Year);
 8005faa:	7c3b      	ldrb	r3, [r7, #16]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7ff febf 	bl	8005d30 <DS3231_DectoBCD>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	751a      	strb	r2, [r3, #20]

	if (I2C_WriteDate(DS3231_Date) != HAL_OK)
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f7ff ff0a 	bl	8005dd4 <I2C_WriteDate>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d001      	beq.n	8005fca <DS3231_SetDate+0x6a>
	{
		// I2C ERROR
		Handle_I2C_Error(); 
 8005fc6:	f7ff fe94 	bl	8005cf2 <Handle_I2C_Error>
	}
}
 8005fca:	bf00      	nop
 8005fcc:	3708      	adds	r7, #8
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <DS3231_GetDate>:

void DS3231_GetDate(DS3231_DateTime_t *DS3231_Date)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b082      	sub	sp, #8
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
	if (I2C_ReadDate(DS3231_Date) == HAL_OK)
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7ff ff11 	bl	8005e02 <I2C_ReadDate>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d124      	bne.n	8006030 <DS3231_GetDate+0x5e>
	{
		DS3231_Date->Day = DS3231_BCDtoDec(DS3231_Date->RxDateBuff[0]);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	7d5b      	ldrb	r3, [r3, #21]
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7ff fe87 	bl	8005cfe <DS3231_BCDtoDec>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	71da      	strb	r2, [r3, #7]
		DS3231_Date->Date = DS3231_BCDtoDec(DS3231_Date->RxDateBuff[1]);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	7d9b      	ldrb	r3, [r3, #22]
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7ff fe7e 	bl	8005cfe <DS3231_BCDtoDec>
 8006002:	4603      	mov	r3, r0
 8006004:	461a      	mov	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	721a      	strb	r2, [r3, #8]
		DS3231_Date->Month = DS3231_BCDtoDec(DS3231_Date->RxDateBuff[2]);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	7ddb      	ldrb	r3, [r3, #23]
 800600e:	4618      	mov	r0, r3
 8006010:	f7ff fe75 	bl	8005cfe <DS3231_BCDtoDec>
 8006014:	4603      	mov	r3, r0
 8006016:	461a      	mov	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	725a      	strb	r2, [r3, #9]
		DS3231_Date->Year = DS3231_BCDtoDec(DS3231_Date->RxDateBuff[3]);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	7e1b      	ldrb	r3, [r3, #24]
 8006020:	4618      	mov	r0, r3
 8006022:	f7ff fe6c 	bl	8005cfe <DS3231_BCDtoDec>
 8006026:	4603      	mov	r3, r0
 8006028:	461a      	mov	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	729a      	strb	r2, [r3, #10]
	else
	{
		// I2C ERROR
		Handle_I2C_Error();
	}
}
 800602e:	e001      	b.n	8006034 <DS3231_GetDate+0x62>
		Handle_I2C_Error();
 8006030:	f7ff fe5f 	bl	8005cf2 <Handle_I2C_Error>
}
 8006034:	bf00      	nop
 8006036:	3708      	adds	r7, #8
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <DS3231_Alarm2_Init>:

void DS3231_Alarm2_Init(I2C_HandleTypeDef* I2C, DS3231_Alarm2_t *Alarm)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b088      	sub	sp, #32
 8006040:	af04      	add	r7, sp, #16
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
	Alarm->I2C = I2C;
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	601a      	str	r2, [r3, #0]
	uint8_t ControlRegister;	// Buff contrain Control Register
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(I2C,
 800604c:	2364      	movs	r3, #100	@ 0x64
 800604e:	9302      	str	r3, [sp, #8]
 8006050:	2301      	movs	r3, #1
 8006052:	9301      	str	r3, [sp, #4]
 8006054:	f107 030e 	add.w	r3, r7, #14
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	2301      	movs	r3, #1
 800605c:	220e      	movs	r2, #14
 800605e:	21d0      	movs	r1, #208	@ 0xd0
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f7fc ffdb 	bl	800301c <HAL_I2C_Mem_Read>
 8006066:	4603      	mov	r3, r0
 8006068:	73fb      	strb	r3, [r7, #15]
								  				DS3231_CONTROL_REGISTER_ADDRESS,
								  				I2C_MEMADD_SIZE_8BIT,
								  				&ControlRegister,
								  				1,
								  				100);
	if (status != HAL_OK)
 800606a:	7bfb      	ldrb	r3, [r7, #15]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d001      	beq.n	8006074 <DS3231_Alarm2_Init+0x38>
	{
		// I2C ERROR
		Handle_I2C_Error();
 8006070:	f7ff fe3f 	bl	8005cf2 <Handle_I2C_Error>
	}

	ControlRegister |= DS3231_CONTROL_BIT_INTCN;
 8006074:	7bbb      	ldrb	r3, [r7, #14]
 8006076:	f043 0304 	orr.w	r3, r3, #4
 800607a:	b2db      	uxtb	r3, r3
 800607c:	73bb      	strb	r3, [r7, #14]


	status = HAL_I2C_Mem_Write(I2C,
 800607e:	2364      	movs	r3, #100	@ 0x64
 8006080:	9302      	str	r3, [sp, #8]
 8006082:	2301      	movs	r3, #1
 8006084:	9301      	str	r3, [sp, #4]
 8006086:	f107 030e 	add.w	r3, r7, #14
 800608a:	9300      	str	r3, [sp, #0]
 800608c:	2301      	movs	r3, #1
 800608e:	220e      	movs	r2, #14
 8006090:	21d0      	movs	r1, #208	@ 0xd0
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7fc fec8 	bl	8002e28 <HAL_I2C_Mem_Write>
 8006098:	4603      	mov	r3, r0
 800609a:	73fb      	strb	r3, [r7, #15]
							   DS3231_CONTROL_REGISTER_ADDRESS,
							   I2C_MEMADD_SIZE_8BIT,
							   &ControlRegister,
							   1,
							   100);
	if (status != HAL_OK)
 800609c:	7bfb      	ldrb	r3, [r7, #15]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <DS3231_Alarm2_Init+0x6a>
	{
		// I2C ERROR
		Handle_I2C_Error();
 80060a2:	f7ff fe26 	bl	8005cf2 <Handle_I2C_Error>
	}
}
 80060a6:	bf00      	nop
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <DS3231_SetAlarm2>:

void DS3231_SetAlarm2(DS3231_Alarm2_t *DS3231_Alarm2, uint8_t Hour, uint8_t Minutes)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b082      	sub	sp, #8
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
 80060b6:	460b      	mov	r3, r1
 80060b8:	70fb      	strb	r3, [r7, #3]
 80060ba:	4613      	mov	r3, r2
 80060bc:	70bb      	strb	r3, [r7, #2]
	DS3231_Alarm2->TxAlarm2Buff[0] = DS3231_DectoBCD(Minutes) & 0x7F;
 80060be:	78bb      	ldrb	r3, [r7, #2]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7ff fe35 	bl	8005d30 <DS3231_DectoBCD>
 80060c6:	4603      	mov	r3, r0
 80060c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060cc:	b2da      	uxtb	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	719a      	strb	r2, [r3, #6]
	DS3231_Alarm2->TxAlarm2Buff[1] = DS3231_DectoBCD(Hour) & 0x3F;
 80060d2:	78fb      	ldrb	r3, [r7, #3]
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7ff fe2b 	bl	8005d30 <DS3231_DectoBCD>
 80060da:	4603      	mov	r3, r0
 80060dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060e0:	b2da      	uxtb	r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	71da      	strb	r2, [r3, #7]
	DS3231_Alarm2->TxAlarm2Buff[2] = 0x80;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2280      	movs	r2, #128	@ 0x80
 80060ea:	721a      	strb	r2, [r3, #8]

	if (I2C_WriteAlarm2(DS3231_Alarm2) != HAL_OK)
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f7ff fe9f 	bl	8005e30 <I2C_WriteAlarm2>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d001      	beq.n	80060fc <DS3231_SetAlarm2+0x4e>
	{
		// I2C ERROR
		Handle_I2C_Error();
 80060f8:	f7ff fdfb 	bl	8005cf2 <Handle_I2C_Error>
	}
}
 80060fc:	bf00      	nop
 80060fe:	3708      	adds	r7, #8
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <DS3231_GetAlarm2>:

void DS3231_GetAlarm2(DS3231_Alarm2_t *DS3231_Alarm2)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
	if (I2C_ReadAlarm2(DS3231_Alarm2) == HAL_OK)
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f7ff fea6 	bl	8005e5e <I2C_ReadAlarm2>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d112      	bne.n	800613e <DS3231_GetAlarm2+0x3a>
	{
		DS3231_Alarm2->Minutes = DS3231_BCDtoDec(DS3231_Alarm2->RxAlarm2Buff[0]);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	7a5b      	ldrb	r3, [r3, #9]
 800611c:	4618      	mov	r0, r3
 800611e:	f7ff fdee 	bl	8005cfe <DS3231_BCDtoDec>
 8006122:	4603      	mov	r3, r0
 8006124:	461a      	mov	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	711a      	strb	r2, [r3, #4]
		DS3231_Alarm2->Hour = DS3231_BCDtoDec(DS3231_Alarm2->RxAlarm2Buff[1]);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	7a9b      	ldrb	r3, [r3, #10]
 800612e:	4618      	mov	r0, r3
 8006130:	f7ff fde5 	bl	8005cfe <DS3231_BCDtoDec>
 8006134:	4603      	mov	r3, r0
 8006136:	461a      	mov	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	715a      	strb	r2, [r3, #5]
	else
	{
		// I2C ERROR
		Handle_I2C_Error();
	}
}
 800613c:	e001      	b.n	8006142 <DS3231_GetAlarm2+0x3e>
		Handle_I2C_Error();
 800613e:	f7ff fdd8 	bl	8005cf2 <Handle_I2C_Error>
}
 8006142:	bf00      	nop
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <DS3231_ClearnFlagAlarm2>:

void DS3231_ClearnFlagAlarm2(I2C_HandleTypeDef* I2C)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b088      	sub	sp, #32
 800614e:	af04      	add	r7, sp, #16
 8006150:	6078      	str	r0, [r7, #4]
	uint8_t StatusRegister;
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(I2C,
 8006152:	2364      	movs	r3, #100	@ 0x64
 8006154:	9302      	str	r3, [sp, #8]
 8006156:	2301      	movs	r3, #1
 8006158:	9301      	str	r3, [sp, #4]
 800615a:	f107 030e 	add.w	r3, r7, #14
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	2301      	movs	r3, #1
 8006162:	220f      	movs	r2, #15
 8006164:	21d0      	movs	r1, #208	@ 0xd0
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7fc ff58 	bl	800301c <HAL_I2C_Mem_Read>
 800616c:	4603      	mov	r3, r0
 800616e:	73fb      	strb	r3, [r7, #15]
								  				DS3231_STATUS_REGISTER_ADDRESS,
								  				I2C_MEMADD_SIZE_8BIT,
								  				&StatusRegister,
								  				1,
								  				100);
	if (status != HAL_OK)
 8006170:	7bfb      	ldrb	r3, [r7, #15]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <DS3231_ClearnFlagAlarm2+0x30>
	{
		// I2C ERROR
		Handle_I2C_Error();
 8006176:	f7ff fdbc 	bl	8005cf2 <Handle_I2C_Error>
	}

	StatusRegister &= ~DS3231_FLAG_STATUS_A2F;
 800617a:	7bbb      	ldrb	r3, [r7, #14]
 800617c:	f023 0302 	bic.w	r3, r3, #2
 8006180:	b2db      	uxtb	r3, r3
 8006182:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(I2C,
 8006184:	2364      	movs	r3, #100	@ 0x64
 8006186:	9302      	str	r3, [sp, #8]
 8006188:	2301      	movs	r3, #1
 800618a:	9301      	str	r3, [sp, #4]
 800618c:	f107 030e 	add.w	r3, r7, #14
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	2301      	movs	r3, #1
 8006194:	220f      	movs	r2, #15
 8006196:	21d0      	movs	r1, #208	@ 0xd0
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f7fc fe45 	bl	8002e28 <HAL_I2C_Mem_Write>
 800619e:	4603      	mov	r3, r0
 80061a0:	73fb      	strb	r3, [r7, #15]
							   DS3231_STATUS_REGISTER_ADDRESS,
							   I2C_MEMADD_SIZE_8BIT,
							   &StatusRegister,
							   1,
							   100);
	if (status != HAL_OK)
 80061a2:	7bfb      	ldrb	r3, [r7, #15]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d001      	beq.n	80061ac <DS3231_ClearnFlagAlarm2+0x62>
	{
		// I2C ERROR
		Handle_I2C_Error();
 80061a8:	f7ff fda3 	bl	8005cf2 <Handle_I2C_Error>
	}
}
 80061ac:	bf00      	nop
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <DS3231_EnOrDisAlarm2>:

void DS3231_EnOrDisAlarm2(I2C_HandleTypeDef* I2C, uint8_t EnOrDisAlarm)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b088      	sub	sp, #32
 80061b8:	af04      	add	r7, sp, #16
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	460b      	mov	r3, r1
 80061be:	70fb      	strb	r3, [r7, #3]
	uint8_t ControlRegister;
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(I2C,
 80061c0:	2364      	movs	r3, #100	@ 0x64
 80061c2:	9302      	str	r3, [sp, #8]
 80061c4:	2301      	movs	r3, #1
 80061c6:	9301      	str	r3, [sp, #4]
 80061c8:	f107 030e 	add.w	r3, r7, #14
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	2301      	movs	r3, #1
 80061d0:	220e      	movs	r2, #14
 80061d2:	21d0      	movs	r1, #208	@ 0xd0
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f7fc ff21 	bl	800301c <HAL_I2C_Mem_Read>
 80061da:	4603      	mov	r3, r0
 80061dc:	73fb      	strb	r3, [r7, #15]
								  				DS3231_CONTROL_REGISTER_ADDRESS,
								  				I2C_MEMADD_SIZE_8BIT,
								  				&ControlRegister,
								  				1,
								  				100);
	if (status != HAL_OK)
 80061de:	7bfb      	ldrb	r3, [r7, #15]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d001      	beq.n	80061e8 <DS3231_EnOrDisAlarm2+0x34>
	{
		// I2C ERROR
		Handle_I2C_Error();
 80061e4:	f7ff fd85 	bl	8005cf2 <Handle_I2C_Error>
	}

	if (EnOrDisAlarm == EnableAlarm2)
 80061e8:	78fb      	ldrb	r3, [r7, #3]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d108      	bne.n	8006200 <DS3231_EnOrDisAlarm2+0x4c>
	{
		DS3231_ClearnFlagAlarm2(I2C);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f7ff ffab 	bl	800614a <DS3231_ClearnFlagAlarm2>
		ControlRegister |= DS3231_CONTROL_BIT_A2IE;
 80061f4:	7bbb      	ldrb	r3, [r7, #14]
 80061f6:	f043 0302 	orr.w	r3, r3, #2
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	73bb      	strb	r3, [r7, #14]
 80061fe:	e004      	b.n	800620a <DS3231_EnOrDisAlarm2+0x56>
	}
	else
	{
		ControlRegister &= ~DS3231_CONTROL_BIT_A2IE;
 8006200:	7bbb      	ldrb	r3, [r7, #14]
 8006202:	f023 0302 	bic.w	r3, r3, #2
 8006206:	b2db      	uxtb	r3, r3
 8006208:	73bb      	strb	r3, [r7, #14]
	}

	status = HAL_I2C_Mem_Write(I2C,
 800620a:	2364      	movs	r3, #100	@ 0x64
 800620c:	9302      	str	r3, [sp, #8]
 800620e:	2301      	movs	r3, #1
 8006210:	9301      	str	r3, [sp, #4]
 8006212:	f107 030e 	add.w	r3, r7, #14
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	2301      	movs	r3, #1
 800621a:	220e      	movs	r2, #14
 800621c:	21d0      	movs	r1, #208	@ 0xd0
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7fc fe02 	bl	8002e28 <HAL_I2C_Mem_Write>
 8006224:	4603      	mov	r3, r0
 8006226:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK)
	{
		// I2C ERROR

	}
}
 8006228:	bf00      	nop
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <DS3231_CheckModeAlarm2>:

    return (statusRegister & DS3231_FLAG_STATUS_A2F) ? DS3231_FLAG_A2F_ON : DS3231_FLAG_A2F_OFF;
}

uint8_t DS3231_CheckModeAlarm2(I2C_HandleTypeDef* I2C)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b088      	sub	sp, #32
 8006234:	af04      	add	r7, sp, #16
 8006236:	6078      	str	r0, [r7, #4]
	uint8_t ControlRegister;
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(I2C,
 8006238:	2364      	movs	r3, #100	@ 0x64
 800623a:	9302      	str	r3, [sp, #8]
 800623c:	2301      	movs	r3, #1
 800623e:	9301      	str	r3, [sp, #4]
 8006240:	f107 030e 	add.w	r3, r7, #14
 8006244:	9300      	str	r3, [sp, #0]
 8006246:	2301      	movs	r3, #1
 8006248:	220e      	movs	r2, #14
 800624a:	21d0      	movs	r1, #208	@ 0xd0
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f7fc fee5 	bl	800301c <HAL_I2C_Mem_Read>
 8006252:	4603      	mov	r3, r0
 8006254:	73fb      	strb	r3, [r7, #15]
								  				DS3231_CONTROL_REGISTER_ADDRESS,
								  				I2C_MEMADD_SIZE_8BIT,
								  				&ControlRegister,
								  				1,
								  				100);
	if (status != HAL_OK)
 8006256:	7bfb      	ldrb	r3, [r7, #15]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d001      	beq.n	8006260 <DS3231_CheckModeAlarm2+0x30>
    {
    	Handle_I2C_Error();
 800625c:	f7ff fd49 	bl	8005cf2 <Handle_I2C_Error>
    }

    return (ControlRegister & DS3231_CONTROL_BIT_A2IE) ? EnableAlarm2 : DisableAlarm2;
 8006260:	7bbb      	ldrb	r3, [r7, #14]
 8006262:	105b      	asrs	r3, r3, #1
 8006264:	b2db      	uxtb	r3, r3
 8006266:	f003 0301 	and.w	r3, r3, #1
 800626a:	b2db      	uxtb	r3, r3
}
 800626c:	4618      	mov	r0, r3
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <LCD_send_cmd>:
#define DATA_E_LOW_COF_NO_BL  0x01  // BLA = 0, E = 0, RW = 0, RS = 1

static uint8_t backlight_state = 1; // 1: đèn nền bật, 0: đèn nền tắt

void LCD_send_cmd(char cmd)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b086      	sub	sp, #24
 8006278:	af02      	add	r7, sp, #8
 800627a:	4603      	mov	r3, r0
 800627c:	71fb      	strb	r3, [r7, #7]
    uint8_t cmd_h = (cmd & 0xF0);        // Lấy 4 bit cao
 800627e:	79fb      	ldrb	r3, [r7, #7]
 8006280:	f023 030f 	bic.w	r3, r3, #15
 8006284:	73fb      	strb	r3, [r7, #15]
    uint8_t cmd_l = ((cmd << 4) & 0xF0); // Lấy 4 bit thấp
 8006286:	79fb      	ldrb	r3, [r7, #7]
 8006288:	011b      	lsls	r3, r3, #4
 800628a:	73bb      	strb	r3, [r7, #14]

    uint8_t cmd_transmitted[4];
    if (backlight_state) {
 800628c:	4b19      	ldr	r3, [pc, #100]	@ (80062f4 <LCD_send_cmd+0x80>)
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d014      	beq.n	80062be <LCD_send_cmd+0x4a>
        cmd_transmitted[0] = cmd_h | CMD_E_HIGH_COF;
 8006294:	7bfb      	ldrb	r3, [r7, #15]
 8006296:	f043 030c 	orr.w	r3, r3, #12
 800629a:	b2db      	uxtb	r3, r3
 800629c:	723b      	strb	r3, [r7, #8]
        cmd_transmitted[1] = cmd_h | CMD_E_LOW_COF;
 800629e:	7bfb      	ldrb	r3, [r7, #15]
 80062a0:	f043 0308 	orr.w	r3, r3, #8
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	727b      	strb	r3, [r7, #9]
        cmd_transmitted[2] = cmd_l | CMD_E_HIGH_COF;
 80062a8:	7bbb      	ldrb	r3, [r7, #14]
 80062aa:	f043 030c 	orr.w	r3, r3, #12
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	72bb      	strb	r3, [r7, #10]
        cmd_transmitted[3] = cmd_l | CMD_E_LOW_COF;
 80062b2:	7bbb      	ldrb	r3, [r7, #14]
 80062b4:	f043 0308 	orr.w	r3, r3, #8
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	72fb      	strb	r3, [r7, #11]
 80062bc:	e00d      	b.n	80062da <LCD_send_cmd+0x66>
    } else {
        cmd_transmitted[0] = cmd_h | CMD_E_HIGH_COF_NO_BL;
 80062be:	7bfb      	ldrb	r3, [r7, #15]
 80062c0:	f043 0304 	orr.w	r3, r3, #4
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	723b      	strb	r3, [r7, #8]
        cmd_transmitted[1] = cmd_h | CMD_E_LOW_COF_NO_BL;
 80062c8:	7bfb      	ldrb	r3, [r7, #15]
 80062ca:	727b      	strb	r3, [r7, #9]
        cmd_transmitted[2] = cmd_l | CMD_E_HIGH_COF_NO_BL;
 80062cc:	7bbb      	ldrb	r3, [r7, #14]
 80062ce:	f043 0304 	orr.w	r3, r3, #4
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	72bb      	strb	r3, [r7, #10]
        cmd_transmitted[3] = cmd_l | CMD_E_LOW_COF_NO_BL;
 80062d6:	7bbb      	ldrb	r3, [r7, #14]
 80062d8:	72fb      	strb	r3, [r7, #11]
    }

    HAL_I2C_Master_Transmit(&hi2c2, SALVE_ADDRESS_LCD, cmd_transmitted, sizeof(cmd_transmitted), 100);
 80062da:	f107 0208 	add.w	r2, r7, #8
 80062de:	2364      	movs	r3, #100	@ 0x64
 80062e0:	9300      	str	r3, [sp, #0]
 80062e2:	2304      	movs	r3, #4
 80062e4:	214e      	movs	r1, #78	@ 0x4e
 80062e6:	4804      	ldr	r0, [pc, #16]	@ (80062f8 <LCD_send_cmd+0x84>)
 80062e8:	f7fc fca0 	bl	8002c2c <HAL_I2C_Master_Transmit>
}
 80062ec:	bf00      	nop
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	20000031 	.word	0x20000031
 80062f8:	200000f4 	.word	0x200000f4

080062fc <LCD_send_data>:

void LCD_send_data(char data)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af02      	add	r7, sp, #8
 8006302:	4603      	mov	r3, r0
 8006304:	71fb      	strb	r3, [r7, #7]
    uint8_t data_h = (data & 0xF0);        // Lấy 4 bit cao
 8006306:	79fb      	ldrb	r3, [r7, #7]
 8006308:	f023 030f 	bic.w	r3, r3, #15
 800630c:	73fb      	strb	r3, [r7, #15]
    uint8_t data_l = ((data << 4) & 0xF0); // Lấy 4 bit thấp
 800630e:	79fb      	ldrb	r3, [r7, #7]
 8006310:	011b      	lsls	r3, r3, #4
 8006312:	73bb      	strb	r3, [r7, #14]

    uint8_t data_transmitted[4];
    if (backlight_state) {
 8006314:	4b1c      	ldr	r3, [pc, #112]	@ (8006388 <LCD_send_data+0x8c>)
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d014      	beq.n	8006346 <LCD_send_data+0x4a>
        data_transmitted[0] = data_h | DATA_E_HIGH_COF;
 800631c:	7bfb      	ldrb	r3, [r7, #15]
 800631e:	f043 030d 	orr.w	r3, r3, #13
 8006322:	b2db      	uxtb	r3, r3
 8006324:	723b      	strb	r3, [r7, #8]
        data_transmitted[1] = data_h | DATA_E_LOW_COF;
 8006326:	7bfb      	ldrb	r3, [r7, #15]
 8006328:	f043 0309 	orr.w	r3, r3, #9
 800632c:	b2db      	uxtb	r3, r3
 800632e:	727b      	strb	r3, [r7, #9]
        data_transmitted[2] = data_l | DATA_E_HIGH_COF;
 8006330:	7bbb      	ldrb	r3, [r7, #14]
 8006332:	f043 030d 	orr.w	r3, r3, #13
 8006336:	b2db      	uxtb	r3, r3
 8006338:	72bb      	strb	r3, [r7, #10]
        data_transmitted[3] = data_l | DATA_E_LOW_COF;
 800633a:	7bbb      	ldrb	r3, [r7, #14]
 800633c:	f043 0309 	orr.w	r3, r3, #9
 8006340:	b2db      	uxtb	r3, r3
 8006342:	72fb      	strb	r3, [r7, #11]
 8006344:	e013      	b.n	800636e <LCD_send_data+0x72>
    } else {
        data_transmitted[0] = data_h | DATA_E_HIGH_COF_NO_BL;
 8006346:	7bfb      	ldrb	r3, [r7, #15]
 8006348:	f043 0305 	orr.w	r3, r3, #5
 800634c:	b2db      	uxtb	r3, r3
 800634e:	723b      	strb	r3, [r7, #8]
        data_transmitted[1] = data_h | DATA_E_LOW_COF_NO_BL;
 8006350:	7bfb      	ldrb	r3, [r7, #15]
 8006352:	f043 0301 	orr.w	r3, r3, #1
 8006356:	b2db      	uxtb	r3, r3
 8006358:	727b      	strb	r3, [r7, #9]
        data_transmitted[2] = data_l | DATA_E_HIGH_COF_NO_BL;
 800635a:	7bbb      	ldrb	r3, [r7, #14]
 800635c:	f043 0305 	orr.w	r3, r3, #5
 8006360:	b2db      	uxtb	r3, r3
 8006362:	72bb      	strb	r3, [r7, #10]
        data_transmitted[3] = data_l | DATA_E_LOW_COF_NO_BL;
 8006364:	7bbb      	ldrb	r3, [r7, #14]
 8006366:	f043 0301 	orr.w	r3, r3, #1
 800636a:	b2db      	uxtb	r3, r3
 800636c:	72fb      	strb	r3, [r7, #11]
    }

    HAL_I2C_Master_Transmit(&hi2c2, SALVE_ADDRESS_LCD, data_transmitted, sizeof(data_transmitted), 100);
 800636e:	f107 0208 	add.w	r2, r7, #8
 8006372:	2364      	movs	r3, #100	@ 0x64
 8006374:	9300      	str	r3, [sp, #0]
 8006376:	2304      	movs	r3, #4
 8006378:	214e      	movs	r1, #78	@ 0x4e
 800637a:	4804      	ldr	r0, [pc, #16]	@ (800638c <LCD_send_data+0x90>)
 800637c:	f7fc fc56 	bl	8002c2c <HAL_I2C_Master_Transmit>
}
 8006380:	bf00      	nop
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	20000031 	.word	0x20000031
 800638c:	200000f4 	.word	0x200000f4

08006390 <LCD_backlight_on>:

void LCD_backlight_on(void)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	af00      	add	r7, sp, #0
    backlight_state = 1;
 8006394:	4b03      	ldr	r3, [pc, #12]	@ (80063a4 <LCD_backlight_on+0x14>)
 8006396:	2201      	movs	r2, #1
 8006398:	701a      	strb	r2, [r3, #0]
    LCD_send_cmd(0x00); // Gửi lệnh dummy để cập nhật trạng thái đèn nền
 800639a:	2000      	movs	r0, #0
 800639c:	f7ff ff6a 	bl	8006274 <LCD_send_cmd>
}
 80063a0:	bf00      	nop
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	20000031 	.word	0x20000031

080063a8 <LCD_backlight_off>:

void LCD_backlight_off(void)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	af00      	add	r7, sp, #0
    backlight_state = 0;
 80063ac:	4b03      	ldr	r3, [pc, #12]	@ (80063bc <LCD_backlight_off+0x14>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	701a      	strb	r2, [r3, #0]
    LCD_send_cmd(0x00); // Gửi lệnh dummy để cập nhật trạng thái đèn nền
 80063b2:	2000      	movs	r0, #0
 80063b4:	f7ff ff5e 	bl	8006274 <LCD_send_cmd>
}
 80063b8:	bf00      	nop
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	20000031 	.word	0x20000031

080063c0 <LCD_Init>:

void LCD_Init(void)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	af00      	add	r7, sp, #0
	LCD_send_cmd (0x33); /* set 4-bits interface */
 80063c4:	2033      	movs	r0, #51	@ 0x33
 80063c6:	f7ff ff55 	bl	8006274 <LCD_send_cmd>
	LCD_send_cmd (0x32);
 80063ca:	2032      	movs	r0, #50	@ 0x32
 80063cc:	f7ff ff52 	bl	8006274 <LCD_send_cmd>
	HAL_Delay(50);
 80063d0:	2032      	movs	r0, #50	@ 0x32
 80063d2:	f7fb ff4f 	bl	8002274 <HAL_Delay>
	LCD_send_cmd (0x28); /* start to set LCD function */
 80063d6:	2028      	movs	r0, #40	@ 0x28
 80063d8:	f7ff ff4c 	bl	8006274 <LCD_send_cmd>
	HAL_Delay(50);
 80063dc:	2032      	movs	r0, #50	@ 0x32
 80063de:	f7fb ff49 	bl	8002274 <HAL_Delay>
	LCD_send_cmd (0x01); /* clear display */
 80063e2:	2001      	movs	r0, #1
 80063e4:	f7ff ff46 	bl	8006274 <LCD_send_cmd>
	HAL_Delay(50);
 80063e8:	2032      	movs	r0, #50	@ 0x32
 80063ea:	f7fb ff43 	bl	8002274 <HAL_Delay>
	LCD_send_cmd (0x06); /* set entry mode */
 80063ee:	2006      	movs	r0, #6
 80063f0:	f7ff ff40 	bl	8006274 <LCD_send_cmd>
	HAL_Delay(50);
 80063f4:	2032      	movs	r0, #50	@ 0x32
 80063f6:	f7fb ff3d 	bl	8002274 <HAL_Delay>
	LCD_send_cmd (0x0C); /* set display to on */
 80063fa:	200c      	movs	r0, #12
 80063fc:	f7ff ff3a 	bl	8006274 <LCD_send_cmd>
	HAL_Delay(50);
 8006400:	2032      	movs	r0, #50	@ 0x32
 8006402:	f7fb ff37 	bl	8002274 <HAL_Delay>
	LCD_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8006406:	2002      	movs	r0, #2
 8006408:	f7ff ff34 	bl	8006274 <LCD_send_cmd>
	HAL_Delay(50);
 800640c:	2032      	movs	r0, #50	@ 0x32
 800640e:	f7fb ff31 	bl	8002274 <HAL_Delay>
	LCD_send_cmd (0x80);
 8006412:	2080      	movs	r0, #128	@ 0x80
 8006414:	f7ff ff2e 	bl	8006274 <LCD_send_cmd>
}
 8006418:	bf00      	nop
 800641a:	bd80      	pop	{r7, pc}

0800641c <LCD_send_string>:

void LCD_send_string(char *str)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 8006424:	e006      	b.n	8006434 <LCD_send_string+0x18>
	{
		LCD_send_data(*(str++));
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	1c5a      	adds	r2, r3, #1
 800642a:	607a      	str	r2, [r7, #4]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	4618      	mov	r0, r3
 8006430:	f7ff ff64 	bl	80062fc <LCD_send_data>
	while(*str != '\0')
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1f4      	bne.n	8006426 <LCD_send_string+0xa>
	}
}
 800643c:	bf00      	nop
 800643e:	bf00      	nop
 8006440:	3708      	adds	r7, #8
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <LCD_clear_display>:

void LCD_clear_display(void)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	af00      	add	r7, sp, #0
	LCD_send_cmd(0x01);
 800644a:	2001      	movs	r0, #1
 800644c:	f7ff ff12 	bl	8006274 <LCD_send_cmd>
}
 8006450:	bf00      	nop
 8006452:	bd80      	pop	{r7, pc}

08006454 <LCD_goto_XY>:

void LCD_goto_XY (uint8_t row, uint8_t col)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	4603      	mov	r3, r0
 800645c:	460a      	mov	r2, r1
 800645e:	71fb      	strb	r3, [r7, #7]
 8006460:	4613      	mov	r3, r2
 8006462:	71bb      	strb	r3, [r7, #6]
	uint8_t pos_Addr;
	if(row == 1)
 8006464:	79fb      	ldrb	r3, [r7, #7]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d106      	bne.n	8006478 <LCD_goto_XY+0x24>
	{
		pos_Addr = 0x80 + row - 1 + col;
 800646a:	79fa      	ldrb	r2, [r7, #7]
 800646c:	79bb      	ldrb	r3, [r7, #6]
 800646e:	4413      	add	r3, r2
 8006470:	b2db      	uxtb	r3, r3
 8006472:	337f      	adds	r3, #127	@ 0x7f
 8006474:	73fb      	strb	r3, [r7, #15]
 8006476:	e007      	b.n	8006488 <LCD_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8006478:	79bb      	ldrb	r3, [r7, #6]
 800647a:	3340      	adds	r3, #64	@ 0x40
 800647c:	b2db      	uxtb	r3, r3
 800647e:	b25b      	sxtb	r3, r3
 8006480:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006484:	b25b      	sxtb	r3, r3
 8006486:	73fb      	strb	r3, [r7, #15]
	}
	LCD_send_cmd(pos_Addr);
 8006488:	7bfb      	ldrb	r3, [r7, #15]
 800648a:	4618      	mov	r0, r3
 800648c:	f7ff fef2 	bl	8006274 <LCD_send_cmd>
}
 8006490:	bf00      	nop
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <LCD_blink_cursor_on>:

void LCD_blink_cursor_on(void)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	af00      	add	r7, sp, #0
	LCD_send_cmd(0x0F);
 800649c:	200f      	movs	r0, #15
 800649e:	f7ff fee9 	bl	8006274 <LCD_send_cmd>
}
 80064a2:	bf00      	nop
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <LCD_blink_cursor_off>:

void LCD_blink_cursor_off(void)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	af00      	add	r7, sp, #0
	LCD_send_cmd(0x0C);
 80064aa:	200c      	movs	r0, #12
 80064ac:	f7ff fee2 	bl	8006274 <LCD_send_cmd>
}
 80064b0:	bf00      	nop
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <presForFrequency>:
 */

#include "BUZZER.h"

uint16_t presForFrequency (uint16_t frequency)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	4603      	mov	r3, r0
 80064bc:	80fb      	strh	r3, [r7, #6]
	if (frequency == 0) return 0;
 80064be:	88fb      	ldrh	r3, [r7, #6]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <presForFrequency+0x14>
 80064c4:	2300      	movs	r3, #0
 80064c6:	e00a      	b.n	80064de <presForFrequency+0x2a>
	return ((TIM_FREQ/(1000*frequency))-1);
 80064c8:	88fb      	ldrh	r3, [r7, #6]
 80064ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80064ce:	fb02 f303 	mul.w	r3, r2, r3
 80064d2:	4a05      	ldr	r2, [pc, #20]	@ (80064e8 <presForFrequency+0x34>)
 80064d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80064d8:	b29b      	uxth	r3, r3
 80064da:	3b01      	subs	r3, #1
 80064dc:	b29b      	uxth	r3, r3
}
 80064de:	4618      	mov	r0, r3
 80064e0:	370c      	adds	r7, #12
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bc80      	pop	{r7}
 80064e6:	4770      	bx	lr
 80064e8:	02625a00 	.word	0x02625a00

080064ec <noTone>:

void noTone(TIM_HandleTypeDef *htim)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_PRESCALER(htim, 0);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2200      	movs	r2, #0
 80064fa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	bc80      	pop	{r7}
 8006504:	4770      	bx	lr

08006506 <playTone>:

void playTone (uint16_t tone, TIM_HandleTypeDef *htim)
{
 8006506:	b580      	push	{r7, lr}
 8006508:	b084      	sub	sp, #16
 800650a:	af00      	add	r7, sp, #0
 800650c:	4603      	mov	r3, r0
 800650e:	6039      	str	r1, [r7, #0]
 8006510:	80fb      	strh	r3, [r7, #6]
	uint16_t pres = presForFrequency(tone);
 8006512:	88fb      	ldrh	r3, [r7, #6]
 8006514:	4618      	mov	r0, r3
 8006516:	f7ff ffcd 	bl	80064b4 <presForFrequency>
 800651a:	4603      	mov	r3, r0
 800651c:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_PRESCALER(htim, pres);
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	89fa      	ldrh	r2, [r7, #14]
 8006524:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006526:	bf00      	nop
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
	...

08006530 <siprintf>:
 8006530:	b40e      	push	{r1, r2, r3}
 8006532:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006536:	b510      	push	{r4, lr}
 8006538:	2400      	movs	r4, #0
 800653a:	b09d      	sub	sp, #116	@ 0x74
 800653c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800653e:	9002      	str	r0, [sp, #8]
 8006540:	9006      	str	r0, [sp, #24]
 8006542:	9107      	str	r1, [sp, #28]
 8006544:	9104      	str	r1, [sp, #16]
 8006546:	4809      	ldr	r0, [pc, #36]	@ (800656c <siprintf+0x3c>)
 8006548:	4909      	ldr	r1, [pc, #36]	@ (8006570 <siprintf+0x40>)
 800654a:	f853 2b04 	ldr.w	r2, [r3], #4
 800654e:	9105      	str	r1, [sp, #20]
 8006550:	6800      	ldr	r0, [r0, #0]
 8006552:	a902      	add	r1, sp, #8
 8006554:	9301      	str	r3, [sp, #4]
 8006556:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006558:	f000 f992 	bl	8006880 <_svfiprintf_r>
 800655c:	9b02      	ldr	r3, [sp, #8]
 800655e:	701c      	strb	r4, [r3, #0]
 8006560:	b01d      	add	sp, #116	@ 0x74
 8006562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006566:	b003      	add	sp, #12
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	20000034 	.word	0x20000034
 8006570:	ffff0208 	.word	0xffff0208

08006574 <memset>:
 8006574:	4603      	mov	r3, r0
 8006576:	4402      	add	r2, r0
 8006578:	4293      	cmp	r3, r2
 800657a:	d100      	bne.n	800657e <memset+0xa>
 800657c:	4770      	bx	lr
 800657e:	f803 1b01 	strb.w	r1, [r3], #1
 8006582:	e7f9      	b.n	8006578 <memset+0x4>

08006584 <__errno>:
 8006584:	4b01      	ldr	r3, [pc, #4]	@ (800658c <__errno+0x8>)
 8006586:	6818      	ldr	r0, [r3, #0]
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	20000034 	.word	0x20000034

08006590 <__libc_init_array>:
 8006590:	b570      	push	{r4, r5, r6, lr}
 8006592:	2600      	movs	r6, #0
 8006594:	4d0c      	ldr	r5, [pc, #48]	@ (80065c8 <__libc_init_array+0x38>)
 8006596:	4c0d      	ldr	r4, [pc, #52]	@ (80065cc <__libc_init_array+0x3c>)
 8006598:	1b64      	subs	r4, r4, r5
 800659a:	10a4      	asrs	r4, r4, #2
 800659c:	42a6      	cmp	r6, r4
 800659e:	d109      	bne.n	80065b4 <__libc_init_array+0x24>
 80065a0:	f000 fc76 	bl	8006e90 <_init>
 80065a4:	2600      	movs	r6, #0
 80065a6:	4d0a      	ldr	r5, [pc, #40]	@ (80065d0 <__libc_init_array+0x40>)
 80065a8:	4c0a      	ldr	r4, [pc, #40]	@ (80065d4 <__libc_init_array+0x44>)
 80065aa:	1b64      	subs	r4, r4, r5
 80065ac:	10a4      	asrs	r4, r4, #2
 80065ae:	42a6      	cmp	r6, r4
 80065b0:	d105      	bne.n	80065be <__libc_init_array+0x2e>
 80065b2:	bd70      	pop	{r4, r5, r6, pc}
 80065b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80065b8:	4798      	blx	r3
 80065ba:	3601      	adds	r6, #1
 80065bc:	e7ee      	b.n	800659c <__libc_init_array+0xc>
 80065be:	f855 3b04 	ldr.w	r3, [r5], #4
 80065c2:	4798      	blx	r3
 80065c4:	3601      	adds	r6, #1
 80065c6:	e7f2      	b.n	80065ae <__libc_init_array+0x1e>
 80065c8:	08006ff8 	.word	0x08006ff8
 80065cc:	08006ff8 	.word	0x08006ff8
 80065d0:	08006ff8 	.word	0x08006ff8
 80065d4:	08006ffc 	.word	0x08006ffc

080065d8 <__retarget_lock_acquire_recursive>:
 80065d8:	4770      	bx	lr

080065da <__retarget_lock_release_recursive>:
 80065da:	4770      	bx	lr

080065dc <_free_r>:
 80065dc:	b538      	push	{r3, r4, r5, lr}
 80065de:	4605      	mov	r5, r0
 80065e0:	2900      	cmp	r1, #0
 80065e2:	d040      	beq.n	8006666 <_free_r+0x8a>
 80065e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065e8:	1f0c      	subs	r4, r1, #4
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	bfb8      	it	lt
 80065ee:	18e4      	addlt	r4, r4, r3
 80065f0:	f000 f8de 	bl	80067b0 <__malloc_lock>
 80065f4:	4a1c      	ldr	r2, [pc, #112]	@ (8006668 <_free_r+0x8c>)
 80065f6:	6813      	ldr	r3, [r2, #0]
 80065f8:	b933      	cbnz	r3, 8006608 <_free_r+0x2c>
 80065fa:	6063      	str	r3, [r4, #4]
 80065fc:	6014      	str	r4, [r2, #0]
 80065fe:	4628      	mov	r0, r5
 8006600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006604:	f000 b8da 	b.w	80067bc <__malloc_unlock>
 8006608:	42a3      	cmp	r3, r4
 800660a:	d908      	bls.n	800661e <_free_r+0x42>
 800660c:	6820      	ldr	r0, [r4, #0]
 800660e:	1821      	adds	r1, r4, r0
 8006610:	428b      	cmp	r3, r1
 8006612:	bf01      	itttt	eq
 8006614:	6819      	ldreq	r1, [r3, #0]
 8006616:	685b      	ldreq	r3, [r3, #4]
 8006618:	1809      	addeq	r1, r1, r0
 800661a:	6021      	streq	r1, [r4, #0]
 800661c:	e7ed      	b.n	80065fa <_free_r+0x1e>
 800661e:	461a      	mov	r2, r3
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	b10b      	cbz	r3, 8006628 <_free_r+0x4c>
 8006624:	42a3      	cmp	r3, r4
 8006626:	d9fa      	bls.n	800661e <_free_r+0x42>
 8006628:	6811      	ldr	r1, [r2, #0]
 800662a:	1850      	adds	r0, r2, r1
 800662c:	42a0      	cmp	r0, r4
 800662e:	d10b      	bne.n	8006648 <_free_r+0x6c>
 8006630:	6820      	ldr	r0, [r4, #0]
 8006632:	4401      	add	r1, r0
 8006634:	1850      	adds	r0, r2, r1
 8006636:	4283      	cmp	r3, r0
 8006638:	6011      	str	r1, [r2, #0]
 800663a:	d1e0      	bne.n	80065fe <_free_r+0x22>
 800663c:	6818      	ldr	r0, [r3, #0]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	4408      	add	r0, r1
 8006642:	6010      	str	r0, [r2, #0]
 8006644:	6053      	str	r3, [r2, #4]
 8006646:	e7da      	b.n	80065fe <_free_r+0x22>
 8006648:	d902      	bls.n	8006650 <_free_r+0x74>
 800664a:	230c      	movs	r3, #12
 800664c:	602b      	str	r3, [r5, #0]
 800664e:	e7d6      	b.n	80065fe <_free_r+0x22>
 8006650:	6820      	ldr	r0, [r4, #0]
 8006652:	1821      	adds	r1, r4, r0
 8006654:	428b      	cmp	r3, r1
 8006656:	bf01      	itttt	eq
 8006658:	6819      	ldreq	r1, [r3, #0]
 800665a:	685b      	ldreq	r3, [r3, #4]
 800665c:	1809      	addeq	r1, r1, r0
 800665e:	6021      	streq	r1, [r4, #0]
 8006660:	6063      	str	r3, [r4, #4]
 8006662:	6054      	str	r4, [r2, #4]
 8006664:	e7cb      	b.n	80065fe <_free_r+0x22>
 8006666:	bd38      	pop	{r3, r4, r5, pc}
 8006668:	200003dc 	.word	0x200003dc

0800666c <sbrk_aligned>:
 800666c:	b570      	push	{r4, r5, r6, lr}
 800666e:	4e0f      	ldr	r6, [pc, #60]	@ (80066ac <sbrk_aligned+0x40>)
 8006670:	460c      	mov	r4, r1
 8006672:	6831      	ldr	r1, [r6, #0]
 8006674:	4605      	mov	r5, r0
 8006676:	b911      	cbnz	r1, 800667e <sbrk_aligned+0x12>
 8006678:	f000 fba8 	bl	8006dcc <_sbrk_r>
 800667c:	6030      	str	r0, [r6, #0]
 800667e:	4621      	mov	r1, r4
 8006680:	4628      	mov	r0, r5
 8006682:	f000 fba3 	bl	8006dcc <_sbrk_r>
 8006686:	1c43      	adds	r3, r0, #1
 8006688:	d103      	bne.n	8006692 <sbrk_aligned+0x26>
 800668a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800668e:	4620      	mov	r0, r4
 8006690:	bd70      	pop	{r4, r5, r6, pc}
 8006692:	1cc4      	adds	r4, r0, #3
 8006694:	f024 0403 	bic.w	r4, r4, #3
 8006698:	42a0      	cmp	r0, r4
 800669a:	d0f8      	beq.n	800668e <sbrk_aligned+0x22>
 800669c:	1a21      	subs	r1, r4, r0
 800669e:	4628      	mov	r0, r5
 80066a0:	f000 fb94 	bl	8006dcc <_sbrk_r>
 80066a4:	3001      	adds	r0, #1
 80066a6:	d1f2      	bne.n	800668e <sbrk_aligned+0x22>
 80066a8:	e7ef      	b.n	800668a <sbrk_aligned+0x1e>
 80066aa:	bf00      	nop
 80066ac:	200003d8 	.word	0x200003d8

080066b0 <_malloc_r>:
 80066b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066b4:	1ccd      	adds	r5, r1, #3
 80066b6:	f025 0503 	bic.w	r5, r5, #3
 80066ba:	3508      	adds	r5, #8
 80066bc:	2d0c      	cmp	r5, #12
 80066be:	bf38      	it	cc
 80066c0:	250c      	movcc	r5, #12
 80066c2:	2d00      	cmp	r5, #0
 80066c4:	4606      	mov	r6, r0
 80066c6:	db01      	blt.n	80066cc <_malloc_r+0x1c>
 80066c8:	42a9      	cmp	r1, r5
 80066ca:	d904      	bls.n	80066d6 <_malloc_r+0x26>
 80066cc:	230c      	movs	r3, #12
 80066ce:	6033      	str	r3, [r6, #0]
 80066d0:	2000      	movs	r0, #0
 80066d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80067ac <_malloc_r+0xfc>
 80066da:	f000 f869 	bl	80067b0 <__malloc_lock>
 80066de:	f8d8 3000 	ldr.w	r3, [r8]
 80066e2:	461c      	mov	r4, r3
 80066e4:	bb44      	cbnz	r4, 8006738 <_malloc_r+0x88>
 80066e6:	4629      	mov	r1, r5
 80066e8:	4630      	mov	r0, r6
 80066ea:	f7ff ffbf 	bl	800666c <sbrk_aligned>
 80066ee:	1c43      	adds	r3, r0, #1
 80066f0:	4604      	mov	r4, r0
 80066f2:	d158      	bne.n	80067a6 <_malloc_r+0xf6>
 80066f4:	f8d8 4000 	ldr.w	r4, [r8]
 80066f8:	4627      	mov	r7, r4
 80066fa:	2f00      	cmp	r7, #0
 80066fc:	d143      	bne.n	8006786 <_malloc_r+0xd6>
 80066fe:	2c00      	cmp	r4, #0
 8006700:	d04b      	beq.n	800679a <_malloc_r+0xea>
 8006702:	6823      	ldr	r3, [r4, #0]
 8006704:	4639      	mov	r1, r7
 8006706:	4630      	mov	r0, r6
 8006708:	eb04 0903 	add.w	r9, r4, r3
 800670c:	f000 fb5e 	bl	8006dcc <_sbrk_r>
 8006710:	4581      	cmp	r9, r0
 8006712:	d142      	bne.n	800679a <_malloc_r+0xea>
 8006714:	6821      	ldr	r1, [r4, #0]
 8006716:	4630      	mov	r0, r6
 8006718:	1a6d      	subs	r5, r5, r1
 800671a:	4629      	mov	r1, r5
 800671c:	f7ff ffa6 	bl	800666c <sbrk_aligned>
 8006720:	3001      	adds	r0, #1
 8006722:	d03a      	beq.n	800679a <_malloc_r+0xea>
 8006724:	6823      	ldr	r3, [r4, #0]
 8006726:	442b      	add	r3, r5
 8006728:	6023      	str	r3, [r4, #0]
 800672a:	f8d8 3000 	ldr.w	r3, [r8]
 800672e:	685a      	ldr	r2, [r3, #4]
 8006730:	bb62      	cbnz	r2, 800678c <_malloc_r+0xdc>
 8006732:	f8c8 7000 	str.w	r7, [r8]
 8006736:	e00f      	b.n	8006758 <_malloc_r+0xa8>
 8006738:	6822      	ldr	r2, [r4, #0]
 800673a:	1b52      	subs	r2, r2, r5
 800673c:	d420      	bmi.n	8006780 <_malloc_r+0xd0>
 800673e:	2a0b      	cmp	r2, #11
 8006740:	d917      	bls.n	8006772 <_malloc_r+0xc2>
 8006742:	1961      	adds	r1, r4, r5
 8006744:	42a3      	cmp	r3, r4
 8006746:	6025      	str	r5, [r4, #0]
 8006748:	bf18      	it	ne
 800674a:	6059      	strne	r1, [r3, #4]
 800674c:	6863      	ldr	r3, [r4, #4]
 800674e:	bf08      	it	eq
 8006750:	f8c8 1000 	streq.w	r1, [r8]
 8006754:	5162      	str	r2, [r4, r5]
 8006756:	604b      	str	r3, [r1, #4]
 8006758:	4630      	mov	r0, r6
 800675a:	f000 f82f 	bl	80067bc <__malloc_unlock>
 800675e:	f104 000b 	add.w	r0, r4, #11
 8006762:	1d23      	adds	r3, r4, #4
 8006764:	f020 0007 	bic.w	r0, r0, #7
 8006768:	1ac2      	subs	r2, r0, r3
 800676a:	bf1c      	itt	ne
 800676c:	1a1b      	subne	r3, r3, r0
 800676e:	50a3      	strne	r3, [r4, r2]
 8006770:	e7af      	b.n	80066d2 <_malloc_r+0x22>
 8006772:	6862      	ldr	r2, [r4, #4]
 8006774:	42a3      	cmp	r3, r4
 8006776:	bf0c      	ite	eq
 8006778:	f8c8 2000 	streq.w	r2, [r8]
 800677c:	605a      	strne	r2, [r3, #4]
 800677e:	e7eb      	b.n	8006758 <_malloc_r+0xa8>
 8006780:	4623      	mov	r3, r4
 8006782:	6864      	ldr	r4, [r4, #4]
 8006784:	e7ae      	b.n	80066e4 <_malloc_r+0x34>
 8006786:	463c      	mov	r4, r7
 8006788:	687f      	ldr	r7, [r7, #4]
 800678a:	e7b6      	b.n	80066fa <_malloc_r+0x4a>
 800678c:	461a      	mov	r2, r3
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	42a3      	cmp	r3, r4
 8006792:	d1fb      	bne.n	800678c <_malloc_r+0xdc>
 8006794:	2300      	movs	r3, #0
 8006796:	6053      	str	r3, [r2, #4]
 8006798:	e7de      	b.n	8006758 <_malloc_r+0xa8>
 800679a:	230c      	movs	r3, #12
 800679c:	4630      	mov	r0, r6
 800679e:	6033      	str	r3, [r6, #0]
 80067a0:	f000 f80c 	bl	80067bc <__malloc_unlock>
 80067a4:	e794      	b.n	80066d0 <_malloc_r+0x20>
 80067a6:	6005      	str	r5, [r0, #0]
 80067a8:	e7d6      	b.n	8006758 <_malloc_r+0xa8>
 80067aa:	bf00      	nop
 80067ac:	200003dc 	.word	0x200003dc

080067b0 <__malloc_lock>:
 80067b0:	4801      	ldr	r0, [pc, #4]	@ (80067b8 <__malloc_lock+0x8>)
 80067b2:	f7ff bf11 	b.w	80065d8 <__retarget_lock_acquire_recursive>
 80067b6:	bf00      	nop
 80067b8:	200003d4 	.word	0x200003d4

080067bc <__malloc_unlock>:
 80067bc:	4801      	ldr	r0, [pc, #4]	@ (80067c4 <__malloc_unlock+0x8>)
 80067be:	f7ff bf0c 	b.w	80065da <__retarget_lock_release_recursive>
 80067c2:	bf00      	nop
 80067c4:	200003d4 	.word	0x200003d4

080067c8 <__ssputs_r>:
 80067c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067cc:	461f      	mov	r7, r3
 80067ce:	688e      	ldr	r6, [r1, #8]
 80067d0:	4682      	mov	sl, r0
 80067d2:	42be      	cmp	r6, r7
 80067d4:	460c      	mov	r4, r1
 80067d6:	4690      	mov	r8, r2
 80067d8:	680b      	ldr	r3, [r1, #0]
 80067da:	d82d      	bhi.n	8006838 <__ssputs_r+0x70>
 80067dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80067e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80067e4:	d026      	beq.n	8006834 <__ssputs_r+0x6c>
 80067e6:	6965      	ldr	r5, [r4, #20]
 80067e8:	6909      	ldr	r1, [r1, #16]
 80067ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067ee:	eba3 0901 	sub.w	r9, r3, r1
 80067f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80067f6:	1c7b      	adds	r3, r7, #1
 80067f8:	444b      	add	r3, r9
 80067fa:	106d      	asrs	r5, r5, #1
 80067fc:	429d      	cmp	r5, r3
 80067fe:	bf38      	it	cc
 8006800:	461d      	movcc	r5, r3
 8006802:	0553      	lsls	r3, r2, #21
 8006804:	d527      	bpl.n	8006856 <__ssputs_r+0x8e>
 8006806:	4629      	mov	r1, r5
 8006808:	f7ff ff52 	bl	80066b0 <_malloc_r>
 800680c:	4606      	mov	r6, r0
 800680e:	b360      	cbz	r0, 800686a <__ssputs_r+0xa2>
 8006810:	464a      	mov	r2, r9
 8006812:	6921      	ldr	r1, [r4, #16]
 8006814:	f000 faf8 	bl	8006e08 <memcpy>
 8006818:	89a3      	ldrh	r3, [r4, #12]
 800681a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800681e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006822:	81a3      	strh	r3, [r4, #12]
 8006824:	6126      	str	r6, [r4, #16]
 8006826:	444e      	add	r6, r9
 8006828:	6026      	str	r6, [r4, #0]
 800682a:	463e      	mov	r6, r7
 800682c:	6165      	str	r5, [r4, #20]
 800682e:	eba5 0509 	sub.w	r5, r5, r9
 8006832:	60a5      	str	r5, [r4, #8]
 8006834:	42be      	cmp	r6, r7
 8006836:	d900      	bls.n	800683a <__ssputs_r+0x72>
 8006838:	463e      	mov	r6, r7
 800683a:	4632      	mov	r2, r6
 800683c:	4641      	mov	r1, r8
 800683e:	6820      	ldr	r0, [r4, #0]
 8006840:	f000 faaa 	bl	8006d98 <memmove>
 8006844:	2000      	movs	r0, #0
 8006846:	68a3      	ldr	r3, [r4, #8]
 8006848:	1b9b      	subs	r3, r3, r6
 800684a:	60a3      	str	r3, [r4, #8]
 800684c:	6823      	ldr	r3, [r4, #0]
 800684e:	4433      	add	r3, r6
 8006850:	6023      	str	r3, [r4, #0]
 8006852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006856:	462a      	mov	r2, r5
 8006858:	f000 fae4 	bl	8006e24 <_realloc_r>
 800685c:	4606      	mov	r6, r0
 800685e:	2800      	cmp	r0, #0
 8006860:	d1e0      	bne.n	8006824 <__ssputs_r+0x5c>
 8006862:	4650      	mov	r0, sl
 8006864:	6921      	ldr	r1, [r4, #16]
 8006866:	f7ff feb9 	bl	80065dc <_free_r>
 800686a:	230c      	movs	r3, #12
 800686c:	f8ca 3000 	str.w	r3, [sl]
 8006870:	89a3      	ldrh	r3, [r4, #12]
 8006872:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006876:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800687a:	81a3      	strh	r3, [r4, #12]
 800687c:	e7e9      	b.n	8006852 <__ssputs_r+0x8a>
	...

08006880 <_svfiprintf_r>:
 8006880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006884:	4698      	mov	r8, r3
 8006886:	898b      	ldrh	r3, [r1, #12]
 8006888:	4607      	mov	r7, r0
 800688a:	061b      	lsls	r3, r3, #24
 800688c:	460d      	mov	r5, r1
 800688e:	4614      	mov	r4, r2
 8006890:	b09d      	sub	sp, #116	@ 0x74
 8006892:	d510      	bpl.n	80068b6 <_svfiprintf_r+0x36>
 8006894:	690b      	ldr	r3, [r1, #16]
 8006896:	b973      	cbnz	r3, 80068b6 <_svfiprintf_r+0x36>
 8006898:	2140      	movs	r1, #64	@ 0x40
 800689a:	f7ff ff09 	bl	80066b0 <_malloc_r>
 800689e:	6028      	str	r0, [r5, #0]
 80068a0:	6128      	str	r0, [r5, #16]
 80068a2:	b930      	cbnz	r0, 80068b2 <_svfiprintf_r+0x32>
 80068a4:	230c      	movs	r3, #12
 80068a6:	603b      	str	r3, [r7, #0]
 80068a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80068ac:	b01d      	add	sp, #116	@ 0x74
 80068ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068b2:	2340      	movs	r3, #64	@ 0x40
 80068b4:	616b      	str	r3, [r5, #20]
 80068b6:	2300      	movs	r3, #0
 80068b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80068ba:	2320      	movs	r3, #32
 80068bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80068c0:	2330      	movs	r3, #48	@ 0x30
 80068c2:	f04f 0901 	mov.w	r9, #1
 80068c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80068ca:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006a64 <_svfiprintf_r+0x1e4>
 80068ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80068d2:	4623      	mov	r3, r4
 80068d4:	469a      	mov	sl, r3
 80068d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068da:	b10a      	cbz	r2, 80068e0 <_svfiprintf_r+0x60>
 80068dc:	2a25      	cmp	r2, #37	@ 0x25
 80068de:	d1f9      	bne.n	80068d4 <_svfiprintf_r+0x54>
 80068e0:	ebba 0b04 	subs.w	fp, sl, r4
 80068e4:	d00b      	beq.n	80068fe <_svfiprintf_r+0x7e>
 80068e6:	465b      	mov	r3, fp
 80068e8:	4622      	mov	r2, r4
 80068ea:	4629      	mov	r1, r5
 80068ec:	4638      	mov	r0, r7
 80068ee:	f7ff ff6b 	bl	80067c8 <__ssputs_r>
 80068f2:	3001      	adds	r0, #1
 80068f4:	f000 80a7 	beq.w	8006a46 <_svfiprintf_r+0x1c6>
 80068f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068fa:	445a      	add	r2, fp
 80068fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80068fe:	f89a 3000 	ldrb.w	r3, [sl]
 8006902:	2b00      	cmp	r3, #0
 8006904:	f000 809f 	beq.w	8006a46 <_svfiprintf_r+0x1c6>
 8006908:	2300      	movs	r3, #0
 800690a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800690e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006912:	f10a 0a01 	add.w	sl, sl, #1
 8006916:	9304      	str	r3, [sp, #16]
 8006918:	9307      	str	r3, [sp, #28]
 800691a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800691e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006920:	4654      	mov	r4, sl
 8006922:	2205      	movs	r2, #5
 8006924:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006928:	484e      	ldr	r0, [pc, #312]	@ (8006a64 <_svfiprintf_r+0x1e4>)
 800692a:	f000 fa5f 	bl	8006dec <memchr>
 800692e:	9a04      	ldr	r2, [sp, #16]
 8006930:	b9d8      	cbnz	r0, 800696a <_svfiprintf_r+0xea>
 8006932:	06d0      	lsls	r0, r2, #27
 8006934:	bf44      	itt	mi
 8006936:	2320      	movmi	r3, #32
 8006938:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800693c:	0711      	lsls	r1, r2, #28
 800693e:	bf44      	itt	mi
 8006940:	232b      	movmi	r3, #43	@ 0x2b
 8006942:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006946:	f89a 3000 	ldrb.w	r3, [sl]
 800694a:	2b2a      	cmp	r3, #42	@ 0x2a
 800694c:	d015      	beq.n	800697a <_svfiprintf_r+0xfa>
 800694e:	4654      	mov	r4, sl
 8006950:	2000      	movs	r0, #0
 8006952:	f04f 0c0a 	mov.w	ip, #10
 8006956:	9a07      	ldr	r2, [sp, #28]
 8006958:	4621      	mov	r1, r4
 800695a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800695e:	3b30      	subs	r3, #48	@ 0x30
 8006960:	2b09      	cmp	r3, #9
 8006962:	d94b      	bls.n	80069fc <_svfiprintf_r+0x17c>
 8006964:	b1b0      	cbz	r0, 8006994 <_svfiprintf_r+0x114>
 8006966:	9207      	str	r2, [sp, #28]
 8006968:	e014      	b.n	8006994 <_svfiprintf_r+0x114>
 800696a:	eba0 0308 	sub.w	r3, r0, r8
 800696e:	fa09 f303 	lsl.w	r3, r9, r3
 8006972:	4313      	orrs	r3, r2
 8006974:	46a2      	mov	sl, r4
 8006976:	9304      	str	r3, [sp, #16]
 8006978:	e7d2      	b.n	8006920 <_svfiprintf_r+0xa0>
 800697a:	9b03      	ldr	r3, [sp, #12]
 800697c:	1d19      	adds	r1, r3, #4
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	9103      	str	r1, [sp, #12]
 8006982:	2b00      	cmp	r3, #0
 8006984:	bfbb      	ittet	lt
 8006986:	425b      	neglt	r3, r3
 8006988:	f042 0202 	orrlt.w	r2, r2, #2
 800698c:	9307      	strge	r3, [sp, #28]
 800698e:	9307      	strlt	r3, [sp, #28]
 8006990:	bfb8      	it	lt
 8006992:	9204      	strlt	r2, [sp, #16]
 8006994:	7823      	ldrb	r3, [r4, #0]
 8006996:	2b2e      	cmp	r3, #46	@ 0x2e
 8006998:	d10a      	bne.n	80069b0 <_svfiprintf_r+0x130>
 800699a:	7863      	ldrb	r3, [r4, #1]
 800699c:	2b2a      	cmp	r3, #42	@ 0x2a
 800699e:	d132      	bne.n	8006a06 <_svfiprintf_r+0x186>
 80069a0:	9b03      	ldr	r3, [sp, #12]
 80069a2:	3402      	adds	r4, #2
 80069a4:	1d1a      	adds	r2, r3, #4
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	9203      	str	r2, [sp, #12]
 80069aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80069ae:	9305      	str	r3, [sp, #20]
 80069b0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006a68 <_svfiprintf_r+0x1e8>
 80069b4:	2203      	movs	r2, #3
 80069b6:	4650      	mov	r0, sl
 80069b8:	7821      	ldrb	r1, [r4, #0]
 80069ba:	f000 fa17 	bl	8006dec <memchr>
 80069be:	b138      	cbz	r0, 80069d0 <_svfiprintf_r+0x150>
 80069c0:	2240      	movs	r2, #64	@ 0x40
 80069c2:	9b04      	ldr	r3, [sp, #16]
 80069c4:	eba0 000a 	sub.w	r0, r0, sl
 80069c8:	4082      	lsls	r2, r0
 80069ca:	4313      	orrs	r3, r2
 80069cc:	3401      	adds	r4, #1
 80069ce:	9304      	str	r3, [sp, #16]
 80069d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069d4:	2206      	movs	r2, #6
 80069d6:	4825      	ldr	r0, [pc, #148]	@ (8006a6c <_svfiprintf_r+0x1ec>)
 80069d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80069dc:	f000 fa06 	bl	8006dec <memchr>
 80069e0:	2800      	cmp	r0, #0
 80069e2:	d036      	beq.n	8006a52 <_svfiprintf_r+0x1d2>
 80069e4:	4b22      	ldr	r3, [pc, #136]	@ (8006a70 <_svfiprintf_r+0x1f0>)
 80069e6:	bb1b      	cbnz	r3, 8006a30 <_svfiprintf_r+0x1b0>
 80069e8:	9b03      	ldr	r3, [sp, #12]
 80069ea:	3307      	adds	r3, #7
 80069ec:	f023 0307 	bic.w	r3, r3, #7
 80069f0:	3308      	adds	r3, #8
 80069f2:	9303      	str	r3, [sp, #12]
 80069f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069f6:	4433      	add	r3, r6
 80069f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80069fa:	e76a      	b.n	80068d2 <_svfiprintf_r+0x52>
 80069fc:	460c      	mov	r4, r1
 80069fe:	2001      	movs	r0, #1
 8006a00:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a04:	e7a8      	b.n	8006958 <_svfiprintf_r+0xd8>
 8006a06:	2300      	movs	r3, #0
 8006a08:	f04f 0c0a 	mov.w	ip, #10
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	3401      	adds	r4, #1
 8006a10:	9305      	str	r3, [sp, #20]
 8006a12:	4620      	mov	r0, r4
 8006a14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a18:	3a30      	subs	r2, #48	@ 0x30
 8006a1a:	2a09      	cmp	r2, #9
 8006a1c:	d903      	bls.n	8006a26 <_svfiprintf_r+0x1a6>
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d0c6      	beq.n	80069b0 <_svfiprintf_r+0x130>
 8006a22:	9105      	str	r1, [sp, #20]
 8006a24:	e7c4      	b.n	80069b0 <_svfiprintf_r+0x130>
 8006a26:	4604      	mov	r4, r0
 8006a28:	2301      	movs	r3, #1
 8006a2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a2e:	e7f0      	b.n	8006a12 <_svfiprintf_r+0x192>
 8006a30:	ab03      	add	r3, sp, #12
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	462a      	mov	r2, r5
 8006a36:	4638      	mov	r0, r7
 8006a38:	4b0e      	ldr	r3, [pc, #56]	@ (8006a74 <_svfiprintf_r+0x1f4>)
 8006a3a:	a904      	add	r1, sp, #16
 8006a3c:	f3af 8000 	nop.w
 8006a40:	1c42      	adds	r2, r0, #1
 8006a42:	4606      	mov	r6, r0
 8006a44:	d1d6      	bne.n	80069f4 <_svfiprintf_r+0x174>
 8006a46:	89ab      	ldrh	r3, [r5, #12]
 8006a48:	065b      	lsls	r3, r3, #25
 8006a4a:	f53f af2d 	bmi.w	80068a8 <_svfiprintf_r+0x28>
 8006a4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a50:	e72c      	b.n	80068ac <_svfiprintf_r+0x2c>
 8006a52:	ab03      	add	r3, sp, #12
 8006a54:	9300      	str	r3, [sp, #0]
 8006a56:	462a      	mov	r2, r5
 8006a58:	4638      	mov	r0, r7
 8006a5a:	4b06      	ldr	r3, [pc, #24]	@ (8006a74 <_svfiprintf_r+0x1f4>)
 8006a5c:	a904      	add	r1, sp, #16
 8006a5e:	f000 f87d 	bl	8006b5c <_printf_i>
 8006a62:	e7ed      	b.n	8006a40 <_svfiprintf_r+0x1c0>
 8006a64:	08006fc2 	.word	0x08006fc2
 8006a68:	08006fc8 	.word	0x08006fc8
 8006a6c:	08006fcc 	.word	0x08006fcc
 8006a70:	00000000 	.word	0x00000000
 8006a74:	080067c9 	.word	0x080067c9

08006a78 <_printf_common>:
 8006a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a7c:	4616      	mov	r6, r2
 8006a7e:	4698      	mov	r8, r3
 8006a80:	688a      	ldr	r2, [r1, #8]
 8006a82:	690b      	ldr	r3, [r1, #16]
 8006a84:	4607      	mov	r7, r0
 8006a86:	4293      	cmp	r3, r2
 8006a88:	bfb8      	it	lt
 8006a8a:	4613      	movlt	r3, r2
 8006a8c:	6033      	str	r3, [r6, #0]
 8006a8e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a92:	460c      	mov	r4, r1
 8006a94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a98:	b10a      	cbz	r2, 8006a9e <_printf_common+0x26>
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	6033      	str	r3, [r6, #0]
 8006a9e:	6823      	ldr	r3, [r4, #0]
 8006aa0:	0699      	lsls	r1, r3, #26
 8006aa2:	bf42      	ittt	mi
 8006aa4:	6833      	ldrmi	r3, [r6, #0]
 8006aa6:	3302      	addmi	r3, #2
 8006aa8:	6033      	strmi	r3, [r6, #0]
 8006aaa:	6825      	ldr	r5, [r4, #0]
 8006aac:	f015 0506 	ands.w	r5, r5, #6
 8006ab0:	d106      	bne.n	8006ac0 <_printf_common+0x48>
 8006ab2:	f104 0a19 	add.w	sl, r4, #25
 8006ab6:	68e3      	ldr	r3, [r4, #12]
 8006ab8:	6832      	ldr	r2, [r6, #0]
 8006aba:	1a9b      	subs	r3, r3, r2
 8006abc:	42ab      	cmp	r3, r5
 8006abe:	dc2b      	bgt.n	8006b18 <_printf_common+0xa0>
 8006ac0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ac4:	6822      	ldr	r2, [r4, #0]
 8006ac6:	3b00      	subs	r3, #0
 8006ac8:	bf18      	it	ne
 8006aca:	2301      	movne	r3, #1
 8006acc:	0692      	lsls	r2, r2, #26
 8006ace:	d430      	bmi.n	8006b32 <_printf_common+0xba>
 8006ad0:	4641      	mov	r1, r8
 8006ad2:	4638      	mov	r0, r7
 8006ad4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ad8:	47c8      	blx	r9
 8006ada:	3001      	adds	r0, #1
 8006adc:	d023      	beq.n	8006b26 <_printf_common+0xae>
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	6922      	ldr	r2, [r4, #16]
 8006ae2:	f003 0306 	and.w	r3, r3, #6
 8006ae6:	2b04      	cmp	r3, #4
 8006ae8:	bf14      	ite	ne
 8006aea:	2500      	movne	r5, #0
 8006aec:	6833      	ldreq	r3, [r6, #0]
 8006aee:	f04f 0600 	mov.w	r6, #0
 8006af2:	bf08      	it	eq
 8006af4:	68e5      	ldreq	r5, [r4, #12]
 8006af6:	f104 041a 	add.w	r4, r4, #26
 8006afa:	bf08      	it	eq
 8006afc:	1aed      	subeq	r5, r5, r3
 8006afe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006b02:	bf08      	it	eq
 8006b04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	bfc4      	itt	gt
 8006b0c:	1a9b      	subgt	r3, r3, r2
 8006b0e:	18ed      	addgt	r5, r5, r3
 8006b10:	42b5      	cmp	r5, r6
 8006b12:	d11a      	bne.n	8006b4a <_printf_common+0xd2>
 8006b14:	2000      	movs	r0, #0
 8006b16:	e008      	b.n	8006b2a <_printf_common+0xb2>
 8006b18:	2301      	movs	r3, #1
 8006b1a:	4652      	mov	r2, sl
 8006b1c:	4641      	mov	r1, r8
 8006b1e:	4638      	mov	r0, r7
 8006b20:	47c8      	blx	r9
 8006b22:	3001      	adds	r0, #1
 8006b24:	d103      	bne.n	8006b2e <_printf_common+0xb6>
 8006b26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b2e:	3501      	adds	r5, #1
 8006b30:	e7c1      	b.n	8006ab6 <_printf_common+0x3e>
 8006b32:	2030      	movs	r0, #48	@ 0x30
 8006b34:	18e1      	adds	r1, r4, r3
 8006b36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006b3a:	1c5a      	adds	r2, r3, #1
 8006b3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006b40:	4422      	add	r2, r4
 8006b42:	3302      	adds	r3, #2
 8006b44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006b48:	e7c2      	b.n	8006ad0 <_printf_common+0x58>
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	4622      	mov	r2, r4
 8006b4e:	4641      	mov	r1, r8
 8006b50:	4638      	mov	r0, r7
 8006b52:	47c8      	blx	r9
 8006b54:	3001      	adds	r0, #1
 8006b56:	d0e6      	beq.n	8006b26 <_printf_common+0xae>
 8006b58:	3601      	adds	r6, #1
 8006b5a:	e7d9      	b.n	8006b10 <_printf_common+0x98>

08006b5c <_printf_i>:
 8006b5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b60:	7e0f      	ldrb	r7, [r1, #24]
 8006b62:	4691      	mov	r9, r2
 8006b64:	2f78      	cmp	r7, #120	@ 0x78
 8006b66:	4680      	mov	r8, r0
 8006b68:	460c      	mov	r4, r1
 8006b6a:	469a      	mov	sl, r3
 8006b6c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006b6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006b72:	d807      	bhi.n	8006b84 <_printf_i+0x28>
 8006b74:	2f62      	cmp	r7, #98	@ 0x62
 8006b76:	d80a      	bhi.n	8006b8e <_printf_i+0x32>
 8006b78:	2f00      	cmp	r7, #0
 8006b7a:	f000 80d1 	beq.w	8006d20 <_printf_i+0x1c4>
 8006b7e:	2f58      	cmp	r7, #88	@ 0x58
 8006b80:	f000 80b8 	beq.w	8006cf4 <_printf_i+0x198>
 8006b84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b8c:	e03a      	b.n	8006c04 <_printf_i+0xa8>
 8006b8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b92:	2b15      	cmp	r3, #21
 8006b94:	d8f6      	bhi.n	8006b84 <_printf_i+0x28>
 8006b96:	a101      	add	r1, pc, #4	@ (adr r1, 8006b9c <_printf_i+0x40>)
 8006b98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b9c:	08006bf5 	.word	0x08006bf5
 8006ba0:	08006c09 	.word	0x08006c09
 8006ba4:	08006b85 	.word	0x08006b85
 8006ba8:	08006b85 	.word	0x08006b85
 8006bac:	08006b85 	.word	0x08006b85
 8006bb0:	08006b85 	.word	0x08006b85
 8006bb4:	08006c09 	.word	0x08006c09
 8006bb8:	08006b85 	.word	0x08006b85
 8006bbc:	08006b85 	.word	0x08006b85
 8006bc0:	08006b85 	.word	0x08006b85
 8006bc4:	08006b85 	.word	0x08006b85
 8006bc8:	08006d07 	.word	0x08006d07
 8006bcc:	08006c33 	.word	0x08006c33
 8006bd0:	08006cc1 	.word	0x08006cc1
 8006bd4:	08006b85 	.word	0x08006b85
 8006bd8:	08006b85 	.word	0x08006b85
 8006bdc:	08006d29 	.word	0x08006d29
 8006be0:	08006b85 	.word	0x08006b85
 8006be4:	08006c33 	.word	0x08006c33
 8006be8:	08006b85 	.word	0x08006b85
 8006bec:	08006b85 	.word	0x08006b85
 8006bf0:	08006cc9 	.word	0x08006cc9
 8006bf4:	6833      	ldr	r3, [r6, #0]
 8006bf6:	1d1a      	adds	r2, r3, #4
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	6032      	str	r2, [r6, #0]
 8006bfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006c04:	2301      	movs	r3, #1
 8006c06:	e09c      	b.n	8006d42 <_printf_i+0x1e6>
 8006c08:	6833      	ldr	r3, [r6, #0]
 8006c0a:	6820      	ldr	r0, [r4, #0]
 8006c0c:	1d19      	adds	r1, r3, #4
 8006c0e:	6031      	str	r1, [r6, #0]
 8006c10:	0606      	lsls	r6, r0, #24
 8006c12:	d501      	bpl.n	8006c18 <_printf_i+0xbc>
 8006c14:	681d      	ldr	r5, [r3, #0]
 8006c16:	e003      	b.n	8006c20 <_printf_i+0xc4>
 8006c18:	0645      	lsls	r5, r0, #25
 8006c1a:	d5fb      	bpl.n	8006c14 <_printf_i+0xb8>
 8006c1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006c20:	2d00      	cmp	r5, #0
 8006c22:	da03      	bge.n	8006c2c <_printf_i+0xd0>
 8006c24:	232d      	movs	r3, #45	@ 0x2d
 8006c26:	426d      	negs	r5, r5
 8006c28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c2c:	230a      	movs	r3, #10
 8006c2e:	4858      	ldr	r0, [pc, #352]	@ (8006d90 <_printf_i+0x234>)
 8006c30:	e011      	b.n	8006c56 <_printf_i+0xfa>
 8006c32:	6821      	ldr	r1, [r4, #0]
 8006c34:	6833      	ldr	r3, [r6, #0]
 8006c36:	0608      	lsls	r0, r1, #24
 8006c38:	f853 5b04 	ldr.w	r5, [r3], #4
 8006c3c:	d402      	bmi.n	8006c44 <_printf_i+0xe8>
 8006c3e:	0649      	lsls	r1, r1, #25
 8006c40:	bf48      	it	mi
 8006c42:	b2ad      	uxthmi	r5, r5
 8006c44:	2f6f      	cmp	r7, #111	@ 0x6f
 8006c46:	6033      	str	r3, [r6, #0]
 8006c48:	bf14      	ite	ne
 8006c4a:	230a      	movne	r3, #10
 8006c4c:	2308      	moveq	r3, #8
 8006c4e:	4850      	ldr	r0, [pc, #320]	@ (8006d90 <_printf_i+0x234>)
 8006c50:	2100      	movs	r1, #0
 8006c52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006c56:	6866      	ldr	r6, [r4, #4]
 8006c58:	2e00      	cmp	r6, #0
 8006c5a:	60a6      	str	r6, [r4, #8]
 8006c5c:	db05      	blt.n	8006c6a <_printf_i+0x10e>
 8006c5e:	6821      	ldr	r1, [r4, #0]
 8006c60:	432e      	orrs	r6, r5
 8006c62:	f021 0104 	bic.w	r1, r1, #4
 8006c66:	6021      	str	r1, [r4, #0]
 8006c68:	d04b      	beq.n	8006d02 <_printf_i+0x1a6>
 8006c6a:	4616      	mov	r6, r2
 8006c6c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c70:	fb03 5711 	mls	r7, r3, r1, r5
 8006c74:	5dc7      	ldrb	r7, [r0, r7]
 8006c76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c7a:	462f      	mov	r7, r5
 8006c7c:	42bb      	cmp	r3, r7
 8006c7e:	460d      	mov	r5, r1
 8006c80:	d9f4      	bls.n	8006c6c <_printf_i+0x110>
 8006c82:	2b08      	cmp	r3, #8
 8006c84:	d10b      	bne.n	8006c9e <_printf_i+0x142>
 8006c86:	6823      	ldr	r3, [r4, #0]
 8006c88:	07df      	lsls	r7, r3, #31
 8006c8a:	d508      	bpl.n	8006c9e <_printf_i+0x142>
 8006c8c:	6923      	ldr	r3, [r4, #16]
 8006c8e:	6861      	ldr	r1, [r4, #4]
 8006c90:	4299      	cmp	r1, r3
 8006c92:	bfde      	ittt	le
 8006c94:	2330      	movle	r3, #48	@ 0x30
 8006c96:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c9a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006c9e:	1b92      	subs	r2, r2, r6
 8006ca0:	6122      	str	r2, [r4, #16]
 8006ca2:	464b      	mov	r3, r9
 8006ca4:	4621      	mov	r1, r4
 8006ca6:	4640      	mov	r0, r8
 8006ca8:	f8cd a000 	str.w	sl, [sp]
 8006cac:	aa03      	add	r2, sp, #12
 8006cae:	f7ff fee3 	bl	8006a78 <_printf_common>
 8006cb2:	3001      	adds	r0, #1
 8006cb4:	d14a      	bne.n	8006d4c <_printf_i+0x1f0>
 8006cb6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006cba:	b004      	add	sp, #16
 8006cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cc0:	6823      	ldr	r3, [r4, #0]
 8006cc2:	f043 0320 	orr.w	r3, r3, #32
 8006cc6:	6023      	str	r3, [r4, #0]
 8006cc8:	2778      	movs	r7, #120	@ 0x78
 8006cca:	4832      	ldr	r0, [pc, #200]	@ (8006d94 <_printf_i+0x238>)
 8006ccc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006cd0:	6823      	ldr	r3, [r4, #0]
 8006cd2:	6831      	ldr	r1, [r6, #0]
 8006cd4:	061f      	lsls	r7, r3, #24
 8006cd6:	f851 5b04 	ldr.w	r5, [r1], #4
 8006cda:	d402      	bmi.n	8006ce2 <_printf_i+0x186>
 8006cdc:	065f      	lsls	r7, r3, #25
 8006cde:	bf48      	it	mi
 8006ce0:	b2ad      	uxthmi	r5, r5
 8006ce2:	6031      	str	r1, [r6, #0]
 8006ce4:	07d9      	lsls	r1, r3, #31
 8006ce6:	bf44      	itt	mi
 8006ce8:	f043 0320 	orrmi.w	r3, r3, #32
 8006cec:	6023      	strmi	r3, [r4, #0]
 8006cee:	b11d      	cbz	r5, 8006cf8 <_printf_i+0x19c>
 8006cf0:	2310      	movs	r3, #16
 8006cf2:	e7ad      	b.n	8006c50 <_printf_i+0xf4>
 8006cf4:	4826      	ldr	r0, [pc, #152]	@ (8006d90 <_printf_i+0x234>)
 8006cf6:	e7e9      	b.n	8006ccc <_printf_i+0x170>
 8006cf8:	6823      	ldr	r3, [r4, #0]
 8006cfa:	f023 0320 	bic.w	r3, r3, #32
 8006cfe:	6023      	str	r3, [r4, #0]
 8006d00:	e7f6      	b.n	8006cf0 <_printf_i+0x194>
 8006d02:	4616      	mov	r6, r2
 8006d04:	e7bd      	b.n	8006c82 <_printf_i+0x126>
 8006d06:	6833      	ldr	r3, [r6, #0]
 8006d08:	6825      	ldr	r5, [r4, #0]
 8006d0a:	1d18      	adds	r0, r3, #4
 8006d0c:	6961      	ldr	r1, [r4, #20]
 8006d0e:	6030      	str	r0, [r6, #0]
 8006d10:	062e      	lsls	r6, r5, #24
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	d501      	bpl.n	8006d1a <_printf_i+0x1be>
 8006d16:	6019      	str	r1, [r3, #0]
 8006d18:	e002      	b.n	8006d20 <_printf_i+0x1c4>
 8006d1a:	0668      	lsls	r0, r5, #25
 8006d1c:	d5fb      	bpl.n	8006d16 <_printf_i+0x1ba>
 8006d1e:	8019      	strh	r1, [r3, #0]
 8006d20:	2300      	movs	r3, #0
 8006d22:	4616      	mov	r6, r2
 8006d24:	6123      	str	r3, [r4, #16]
 8006d26:	e7bc      	b.n	8006ca2 <_printf_i+0x146>
 8006d28:	6833      	ldr	r3, [r6, #0]
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	1d1a      	adds	r2, r3, #4
 8006d2e:	6032      	str	r2, [r6, #0]
 8006d30:	681e      	ldr	r6, [r3, #0]
 8006d32:	6862      	ldr	r2, [r4, #4]
 8006d34:	4630      	mov	r0, r6
 8006d36:	f000 f859 	bl	8006dec <memchr>
 8006d3a:	b108      	cbz	r0, 8006d40 <_printf_i+0x1e4>
 8006d3c:	1b80      	subs	r0, r0, r6
 8006d3e:	6060      	str	r0, [r4, #4]
 8006d40:	6863      	ldr	r3, [r4, #4]
 8006d42:	6123      	str	r3, [r4, #16]
 8006d44:	2300      	movs	r3, #0
 8006d46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d4a:	e7aa      	b.n	8006ca2 <_printf_i+0x146>
 8006d4c:	4632      	mov	r2, r6
 8006d4e:	4649      	mov	r1, r9
 8006d50:	4640      	mov	r0, r8
 8006d52:	6923      	ldr	r3, [r4, #16]
 8006d54:	47d0      	blx	sl
 8006d56:	3001      	adds	r0, #1
 8006d58:	d0ad      	beq.n	8006cb6 <_printf_i+0x15a>
 8006d5a:	6823      	ldr	r3, [r4, #0]
 8006d5c:	079b      	lsls	r3, r3, #30
 8006d5e:	d413      	bmi.n	8006d88 <_printf_i+0x22c>
 8006d60:	68e0      	ldr	r0, [r4, #12]
 8006d62:	9b03      	ldr	r3, [sp, #12]
 8006d64:	4298      	cmp	r0, r3
 8006d66:	bfb8      	it	lt
 8006d68:	4618      	movlt	r0, r3
 8006d6a:	e7a6      	b.n	8006cba <_printf_i+0x15e>
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	4632      	mov	r2, r6
 8006d70:	4649      	mov	r1, r9
 8006d72:	4640      	mov	r0, r8
 8006d74:	47d0      	blx	sl
 8006d76:	3001      	adds	r0, #1
 8006d78:	d09d      	beq.n	8006cb6 <_printf_i+0x15a>
 8006d7a:	3501      	adds	r5, #1
 8006d7c:	68e3      	ldr	r3, [r4, #12]
 8006d7e:	9903      	ldr	r1, [sp, #12]
 8006d80:	1a5b      	subs	r3, r3, r1
 8006d82:	42ab      	cmp	r3, r5
 8006d84:	dcf2      	bgt.n	8006d6c <_printf_i+0x210>
 8006d86:	e7eb      	b.n	8006d60 <_printf_i+0x204>
 8006d88:	2500      	movs	r5, #0
 8006d8a:	f104 0619 	add.w	r6, r4, #25
 8006d8e:	e7f5      	b.n	8006d7c <_printf_i+0x220>
 8006d90:	08006fd3 	.word	0x08006fd3
 8006d94:	08006fe4 	.word	0x08006fe4

08006d98 <memmove>:
 8006d98:	4288      	cmp	r0, r1
 8006d9a:	b510      	push	{r4, lr}
 8006d9c:	eb01 0402 	add.w	r4, r1, r2
 8006da0:	d902      	bls.n	8006da8 <memmove+0x10>
 8006da2:	4284      	cmp	r4, r0
 8006da4:	4623      	mov	r3, r4
 8006da6:	d807      	bhi.n	8006db8 <memmove+0x20>
 8006da8:	1e43      	subs	r3, r0, #1
 8006daa:	42a1      	cmp	r1, r4
 8006dac:	d008      	beq.n	8006dc0 <memmove+0x28>
 8006dae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006db2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006db6:	e7f8      	b.n	8006daa <memmove+0x12>
 8006db8:	4601      	mov	r1, r0
 8006dba:	4402      	add	r2, r0
 8006dbc:	428a      	cmp	r2, r1
 8006dbe:	d100      	bne.n	8006dc2 <memmove+0x2a>
 8006dc0:	bd10      	pop	{r4, pc}
 8006dc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006dc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006dca:	e7f7      	b.n	8006dbc <memmove+0x24>

08006dcc <_sbrk_r>:
 8006dcc:	b538      	push	{r3, r4, r5, lr}
 8006dce:	2300      	movs	r3, #0
 8006dd0:	4d05      	ldr	r5, [pc, #20]	@ (8006de8 <_sbrk_r+0x1c>)
 8006dd2:	4604      	mov	r4, r0
 8006dd4:	4608      	mov	r0, r1
 8006dd6:	602b      	str	r3, [r5, #0]
 8006dd8:	f7fb f988 	bl	80020ec <_sbrk>
 8006ddc:	1c43      	adds	r3, r0, #1
 8006dde:	d102      	bne.n	8006de6 <_sbrk_r+0x1a>
 8006de0:	682b      	ldr	r3, [r5, #0]
 8006de2:	b103      	cbz	r3, 8006de6 <_sbrk_r+0x1a>
 8006de4:	6023      	str	r3, [r4, #0]
 8006de6:	bd38      	pop	{r3, r4, r5, pc}
 8006de8:	200003d0 	.word	0x200003d0

08006dec <memchr>:
 8006dec:	4603      	mov	r3, r0
 8006dee:	b510      	push	{r4, lr}
 8006df0:	b2c9      	uxtb	r1, r1
 8006df2:	4402      	add	r2, r0
 8006df4:	4293      	cmp	r3, r2
 8006df6:	4618      	mov	r0, r3
 8006df8:	d101      	bne.n	8006dfe <memchr+0x12>
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	e003      	b.n	8006e06 <memchr+0x1a>
 8006dfe:	7804      	ldrb	r4, [r0, #0]
 8006e00:	3301      	adds	r3, #1
 8006e02:	428c      	cmp	r4, r1
 8006e04:	d1f6      	bne.n	8006df4 <memchr+0x8>
 8006e06:	bd10      	pop	{r4, pc}

08006e08 <memcpy>:
 8006e08:	440a      	add	r2, r1
 8006e0a:	4291      	cmp	r1, r2
 8006e0c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006e10:	d100      	bne.n	8006e14 <memcpy+0xc>
 8006e12:	4770      	bx	lr
 8006e14:	b510      	push	{r4, lr}
 8006e16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e1a:	4291      	cmp	r1, r2
 8006e1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e20:	d1f9      	bne.n	8006e16 <memcpy+0xe>
 8006e22:	bd10      	pop	{r4, pc}

08006e24 <_realloc_r>:
 8006e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e28:	4607      	mov	r7, r0
 8006e2a:	4614      	mov	r4, r2
 8006e2c:	460d      	mov	r5, r1
 8006e2e:	b921      	cbnz	r1, 8006e3a <_realloc_r+0x16>
 8006e30:	4611      	mov	r1, r2
 8006e32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e36:	f7ff bc3b 	b.w	80066b0 <_malloc_r>
 8006e3a:	b92a      	cbnz	r2, 8006e48 <_realloc_r+0x24>
 8006e3c:	f7ff fbce 	bl	80065dc <_free_r>
 8006e40:	4625      	mov	r5, r4
 8006e42:	4628      	mov	r0, r5
 8006e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e48:	f000 f81a 	bl	8006e80 <_malloc_usable_size_r>
 8006e4c:	4284      	cmp	r4, r0
 8006e4e:	4606      	mov	r6, r0
 8006e50:	d802      	bhi.n	8006e58 <_realloc_r+0x34>
 8006e52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006e56:	d8f4      	bhi.n	8006e42 <_realloc_r+0x1e>
 8006e58:	4621      	mov	r1, r4
 8006e5a:	4638      	mov	r0, r7
 8006e5c:	f7ff fc28 	bl	80066b0 <_malloc_r>
 8006e60:	4680      	mov	r8, r0
 8006e62:	b908      	cbnz	r0, 8006e68 <_realloc_r+0x44>
 8006e64:	4645      	mov	r5, r8
 8006e66:	e7ec      	b.n	8006e42 <_realloc_r+0x1e>
 8006e68:	42b4      	cmp	r4, r6
 8006e6a:	4622      	mov	r2, r4
 8006e6c:	4629      	mov	r1, r5
 8006e6e:	bf28      	it	cs
 8006e70:	4632      	movcs	r2, r6
 8006e72:	f7ff ffc9 	bl	8006e08 <memcpy>
 8006e76:	4629      	mov	r1, r5
 8006e78:	4638      	mov	r0, r7
 8006e7a:	f7ff fbaf 	bl	80065dc <_free_r>
 8006e7e:	e7f1      	b.n	8006e64 <_realloc_r+0x40>

08006e80 <_malloc_usable_size_r>:
 8006e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e84:	1f18      	subs	r0, r3, #4
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	bfbc      	itt	lt
 8006e8a:	580b      	ldrlt	r3, [r1, r0]
 8006e8c:	18c0      	addlt	r0, r0, r3
 8006e8e:	4770      	bx	lr

08006e90 <_init>:
 8006e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e92:	bf00      	nop
 8006e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e96:	bc08      	pop	{r3}
 8006e98:	469e      	mov	lr, r3
 8006e9a:	4770      	bx	lr

08006e9c <_fini>:
 8006e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e9e:	bf00      	nop
 8006ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ea2:	bc08      	pop	{r3}
 8006ea4:	469e      	mov	lr, r3
 8006ea6:	4770      	bx	lr
